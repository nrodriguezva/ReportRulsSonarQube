{
    "total": 678,
    "p": 1,
    "ps": 500,
    "rules": [
        {
            "key": "java:S1134",
            "repo": "java",
            "name": "Track uses of \"FIXME\" tags",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "0min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "0min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1134"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/546\">CWE-546 - Suspicious Comment</a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>\n<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>\n<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>\n<pre>\nint divide(int numerator, int denominator) {\n  return numerator / denominator;              // FIXME denominator value might be  0\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "COMPLETE",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S1135",
            "repo": "java",
            "name": "Track uses of \"TODO\" tags",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "INFO",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "0min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "0min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1135"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/546\">CWE-546 - Suspicious Comment</a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Developers often use <code>TODO</code> tags to mark areas in the code where additional work or improvements are needed but are not implemented\nimmediately. However, these <code>TODO</code> tags sometimes get overlooked or forgotten, leading to incomplete or unfinished code. This rule aims to\nidentify and address unattended <code>TODO</code> tags to ensure a clean and maintainable codebase. This description explores why this is a problem\nand how it can be fixed to improve the overall code quality.</p>\n<h3>What is the potential impact?</h3>\n<p>Unattended <code>TODO</code> tags in code can have significant implications for the development process and the overall codebase.</p>\n<p>Incomplete Functionality: When developers leave <code>TODO</code> tags without implementing the corresponding code, it results in incomplete\nfunctionality within the software. This can lead to unexpected behavior or missing features, adversely affecting the end-user experience.</p>\n<p>Missed Bug Fixes: If developers do not promptly address <code>TODO</code> tags, they might overlook critical bug fixes and security updates.\nDelayed bug fixes can result in more severe issues and increase the effort required to resolve them later.</p>\n<p>Impact on Collaboration: In team-based development environments, unattended <code>TODO</code> tags can hinder collaboration. Other team members\nmight not be aware of the intended changes, leading to conflicts or redundant efforts in the codebase.</p>\n<p>Codebase Bloat: The accumulation of unattended <code>TODO</code> tags over time can clutter the codebase and make it difficult to distinguish\nbetween work in progress and completed code. This bloat can make it challenging to maintain an organized and efficient codebase.</p>\n<p>Addressing this code smell is essential to ensure a maintainable, readable, reliable codebase and promote effective collaboration among\ndevelopers.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nvoid doSomething() {\n  // TODO\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "COMPLETE",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S1258",
            "repo": "java",
            "name": "Classes and enums with private members should have a constructor",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1258"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Non-abstract classes and enums with non-<code>static</code>, <code>private</code> members should explicitly initialize those members, either in a\nconstructor or with a default value.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nclass A { // Noncompliant\n  private int field;\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nclass A {\n  private int field;\n\n  A(int field) {\n    this.field = field;\n  }\n}\n</pre>\n<h3>Exceptions</h3>\n<ul>\n  <li> Class implementing a Builder Pattern (name ending with \"Builder\"). </li>\n  <li> <a href=\"https://docs.oracle.com/javaee/7/tutorial/index.html\">Java EE</a> class annotated with:\n    <ul>\n      <li> <a href=\"https://docs.oracle.com/javaee/7/api/javax/annotation/ManagedBean.html\">ManagedBean</a> </li>\n      <li> <a href=\"https://docs.oracle.com/javaee/7/api/javax/ejb/MessageDriven.html\">MessageDriven</a> </li>\n      <li> <a href=\"https://docs.oracle.com/javaee/7/api/javax/ejb/Singleton.html\">Singleton</a> </li>\n      <li> <a href=\"https://docs.oracle.com/javaee/7/api/javax/ejb/Stateful.html\">Stateful</a> </li>\n      <li> <a href=\"https://docs.oracle.com/javaee/7/api/javax/ejb/Stateless.html\">Stateless</a> </li>\n      <li> <a href=\"https://docs.oracle.com/javaee/7/api/javax/jws/WebService.html\">WebService</a> </li>\n      <li> <a href=\"https://docs.oracle.com/javaee/7/api/javax/servlet/annotation/WebFilter.html\">WebFilter</a> </li>\n      <li> <a href=\"https://docs.oracle.com/javaee/7/api/javax/servlet/annotation/WebServlet.html\">WebServlet</a> </li>\n    </ul>  </li>\n  <li> Class and field annotated with:\n    <ul>\n      <li> <a href=\"https://codehaus-plexus.github.io/plexus-containers/plexus-component-annotations/index.html\">Plexus Component Annotations</a>\n      </li>\n      <li> <a href=\"https://maven.apache.org/developers/mojo-api-specification.html\">Maven Mojo</a> </li>\n    </ul>  </li>\n  <li> Field annotated with:\n    <ul>\n      <li> <a href=\"https://docs.oracle.com/javaee/7/api/javax/annotation/Resource.html\">Resource</a> </li>\n      <li> <a href=\"https://docs.oracle.com/javaee/7/api/javax/ejb/EJB.html\">EJB</a> </li>\n      <li> <a href=\"https://docs.oracle.com/javaee/7/api/javax/inject/Inject.html\">Inject</a> </li>\n      <li> <a\n      href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/annotation/Autowired.html\">Autowired</a> </li>\n    </ul>  </li>\n  <li> Class annotated with:\n    <ul>\n      <li> <a href=\"https://www.javadoc.io/doc/org.projectlombok/lombok/latest/lombok/Builder.html\">Lombok Builder</a> </li>\n    </ul>  </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S2225",
            "repo": "java",
            "name": "\"toString()\" and \"clone()\" methods should not return null",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2225"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Calling <code>toString()</code> or <code>clone()</code> on an object should always return a string or an object. Returning <code>null</code>\ninstead contravenes the method’s implicit contract.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic String toString () {\n  if (this.collection.isEmpty()) {\n    return null; // Noncompliant\n  } else {\n    // ...\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic String toString () {\n  if (this.collection.isEmpty()) {\n    return \"\";\n  } else {\n    // ...\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/476\">CWE-476 - NULL Pointer Dereference</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/aDdGBQ\">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S2226",
            "repo": "java",
            "name": "Servlets should not have mutable instance fields",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "multi-threading",
                "struts",
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "30min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "30min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2226"
                ]
            },
            "descriptionSections": [
                {
                    "key": "how_to_fix",
                    "content": "<h4>Noncompliant code example</h4>\n<p>If the field is never modified, declare it <code>final</code>.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class MyServlet extends HttpServlet {\n  String apiVersion = \"0.9.1\"; // Noncompliant, field changes are not thread-safe\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class MyServlet extends HttpServlet {\n  final String apiVersion = \"0.9.1\"; // Compliant, field cannot be changed\n}\n</pre>\n<h4>Noncompliant code example</h4>\n<p>If a field is modified within instance methods, refactor it into a local variable. That variable can be passed as an argument to other functions if\nneeded.</p>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\npublic class MyServlet extends HttpServlet {\n\n  String userName; // Noncompliant, field changes are not thread-safe\n\n  @Override\n  public void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n    userName = req.getParameter(\"userName\"); // Different threads may write concurrently to userName\n    resp.getOutputStream().print(getGreeting());\n  }\n\n  public String getGreeting() { // Unpredictable value in field userName\n    return \"Hello \"+userName+\"!\";\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\npublic class MyServlet extends HttpServlet {\n\n  @Override\n  public void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n    String userName = req.getParameter(\"userName\"); // Compliant, local variable instead instance field\n    resp.getOutputStream().print(getGreeting(userName));\n  }\n\n  public String getGreeting(String userName) { // Compliant, method argument instead instance field\n    return \"Hello \"+userName+\"!\";\n  }\n}\n</pre>\n<h4>Noncompliant code example</h4>\n<p>If you still prefer instance state over local variables, consider using <code>ThreadLocal</code> fields. These fields provide a separate instance\nof their value for each thread.</p>\n<pre data-diff-id=\"3\" data-diff-type=\"noncompliant\">\npublic class MyServlet extends HttpServlet {\n\n  String userName; // Noncompliant, field changes are not thread-safe\n\n  @Override\n  public void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n    userName = req.getParameter(\"userName\"); // Different threads may write concurrently to userName\n    resp.getOutputStream().print(getGreeting());\n  }\n\n  public String getGreeting() { // Unpredictable value in field userName\n    return \"Hello \"+userName+\"!\";\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"3\" data-diff-type=\"compliant\">\npublic class MyServlet extends HttpServlet {\n\n  final ThreadLocal&lt;String&gt; userName = new ThreadLocal&lt;&gt;(); // Compliant, field itself does not change\n\n  @Override\n  public void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n    userName.set(req.getParameter(\"userName\")); // Compliant, own value provided for every thread\n    resp.getOutputStream().print(getGreeting());\n  }\n\n  public String getGreeting() {\n    return \"Hello \"+userName.get()+\"!\"; // Compliant, own value provided for every thread\n  }\n}\n</pre>\n<h4>Noncompliant code example</h4>\n<p>If you have a use case that requires a shared instance state between threads, declare the corresponding fields as <code>static</code> to indicate\nyour intention and awareness that there is only one instance of the servlet. However, the <code>static</code> modifier alone does not ensure thread\nsafety. Make sure also to take countermeasures against possible race conditions.</p>\n<pre data-diff-id=\"4\" data-diff-type=\"noncompliant\">\npublic class MyServlet extends HttpServlet {\n\n  public long timestampLastRequest; // Noncompliant, field changes are not thread-safe\n\n  @Override\n  public void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n    timestampLastRequest = System.currentTimeMillis();\n    resp.getOutputStream().print(timestampLastRequest); // Race condition\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"4\" data-diff-type=\"compliant\">\npublic class MyServlet extends HttpServlet {\n\n  public static long timestampLastRequest; // Compliant, sharing state is our intention\n\n  @Override\n  public void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n    long timestamp;\n    synchronized (this) {\n      timestamp = timestampLastRequest; // No race condition, synchronized get &amp; set\n      timestampLastRequest = System.currentTimeMillis();\n    }\n    resp.getOutputStream().print(timestamp);\n  }\n}\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://www.devinline.com/2013/08/how-to-make-thread-safe-servlet.html\">Nikhil Ranjan: How to make thread safe servlet ?</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222567\">Application Security and\n  Development: V-222567</a> - The application must not be vulnerable to race conditions. </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>The <code>processHttpRequest</code> method and methods called from it can be executed by multiple threads within the same servlet instance, and\nstate changes to the instance caused by these methods are, therefore, not threadsafe.</p>\n<p>This is due to the servlet container creating only one instance of each servlet (<code>javax.servlet.http.HttpServlet</code>) and attaching a\ndedicated thread to each incoming HTTP request. The same problem exists for <code>org.apache.struts.action.Action</code> but with different\nmethods.</p>\n<p>To prevent unexpected behavior, avoiding mutable states in servlets is recommended. Mutable instance fields should either be refactored into local\nvariables or made immutable by declaring them <code>final</code>.</p>\n<h3>Exceptions</h3>\n<ul>\n  <li> Fields annotated with <code>@javax.inject.Inject</code>, <code>@javax.ejb.EJB</code>,\n  <code>@org.springframework.beans.factory.annotation.Autowired</code>, <code>@javax.annotation.Resource</code> </li>\n  <li> Fields initialized in <code>init()</code> or <code>init(ServletConfig config)</code> methods </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S2589",
            "repo": "java",
            "name": "Boolean expressions should not be gratuitous",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "symbolic-execution",
                "suspicious",
                "redundant"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "introduction",
                    "content": "<p>Gratuitous boolean expressions are conditions that do not change the evaluation of a program. This issue can indicate logical errors and affect the\ncorrectness of an application, as well as its maintainability.</p>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>Gratuitous boolean expressions are suspicious and should be carefully removed from the code.</p>\n<p>First, the boolean expression in question should be closely inspected for logical errors. If a mistake was made, it can be corrected so the\ncondition is no longer gratuitous.</p>\n<p>If it becomes apparent that the condition is actually unnecessary, it can be removed. The associated control flow construct (e.g., the\n<code>if</code>-statement containing the condition) will be adapted or even removed, leaving only the necessary branches.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class MyClass {\n    public void doThings(boolean b, boolean c) {\n        a = true;\n        if (a) {                // Noncompliant\n          doSomething();\n        }\n\n        if (b &amp;&amp; a) {           // Noncompliant; \"a\" is always \"true\"\n          doSomething();\n        }\n\n        if (c || !a) {          // Noncompliant; \"!a\" is always \"false\"\n          doSomething();\n        }\n\n        if (c || (!c &amp;&amp; b)) {   // Noncompliant; c || (!c &amp;&amp; b) is equal to c || b\n          doSomething();\n        }\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class MyClass {\n    public void doThings(boolean b, boolean c) {\n        a = true;\n        if (foo(a)) {\n          doSomething();\n        }\n\n        if (b) {\n          doSomething();\n        }\n\n        if (c) {\n          doSomething();\n        }\n\n        if (c || b) {\n          doSomething();\n        }\n    }\n}\n</pre>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Control flow constructs like <code>if</code>-statements allow the programmer to direct the flow of a program depending on a boolean expression.\nHowever, if the condition is always true or always false, only one of the branches will ever be executed. In that case, the control flow construct and\nthe condition no longer serve a purpose; they become <em>gratuitous</em>.</p>\n<h3>What is the potential impact?</h3>\n<p>The presence of gratuitous conditions can indicate a logical error. For example, the programmer <em>intended</em> to have the program branch into\ndifferent paths but made a mistake when formulating the branching condition. In this case, this issue might result in a bug and thus affect the\nreliability of the application. For instance, it might lead to the computation of incorrect results.</p>\n<p>Additionally, gratuitous conditions and control flow constructs introduce unnecessary complexity. The source code becomes harder to understand, and\nthus, the application becomes more difficult to maintain.</p>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/571\">CWE-571 - Expression is Always True</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/570\">CWE-570 - Expression is Always False</a> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S3436",
            "repo": "java",
            "name": "Value-based classes should not be used for locking",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "multi-threading",
                "java8",
                "lock-in"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S3436"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>According to the documentation,</p>\n<blockquote>\n  <p>A program may produce unpredictable results if it attempts to distinguish two references to equal values of a value-based class, whether directly\n  via reference equality or indirectly via an appeal to synchronization…​</p>\n</blockquote>\n<p>This is because value-based classes are intended to be wrappers for value types, which will be primitive-like collections of data (similar to\n<code>struct</code>s in other languages) that will come in future versions of Java.</p>\n<blockquote>\n  <p>Instances of a value-based class …​</p>\n  <ul>\n    <li> do not have accessible constructors, but are instead instantiated through factory methods which make no commitment as to the identity of\n    returned instances; </li>\n  </ul>\n</blockquote>\n<p>This means that you can’t be sure you’re the only one trying to lock on any given instance of a value-based class, opening your code up to\ncontention and deadlock issues.</p>\n<p>Under Java 8 breaking this rule may not actually break your code, but there are no guarantees of the behavior beyond that.</p>\n<p>This rule raises an issue when a known value-based class is used for synchronization. That includes all the classes in the <code>java.time</code>\npackage except <code>Clock</code>; the date classes for alternate calendars, <code>HijrahDate</code>, <code>JapaneseDate</code>,\n<code>MinguoDate</code>, <code>ThaiBuddhistDate</code>; and the optional classes: <code>Optional</code>, <code>OptionalDouble</code>,\n<code>OptionalLong</code>, <code>OptionalInt</code>.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project’s <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nOptional&lt;Foo&gt; fOpt = doSomething();\nsynchronized (fOpt) {  // Noncompliant\n  // ...\n}\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/doc-files/ValueBased.html\">Value-based classes</a> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S4524",
            "repo": "java",
            "name": "\"default\" clauses should be last",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S4524"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p><code>switch</code> can contain a <code>default</code> clause for various reasons: to handle unexpected values, to show that all the cases were\nproperly considered, etc.</p>\n<p>For readability purposes, to help a developer quickly spot the default behavior of a <code>switch</code> statement, it is recommended to put the\n<code>default</code> clause at the end of the <code>switch</code> statement.</p>\n<p>This rule raises an issue if the <code>default</code> clause is not the last one of the <code>switch</code>'s cases.</p>\n<pre>\nswitch (param) {\n  case 0:\n    doSomething();\n    break;\n  default: // Noncompliant: default clause should be the last one\n    error();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "FORMATTED",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S5612",
            "repo": "java",
            "name": "Lambdas should not have too many lines",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "Max",
                    "htmlDesc": "Maximum allowed lines in a lambda",
                    "defaultValue": "10",
                    "type": "INTEGER"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5612"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Lambdas (introduced with Java 8) are a very convenient and compact way to inject a behavior without having to create a dedicated class or method.\nBut those lambdas should be used only if the behavior to be injected can be defined in a few lines of code, otherwise the source code can quickly\nbecome unreadable.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "FOCUSED",
            "cleanCodeAttributeCategory": "ADAPTABLE",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S5853",
            "repo": "java",
            "name": "Consecutive AssertJ \"assertThat\" statements should be chained",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "tests",
                "assertj"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "TEST",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5853"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>AssertJ assertions methods targeting the same object can be chained instead of using multiple <code>assertThat</code>. It avoids duplication and\nincreases the clarity of the code.</p>\n<p>This rule raises an issue when multiples <code>assertThat</code> target the same tested value.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nassertThat(someList).hasSize(3);\nassertThat(someList).contains(\"something\");\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nassertThat(someList)\n  .hasSize(3)\n  .contains(\"something\");\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S5854",
            "repo": "java",
            "name": "Regexes containing characters subject to normalization should use the CANON_EQ flag",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "regex"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "3min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "3min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5854"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content":"<p>Characters like <code>'é'</code> can be expressed either as a single code point or as a cluster of the letter <code>'e'</code> and a combining\naccent mark. Without the <code>CANON_EQ</code> flag, a regex will only match a string in which the characters are expressed in the same way.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nString s = \"e\";\nPattern p = Pattern.compile(\"é|ë|è\"); // Noncompliant\nSystem.out.println(p.matcher(s).replaceAll(\"e\")); // print 'è'\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nString s = \"e\";\nPattern p = Pattern.compile(\"é|ë|è\", Pattern.CANON_EQ);\nSystem.out.println(p.matcher(s).replaceAll(\"e\")); // print 'e'\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "COMPLETE",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S5855",
            "repo": "java",
            "name": "Regex alternatives should not be redundant",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "regex"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5855"
                ]
            },
            "descriptionSections": [
                {
                    "key": "introduction",
                    "content": "<p>This rule raises an issue when multiple branches of a regex alternative match the same input.</p>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>If an alternative in a regular expression only matches things that are already matched by another alternative, that alternative is redundant and\nserves no purpose.</p>\n<p>In the best case this means that the offending subpattern is merely redundant and should be removed. In the worst case it’s a sign that this regex\ndoes not match what it was intended to match and should be reworked.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n\"[ab]|a\"   // Noncompliant: the \"|a\" is redundant because \"[ab]\" already matches \"a\"\n\".*|a\"     // Noncompliant: .* matches everything, so any other alternative is redundant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n\"[ab]\"\n\".*\"\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S5856",
            "repo": "java",
            "name": "Regular expressions should be syntactically valid",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "regex"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5856"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Regular expressions have their own syntax that is understood by regular expression engines. Those engines will throw an exception at runtime if\nthey are given a regular expression that does not conform to that syntax.</p>\n<p>To avoid syntax errors, special characters should be escaped with backslashes when they are intended to be matched literally and references to\ncapturing groups should use the correctly spelled name or number of the group.</p>\n<p>To match a literal string instead of a regular expression, either all special characters should be escaped, the <code>Pattern.LITERAL</code> flag\nor methods that don’t use regular expressions should be used.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nPattern.compile(\"([\");\nstr.matches(\"([\");\nstr.replaceAll(\"([\", \"{\");\nstr.matches(\"(\\\\w+-(\\\\d+)\");\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nPattern.compile(\"\\\\(\\\\[\");\nPattern.compile(\"([\", Pattern.LITERAL);\nstr.equals(\"([\");\nstr.replace(\"([\", \"{\");\nstr.matches(\"(\\\\w+)-(\\\\d+)\");\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S5976",
            "repo": "java",
            "name": "Similar tests should be grouped in a single Parameterized test",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "tests",
                "bad-practice",
                "clumsy"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "TEST",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5976"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>When multiple tests differ only by a few hardcoded values they should be refactored as a single \"parameterized\" test. This reduces the chances of\nadding a bug and makes them more readable. Parameterized tests exist in most test frameworks (JUnit, TestNG, etc…​).</p>\n<p>The right balance needs of course to be found. There is no point in factorizing test methods when the parameterized version is a lot more complex\nthan initial tests.</p>\n<p>This rule raises an issue when at least 3 tests could be refactored as one parameterized test with less than 4 parameters. Only test methods which\nhave at least one duplicated statement are considered.</p>\n<h3>Noncompliant code example</h3>\n<p>with JUnit 5</p>\n<pre>\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport org.junit.jupiter.api.Test;\n\npublic class AppTest\n{\n    @Test\n    void test_not_null1() {  // Noncompliant. The 3 following tests differ only by one hardcoded number.\n      setupTax();\n      assertNotNull(getTax(1));\n    }\n\n    @Test\n    void test_not_null2() {\n      setupTax();\n      assertNotNull(getTax(2));\n    }\n\n    @Test\n    void test_not_nul3l() {\n      setupTax();\n      assertNotNull(getTax(3));\n    }\n\n    @Test\n    void testLevel1() {  // Noncompliant. The 3 following tests differ only by a few hardcoded numbers.\n        setLevel(1);\n        runGame();\n        assertEquals(playerHealth(), 100);\n    }\n\n    @Test\n    void testLevel2() {  // Similar test\n        setLevel(2);\n        runGame();\n        assertEquals(playerHealth(), 200);\n    }\n\n    @Test\n    void testLevel3() {  // Similar test\n        setLevel(3);\n        runGame();\n        assertEquals(playerHealth(), 300);\n    }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.CsvSource;\n\npublic class AppTest\n{\n\n   @ParameterizedTest\n   @ValueSource(ints = {1, 2, 3})\n   void test_not_null(int arg) {\n     setupTax();\n     assertNotNull(getTax(arg));\n   }\n\n    @ParameterizedTest\n    @CsvSource({\n        \"1, 100\",\n        \"2, 200\",\n        \"3, 300\",\n    })\n    void testLevels(int level, int health) {\n        setLevel(level);\n        runGame();\n        assertEquals(playerHealth(), health);\n    }\n}\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://phauer.com/2019/modern-best-practices-testing-java/#use-parameterized-tests\">Modern Best Practices for Testing in Java -\n  Philipp Hauer</a> </li>\n  <li> <a href=\"https://junit.org/junit5/docs/current/user-guide/#writing-tests-parameterized-tests\">JUnit 5 documentation - Parameterized tests</a>\n  </li>\n  <li> <a href=\"https://www.testwithspring.com/lesson/writing-parameterized-tests-with-junit-4/\">Writing Parameterized Tests With JUnit 4</a> </li>\n  <li> <a href=\"https://testng.org/#_parameters\">TestNG documentation - Parameters</a> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S5977",
            "repo": "java",
            "name": "Tests should use fixed data instead of randomized data",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "tests",
                "design",
                "confusing"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "TEST",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5977"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://phauer.com/2019/modern-best-practices-testing-java/#use-fixed-data-instead-of-randomized-data\">Modern Best Practices for\n  Testing in Java - Philipp Hauer</a> </li>\n  <li> <a href=\"https://jqwik.net/\">Jqwik test engine</a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Tests should always:</p>\n<ul>\n  <li> Make sure that production code behaves as expected, including edge cases. </li>\n  <li> Be easy to debug, i.e. understandable and reproducible. </li>\n</ul>\n<p>Using random values in tests will not necessarily check edge cases, and it will make test logs a lot harder to read. It is better to use easily\nreadable hardcoded values. If this makes your code bigger you can use helper functions.</p>\n<p>There is one valid use case for random data in tests: when testing every value would make tests impractically slow. In this case the best you can\ndo is use random to test every value on the long run. You should however make sure that random values are logged so that you can reproduce failures.\nSome libraries exist to make all this easier. You can for example use property-based testing libraries such as <a\nhref=\"https://github.com/jlink/jqwik\">jqwik</a>.</p>\n<p>This rule raises an issue when <code>new Random()</code> or <code>UUID.randomUUID()</code> are called in test code.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nint userAge = new Random().nextInt(42);  // Noncompliant\nUUID userID = UUID.randomUUID(); // Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nint userAge = 31;\nUUID userID = UUID.fromString(\"00000000-000-0000-0000-000000000001\");\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "COMPLETE",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S1130",
            "repo": "java",
            "name": "Exceptions in \"throws\" clauses should not be superfluous",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "error-handling",
                "unused",
                "redundant",
                "clumsy"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:RedundantThrowsDeclarationCheck"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Superfluous exceptions within <code>throws</code> clauses have negative effects on the readability and maintainability of the code. An exception in\na <code>throws</code> clause is superfluous if it is:</p>\n<ul>\n  <li> listed multiple times </li>\n  <li> a subclass of another listed exception </li>\n  <li> not actually thrown by any execution path of the method </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nvoid foo() throws MyException, MyException {}  // Noncompliant; should be listed once\nvoid bar() throws Throwable, Exception {}  // Noncompliant; Exception is a subclass of Throwable\nvoid boo() throws IOException { // Noncompliant; IOException cannot be thrown\n  System.out.println(\"Hi!\");\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nvoid foo() throws MyException {}\nvoid bar() throws Throwable {}\nvoid boo() {\n  System.out.println(\"Hi!\");\n}\n</pre>\n<h3>Exceptions</h3>\n<p>The rule will not raise any issue for exceptions that cannot be thrown from the method body:</p>\n<ul>\n  <li> in interface <code>default</code> methods </li>\n  <li> in overriding and implementating methods </li>\n  <li> in non-private methods that only <code>throw</code>, have empty bodies, or a single return statement. </li>\n  <li> in overridable methods (non-final, or not member of a final class, non-static, non-private), if the exception is documented with a proper\n  JavaDoc </li>\n</ul>\n<pre>\ninterface MyInterface {\n  default void defaultMethod() throws IOException {\n    System.out.println(\"Hi!\");\n  }\n  void doSomething() throws IOException;\n}\n\nclass A implements MyInterface {\n  @Override\n  void doSomething() throws IOException {\n    System.out.println(\"Hi!\");\n  }\n\n  public void emptyBody() throws IOException {}\n\n  protected void singleThrowStatement() throws IOException {\n    throw new UnsupportedOperationException(\"This method should be implemented in subclasses\");\n  }\n\n  Object singleReturnStatement() throws IOException {\n    return null;\n  }\n\n  /**\n   * @throws IOException Overriding classes may throw this exception if they print values into a file\n   */\n  protected void overridable() throws IOException { // no issue, method is overridable and the exception has proper javadoc\n    System.out.println(\"foo\");\n  }\n}\n</pre>\n<p>Also, the rule will not raise issues on <code>RuntimeException</code>, or one of its sub-classes, because documenting runtime exceptions which\ncould be thrown can ultimately help users of the method understand its behavior.</p>\n<pre>\nclass B {\n  int possibleDivisionByZero(int a, int b) throws ArithmeticException {\n      return a / b;\n  }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S1132",
            "repo": "java",
            "name": "Strings literals should be placed on the left side when checking for equality",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "bad-practice"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1132"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>It is preferable to place string literals on the left-hand side of an <code>equals()</code> or <code>equalsIgnoreCase()</code> method call.</p>\n<p>This prevents null pointer exceptions from being raised, as a string literal can never be null by definition.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nString myString = null;\n\nSystem.out.println(\"Equal? \" + myString.equals(\"foo\"));                        // Noncompliant; will raise a NPE\nSystem.out.println(\"Equal? \" + (myString != null &amp;&amp; myString.equals(\"foo\")));  // Noncompliant; null check could be removed\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nSystem.out.println(\"Equal?\" + \"foo\".equals(myString));                         // properly deals with the null case\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S1133",
            "repo": "java",
            "name": "Deprecated code should be removed",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "INFO",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "obsolete"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1133"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>This rule is meant to be used as a way to track code which is marked as being deprecated. Deprecated code should eventually be removed.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nclass Foo {\n  /**\n   * @deprecated\n   */\n  public void foo() {    // Noncompliant\n  }\n\n  @Deprecated            // Noncompliant\n  public void bar() {\n  }\n\n  public void baz() {    // Compliant\n  }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S2221",
            "repo": "java",
            "name": "\"Exception\" should not be caught when not required by called methods",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "error-handling"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2221"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/396\">CWE-396 - Declaration of Catch for Generic Exception</a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Catching <code>Exception</code> seems like an efficient way to handle multiple possible exceptions. Unfortunately, it traps all exception types,\nboth checked and runtime exceptions, thereby casting too broad a net. Indeed, was it really the intention of developers to also catch runtime\nexceptions? To prevent any misunderstanding, if both checked and runtime exceptions are really expected to be caught, they should be explicitly listed\nin the <code>catch</code> clause.</p>\n<p>This rule raises an issue if <code>Exception</code> is caught when it is not explicitly thrown by a method in the <code>try</code> block.</p>\n<h3>Noncompliant code example</h3>\n<pre>\ntry {\n  // do something that might throw an UnsupportedDataTypeException or UnsupportedEncodingException\n} catch (Exception e) { // Noncompliant\n  // log exception ...\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\ntry {\n  // do something\n} catch (UnsupportedEncodingException|UnsupportedDataTypeException|RuntimeException e) {\n  // log exception ...\n}\n</pre>\n<p>or if runtime exceptions should not be caught:</p>\n<pre>\ntry {\n  // do something\n} catch (UnsupportedEncodingException|UnsupportedDataTypeException e) {\n  // log exception ...\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "COMPLETE",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S2222",
            "repo": "java",
            "name": "Locks should be released on all paths",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "symbolic-execution",
                "multi-threading"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>If a lock is acquired and released within a method, then it must be released along all execution paths of that method.</p>\n<p>Failing to do so will expose the conditional locking logic to the method’s callers and hence be deadlock-prone.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class MyClass {\n  public void doSomething() {\n    Lock lock = new Lock();\n    lock.lock(); // Noncompliant\n    if (isInitialized()) {\n      // ...\n      lock.unlock();\n    }\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic class MyClass {\n  public void doSomething() {\n    Lock lock = new Lock();\n    if (isInitialized()) {\n      lock.lock();\n      // ...\n      lock.unlock();\n    }\n  }\n}\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/459\">CWE-459 - Incomplete Cleanup</a> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "COMPLETE",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S2229",
            "repo": "java",
            "name": "Methods should not call same-class methods with incompatible \"@Transactional\" values",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "spring"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2229"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/transaction/annotation/Propagation.html\">Spring\n  Framework 6 API: Enum Class propagation</a> </li>\n  <li> <a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/transaction/annotation/Transactional.html\">Spring\n  Framework 6 API: Annotation Interface Transactional</a> </li>\n  <li> <a href=\"https://docs.spring.io/spring-framework/reference/data-access/transaction/declarative/tx-propagation.html\">Spring 6 Documentation:\n  Transaction Propagation</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://www.baeldung.com/spring-transactional-propagation-isolation\">Baeldung: Transaction Propagation and Isolation in Spring\n  @Transactional</a> </li>\n  <li> <a href=\"https://dzone.com/articles/spring-transaction-propagation\">DZone: Spring Transaction Propagation in a Nutshell</a> </li>\n</ul>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>Change the corresponding functions into a compatible propagation type.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic void doTheThing() {\n  // ...\n  actuallyDoTheThing(); // Noncompliant, call from non-transactional to transactional\n}\n\n@Transactional\npublic void actuallyDoTheThing() {\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@Transactional\npublic void doTheThing() {\n  // ...\n  actuallyDoTheThing(); // Compliant\n}\n\n@Transactional\npublic void actuallyDoTheThing() {\n  // ...\n}\n</pre>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\n@Transactional\npublic void doTheThing() {\n  // ...\n  actuallyDoTheThing(); // Noncompliant, call from REQUIRED to REQUIRES_NEW\n}\n\n@Transactional(propagation = Propagation.REQUIRES_NEW)\npublic void actuallyDoTheThing() {\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\n@Transactional\npublic void doTheThing() {\n  // ...\n  actuallyDoTheThing(); // Compliant, call from REQUIRED to MANDATORY\n}\n\n@Transactional(propagation = Propagation.MANDATORY)\npublic void actuallyDoTheThing() {\n  // ...\n}\n</pre>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Transactional methods have a propagation type parameter in the @Transaction annotation that specifies the requirements about the transactional\ncontext in which the method can be called and how it creates, appends, or suspends an ongoing transaction.</p>\n<p>When an instance that contains transactional methods is injected, Spring uses proxy objects to wrap these methods with the actual transaction\ncode.</p>\n<p>However, if a transactional method is called from another method in the same class, the <code>this</code> argument is used as the receiver instance\ninstead of the injected proxy object, which bypasses the wrapper code. This results in specific transitions from one transactional method to another,\nwhich are not allowed:</p>\n<table>\n  <colgroup>\n    <col style=\"width: 50%;\">\n    <col style=\"width: 50%;\">\n  </colgroup>\n  <thead>\n    <tr>\n      <th>From</th>\n      <th>To</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><p>non-<code>@Transactional</code></p></td>\n      <td><p>MANDATORY, NESTED, REQUIRED, REQUIRES_NEW</p></td>\n    </tr>\n    <tr>\n      <td><p>MANDATORY</p></td>\n      <td><p>NESTED, NEVER, NOT_SUPPORTED, REQUIRES_NEW</p></td>\n    </tr>\n    <tr>\n      <td><p>NESTED</p></td>\n      <td><p>NESTED, NEVER, NOT_SUPPORTED, REQUIRES_NEW</p></td>\n    </tr>\n    <tr>\n      <td><p>NEVER</p></td>\n      <td><p>MANDATORY, NESTED, REQUIRED, REQUIRES_NEW</p></td>\n    </tr>\n    <tr>\n      <td><p>NOT_SUPPORTED</p></td>\n      <td><p>MANDATORY, NESTED, REQUIRED, REQUIRES_NEW</p></td>\n    </tr>\n    <tr>\n      <td><p>REQUIRED or <code>@Transactional</code></p></td>\n      <td><p>NESTED, NEVER, NOT_SUPPORTED, REQUIRES_NEW</p></td>\n    </tr>\n    <tr>\n      <td><p>REQUIRES_NEW</p></td>\n      <td><p>NESTED, NEVER, NOT_SUPPORTED, REQUIRES_NEW</p></td>\n    </tr>\n    <tr>\n      <td><p>SUPPORTS</p></td>\n      <td><p>MANDATORY, NESTED, NEVER, NOT_SUPPORTED, REQUIRED, REQUIRES_NEW</p></td>\n    </tr>\n  </tbody>\n</table>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "BLOCKER"
                }
            ]
        },
        {
            "key": "java:S2583",
            "repo": "java",
            "name": "Conditionally executed code should be reachable",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "symbolic-execution",
                "cert",
                "unused",
                "suspicious",
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Conditional expressions which are always <code>true</code> or <code>false</code> can lead to <a\nhref=\"https://en.wikipedia.org/wiki/Unreachable_code\">unreachable code</a>.</p>\n<h3>Noncompliant code example</h3>\n<pre>\na = false;\nif (a) { // Noncompliant\n  doSomething(); // never executed\n}\n\nif (!a || b) { // Noncompliant; \"!a\" is always \"true\", \"b\" is never evaluated\n  doSomething();\n} else {\n  doSomethingElse(); // never executed\n}\n</pre>\n<h3>Exceptions</h3>\n<p>This rule will not raise an issue in either of these cases:</p>\n<ul>\n  <li> When the condition is a single <code>final boolean</code> </li>\n</ul>\n<pre>\nfinal boolean debug = false;\n//...\nif (debug) {\n  // Print something\n}\n</pre>\n<ul>\n  <li> When the condition is literally <code>true</code> or <code>false</code>. </li>\n</ul>\n<pre>\nif (true) {\n  // do something\n}\n</pre>\n<p>In these cases it is obvious the code is as intended.</p>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/570\">CWE-570 - Expression is Always False</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/571\">CWE-571 - Expression is Always True</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/5dUxBQ\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed\n  </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S3551",
            "repo": "java",
            "name": "Overrides should match their parent class methods in synchronization",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "multi-threading",
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S3551"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/gzdGBQ\">CERT, TSM00-J</a> - Do not override thread-safe methods with methods that are not\n  thread-safe </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>When <code>@Overrides</code> of <code>synchronized</code> methods are not themselves <code>synchronized</code>, the result can be improper\nsynchronization as callers rely on the thread-safety promised by the parent class.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class Parent {\n\n  synchronized void foo() {\n    //...\n  }\n}\n\npublic class Child extends Parent {\n\n @Override\n  public void foo () {  // Noncompliant\n    // ...\n    super.foo();\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic class Parent {\n\n  synchronized void foo() {\n    //...\n  }\n}\n\npublic class Child extends Parent {\n\n  @Override\n  synchronized void foo () {\n    // ...\n    super.foo();\n  }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "MODULAR",
            "cleanCodeAttributeCategory": "ADAPTABLE",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S3553",
            "repo": "java",
            "name": "\"Optional\" should not be used for parameters",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "clumsy"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S3553"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>The Java language authors have been quite frank that <code>Optional</code> was intended for use only as a return type, as a way to convey that a\nmethod may or may not return a value.</p>\n<p>And for that, it’s valuable but using <code>Optional</code> on the input side increases the work you have to do in the method without really\nincreasing the value. With an <code>Optional</code> parameter, you go from having 2 possible inputs: null and not-null, to three: null,\nnon-null-without-value, and non-null-with-value. Add to that the fact that overloading has long been available to convey that some parameters are\noptional, and there’s really no reason to have <code>Optional</code> parameters.</p>\n<p>The rule also checks for Guava’s <code>Optional</code>, as it was the inspiration for the JDK <code>Optional</code>. Although it is different in\nsome aspects (serialization, being recommended for use as collection elements), using it as a parameter type causes exactly the same problems as for\nJDK <code>Optional</code>.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic String sayHello(Optional&lt;String&gt; name) {  // Noncompliant\n  if (name == null || !name.isPresent()) {\n    return \"Hello World\";\n  } else {\n    return \"Hello \" + name;\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic String sayHello(String name) {\n  if (name == null) {\n    return \"Hello World\";\n  } else {\n    return \"Hello \" + name;\n  }\n}\n</pre>\n<h3>Exceptions</h3>\n<p>No issues will be raised if a method is overriding, as the developer has no control over the signature at this point.</p>\n<pre>\n@Override\npublic String sayHello(Optional&lt;String&gt; name) {\n  if (name == null || !name.isPresent()) {\n    return \"Hello World\";\n  } else {\n    return \"Hello \" + name;\n  }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S5850",
            "repo": "java",
            "name": "Alternatives in regular expressions should be grouped when used with anchors",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "regex"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5850"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>In regular expressions, anchors (<code>^</code>, <code>$</code>, <code>\\A</code>, <code>\\Z</code> and <code>\\z</code>) have higher precedence than\nthe <code>|</code> operator. So in a regular expression like <code>^alt1|alt2|alt3$</code>, <code>alt1</code> would be anchored to the beginning,\n<code>alt3</code> to the end and <code>alt2</code> wouldn’t be anchored at all. Usually the intended behavior is that all alternatives are anchored at\nboth ends. To achieve this, a non-capturing group should be used around the alternatives.</p>\n<p>In cases where it is intended that the anchors only apply to one alternative each, adding (non-capturing) groups around the anchors and the parts\nthat they apply to will make it explicit which parts are anchored and avoid readers misunderstanding the precedence or changing it because they\nmistakenly assume the precedence was not intended.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n^a|b|c$\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n^(?:a|b|c)$\n</pre>\n<p>or</p>\n<pre>\n^a$|^b$|^c$\n</pre>\n<p>or, if you do want the anchors to only apply to <code>a</code> and <code>c</code> respectively:</p>\n<pre>\n(?:^a)|b|(?:c$)\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S5852",
            "repo": "java",
            "name": "Using slow regular expressions is security-sensitive",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "regex"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "SECURITY_HOTSPOT",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "30min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "30min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5852"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Most of the regular expression engines use <code>backtracking</code> to try all possible execution paths of the regular expression when evaluating\nan input, in some cases it can cause performance issues, called <code>catastrophic backtracking</code> situations. In the worst case, the complexity\nof the regular expression is exponential in the size of the input, this means that a small carefully-crafted input (like 20 chars) can trigger\n<code>catastrophic backtracking</code> and cause a denial of service of the application. Super-linear regex complexity can lead to the same impact too\nwith, in this case, a large carefully-crafted input (thousands chars).</p>\n<p>This rule determines the runtime complexity of a regular expression and informs you of the complexity if it is not linear.</p>\n<p>Note that, due to improvements to the matching algorithm, some cases of exponential runtime complexity have become impossible when run using JDK 9\nor later. In such cases, an issue will only be reported if the project’s target Java version is 8 or earlier.</p>\n"
                },
                {
                    "key": "default",
                    "content": "<p>Most of the regular expression engines use <code>backtracking</code> to try all possible execution paths of the regular expression when evaluating\nan input, in some cases it can cause performance issues, called <code>catastrophic backtracking</code> situations. In the worst case, the complexity\nof the regular expression is exponential in the size of the input, this means that a small carefully-crafted input (like 20 chars) can trigger\n<code>catastrophic backtracking</code> and cause a denial of service of the application. Super-linear regex complexity can lead to the same impact too\nwith, in this case, a large carefully-crafted input (thousands chars).</p>\n<p>This rule determines the runtime complexity of a regular expression and informs you of the complexity if it is not linear.</p>\n<p>Note that, due to improvements to the matching algorithm, some cases of exponential runtime complexity have become impossible when run using JDK 9\nor later. In such cases, an issue will only be reported if the project’s target Java version is 8 or earlier.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The input is user-controlled. </li>\n  <li> The input size is not restricted to a small number of characters. </li>\n  <li> There is no timeout in place to limit the regex evaluation time. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>To avoid <code>catastrophic backtracking</code> situations, make sure that none of the following conditions apply to your regular expression.</p>\n<p>In all of the following cases, catastrophic backtracking can only happen if the problematic part of the regex is followed by a pattern that can\nfail, causing the backtracking to actually happen. Note that when performing a full match (e.g. using <code>String.matches</code>), the end of the\nregex counts as a pattern that can fail because it will only succeed when the end of the string is reached.</p>\n<ul>\n  <li> If you have a non-possessive repetition <code>r*</code> or <code>r*?</code>, such that the regex <code>r</code> could produce different\n  possible matches (of possibly different lengths) on the same input, the worst case matching time can be exponential. This can be the case if\n  <code>r</code> contains optional parts, alternations or additional repetitions (but not if the repetition is written in such a way that there’s only\n  one way to match it).\n    <ul>\n      <li> When using JDK 9 or later an optimization applies when the repetition is greedy and the entire regex does not contain any back references.\n      In that case the runtime will only be polynomial (in case of nested repetitions) or even linear (in case of alternations or optional parts).\n      </li>\n    </ul>  </li>\n  <li> If you have multiple non-possessive repetitions that can match the same contents and are consecutive or are only separated by an optional\n  separator or a separator that can be matched by both of the repetitions, the worst case matching time can be polynomial (O(n^c) where c is the\n  number of problematic repetitions). For example <code>a*b*</code> is not a problem because <code>a*</code> and <code>b*</code> match different\n  things and <code>a*_a*</code> is not a problem because the repetitions are separated by a <code>'_'</code> and can’t match that <code>'_'</code>.\n  However, <code>a*a*</code> and <code>.*_.*</code> have quadratic runtime. </li>\n  <li> If you’re performing a partial match (such as by using <code>Matcher.find</code>, <code>String.split</code>, <code>String.replaceAll</code>\n  etc.) and the regex is not anchored to the beginning of the string, quadratic runtime is especially hard to avoid because whenever a match fails,\n  the regex engine will try again starting at the next index. This means that any unbounded repetition (even a possessive one), if it’s followed by a\n  pattern that can fail, can cause quadratic runtime on some inputs. For example <code>str.split(\"\\\\s*,\")</code> will run in quadratic time on strings\n  that consist entirely of spaces (or at least contain large sequences of spaces, not followed by a comma). </li>\n</ul>\n<p>In order to rewrite your regular expression without these patterns, consider the following strategies:</p>\n<ul>\n  <li> If applicable, define a maximum number of expected repetitions using the bounded quantifiers, like <code>{1,5}</code> instead of <code>+</code>\n  for instance. </li>\n  <li> Refactor <code>nested quantifiers</code> to limit the number of way the inner group can be matched by the outer quantifier, for instance this\n  nested quantifier situation <code>(ba+)+</code> doesn’t cause performance issues, indeed, the inner group can be matched only if there exists\n  exactly one <code>b</code> char per repetition of the group. </li>\n  <li> Optimize regular expressions with <code>possessive quantifiers</code> and <code>atomic grouping</code>. </li>\n  <li> Use negated character classes instead of <code>.</code> to exclude separators where applicable. For example the quadratic regex\n  <code>.*_.*</code> can be made linear by changing it to <code>[^_]*_.*</code> </li>\n</ul>\n<p>Sometimes it’s not possible to rewrite the regex to be linear while still matching what you want it to match. Especially when using partial\nmatches, for which it is quite hard to avoid quadratic runtimes. In those cases consider the following approaches:</p>\n<ul>\n  <li> Solve the problem without regular expressions </li>\n  <li> Use an alternative non-backtracking regex implementations such as Google’s <a href=\"https://github.com/google/re2\">RE2</a> or <a\n  href=\"https://github.com/google/re2j\">RE2/J</a>. </li>\n  <li> Use multiple passes. This could mean pre- and/or post-processing the string manually before/after applying the regular expression to it or\n  using multiple regular expressions. One example of this would be to replace <code>str.split(\"\\\\s*,\\\\s*\")</code> with <code>str.split(\",\")</code> and\n  then trimming the spaces from the strings as a second step. </li>\n  <li> When using <code>Matcher.find()</code>, it is often possible to make the regex infallible by making all the parts that could fail optional,\n  which will prevent backtracking. Of course this means that you’ll accept more strings than intended, but this can be handled by using capturing\n  groups to check whether the optional parts were matched or not and then ignoring the match if they weren’t. For example the regex <code>x*y</code>\n  could be replaced with <code>x*(y)?</code> and then the call to <code>matcher.find()</code> could be replaced with <code>matcher.find() &amp;&amp;\n  matcher.group(1) != null</code>. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<p>The first regex evaluation will never end in <code>JDK</code> &lt;= 9 and the second regex evaluation will never end in any versions of the\n<code>JDK</code>:</p>\n<pre>\njava.util.regex.Pattern.compile(\"(a+)+\").matcher(\n\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"+\n\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"+\n\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"+\n\"aaaaaaaaaaaaaaa!\").matches(); // Sensitive\n\njava.util.regex.Pattern.compile(\"(h|h|ih(((i|a|c|c|a|i|i|j|b|a|i|b|a|a|j))+h)ahbfhba|c|i)*\").matcher(\n\"hchcchicihcchciiicichhcichcihcchiihichiciiiihhcchi\"+\n\"cchhcihchcihiihciichhccciccichcichiihcchcihhicchcciicchcccihiiihhihihihi\"+\n\"chicihhcciccchihhhcchichchciihiicihciihcccciciccicciiiiiiiiicihhhiiiihchccch\"+\n\"chhhhiiihchihcccchhhiiiiiiiicicichicihcciciihichhhhchihciiihhiccccccciciihh\"+\n\"ichiccchhicchicihihccichicciihcichccihhiciccccccccichhhhihihhcchchihih\"+\n\"iihhihihihicichihiiiihhhhihhhchhichiicihhiiiiihchccccchichci\").matches(); // Sensitive\n</pre>\n<h2>Compliant Solution</h2>\n<p>Possessive quantifiers do not keep backtracking positions, thus can be used, if possible, to avoid performance issues:</p>\n<pre>\njava.util.regex.Pattern.compile(\"(a+)++\").matcher(\n\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"+\n\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"+\n\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"+\n\"aaaaaaaaaaaaaaa!\").matches(); // Compliant\n\njava.util.regex.Pattern.compile(\"(h|h|ih(((i|a|c|c|a|i|i|j|b|a|i|b|a|a|j))+h)ahbfhba|c|i)*+\").matcher(\n\"hchcchicihcchciiicichhcichcihcchiihichiciiiihhcchi\"+\n\"cchhcihchcihiihciichhccciccichcichiihcchcihhicchcciicchcccihiiihhihihihi\"+\n\"chicihhcciccchihhhcchichchciihiicihciihcccciciccicciiiiiiiiicihhhiiiihchccch\"+\n\"chhhhiiihchihcccchhhiiiiiiiicicichicihcciciihichhhhchihciiihhiccccccciciihh\"+\n\"ichiccchhicchicihihccichicciihcichccihhiciccccccccichhhhihihhcchchihih\"+\n\"iihhihihihicichihiiiihhhhihhhchhichiicihhiiiiihchccccchichci\").matches(); // Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/400\">CWE-400 - Uncontrolled Resource Consumption</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/1333\">CWE-1333 - Inefficient Regular Expression Complexity</a> </li>\n  <li> <a href=\"https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\">owasp.org</a> - OWASP Regular expression Denial\n  of Service - ReDoS </li>\n  <li> <a\n  href=\"https://web.archive.org/web/20220506215733/https://stackstatus.net/post/147710624694/outage-postmortem-july-20-2016\">stackstatus.net(archived)</a> - Outage Postmortem - July 20, 2016 </li>\n  <li> <a href=\"https://www.regular-expressions.info/catastrophic.html\">regular-expressions.info</a> - Runaway Regular Expressions: Catastrophic\n  Backtracking </li>\n  <li> <a\n  href=\"https://docs.microsoft.com/en-us/dotnet/standard/base-types/backtracking-in-regular-expressions#backtracking-with-nested-optional-quantifiers\">docs.microsoft.com</a> - Backtracking with Nested Optional Quantifiers </li>\n</ul>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<h2>Recommended Secure Coding Practices</h2>\n<p>To avoid <code>catastrophic backtracking</code> situations, make sure that none of the following conditions apply to your regular expression.</p>\n<p>In all of the following cases, catastrophic backtracking can only happen if the problematic part of the regex is followed by a pattern that can\nfail, causing the backtracking to actually happen. Note that when performing a full match (e.g. using <code>String.matches</code>), the end of the\nregex counts as a pattern that can fail because it will only succeed when the end of the string is reached.</p>\n<ul>\n  <li> If you have a non-possessive repetition <code>r*</code> or <code>r*?</code>, such that the regex <code>r</code> could produce different\n  possible matches (of possibly different lengths) on the same input, the worst case matching time can be exponential. This can be the case if\n  <code>r</code> contains optional parts, alternations or additional repetitions (but not if the repetition is written in such a way that there’s only\n  one way to match it).\n    <ul>\n      <li> When using JDK 9 or later an optimization applies when the repetition is greedy and the entire regex does not contain any back references.\n      In that case the runtime will only be polynomial (in case of nested repetitions) or even linear (in case of alternations or optional parts).\n      </li>\n    </ul>  </li>\n  <li> If you have multiple non-possessive repetitions that can match the same contents and are consecutive or are only separated by an optional\n  separator or a separator that can be matched by both of the repetitions, the worst case matching time can be polynomial (O(n^c) where c is the\n  number of problematic repetitions). For example <code>a*b*</code> is not a problem because <code>a*</code> and <code>b*</code> match different\n  things and <code>a*_a*</code> is not a problem because the repetitions are separated by a <code>'_'</code> and can’t match that <code>'_'</code>.\n  However, <code>a*a*</code> and <code>.*_.*</code> have quadratic runtime. </li>\n  <li> If you’re performing a partial match (such as by using <code>Matcher.find</code>, <code>String.split</code>, <code>String.replaceAll</code>\n  etc.) and the regex is not anchored to the beginning of the string, quadratic runtime is especially hard to avoid because whenever a match fails,\n  the regex engine will try again starting at the next index. This means that any unbounded repetition (even a possessive one), if it’s followed by a\n  pattern that can fail, can cause quadratic runtime on some inputs. For example <code>str.split(\"\\\\s*,\")</code> will run in quadratic time on strings\n  that consist entirely of spaces (or at least contain large sequences of spaces, not followed by a comma). </li>\n</ul>\n<p>In order to rewrite your regular expression without these patterns, consider the following strategies:</p>\n<ul>\n  <li> If applicable, define a maximum number of expected repetitions using the bounded quantifiers, like <code>{1,5}</code> instead of <code>+</code>\n  for instance. </li>\n  <li> Refactor <code>nested quantifiers</code> to limit the number of way the inner group can be matched by the outer quantifier, for instance this\n  nested quantifier situation <code>(ba+)+</code> doesn’t cause performance issues, indeed, the inner group can be matched only if there exists\n  exactly one <code>b</code> char per repetition of the group. </li>\n  <li> Optimize regular expressions with <code>possessive quantifiers</code> and <code>atomic grouping</code>. </li>\n  <li> Use negated character classes instead of <code>.</code> to exclude separators where applicable. For example the quadratic regex\n  <code>.*_.*</code> can be made linear by changing it to <code>[^_]*_.*</code> </li>\n</ul>\n<p>Sometimes it’s not possible to rewrite the regex to be linear while still matching what you want it to match. Especially when using partial\nmatches, for which it is quite hard to avoid quadratic runtimes. In those cases consider the following approaches:</p>\n<ul>\n  <li> Solve the problem without regular expressions </li>\n  <li> Use an alternative non-backtracking regex implementations such as Google’s <a href=\"https://github.com/google/re2\">RE2</a> or <a\n  href=\"https://github.com/google/re2j\">RE2/J</a>. </li>\n  <li> Use multiple passes. This could mean pre- and/or post-processing the string manually before/after applying the regular expression to it or\n  using multiple regular expressions. One example of this would be to replace <code>str.split(\"\\\\s*,\\\\s*\")</code> with <code>str.split(\",\")</code> and\n  then trimming the spaces from the strings as a second step. </li>\n  <li> When using <code>Matcher.find()</code>, it is often possible to make the regex infallible by making all the parts that could fail optional,\n  which will prevent backtracking. Of course this means that you’ll accept more strings than intended, but this can be handled by using capturing\n  groups to check whether the optional parts were matched or not and then ignoring the match if they weren’t. For example the regex <code>x*y</code>\n  could be replaced with <code>x*(y)?</code> and then the call to <code>matcher.find()</code> could be replaced with <code>matcher.find() &amp;&amp;\n  matcher.group(1) != null</code>. </li>\n</ul>\n<h2>Compliant Solution</h2>\n<p>Possessive quantifiers do not keep backtracking positions, thus can be used, if possible, to avoid performance issues:</p>\n<pre>\njava.util.regex.Pattern.compile(\"(a+)++\").matcher(\n\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"+\n\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"+\n\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"+\n\"aaaaaaaaaaaaaaa!\").matches(); // Compliant\n\njava.util.regex.Pattern.compile(\"(h|h|ih(((i|a|c|c|a|i|i|j|b|a|i|b|a|a|j))+h)ahbfhba|c|i)*+\").matcher(\n\"hchcchicihcchciiicichhcichcihcchiihichiciiiihhcchi\"+\n\"cchhcihchcihiihciichhccciccichcichiihcchcihhicchcciicchcccihiiihhihihihi\"+\n\"chicihhcciccchihhhcchichchciihiicihciihcccciciccicciiiiiiiiicihhhiiiihchccch\"+\n\"chhhhiiihchihcccchhhiiiiiiiicicichicihcciciihichhhhchihciiihhiccccccciciihh\"+\n\"ichiccchhicchicihihccichicciihcichccihhiciccccccccichhhhihihhcchchihih\"+\n\"iihhihihihicichihiiiihhhhihhhchhichiicihhiiiiihchccccchichci\").matches(); // Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/400\">CWE-400 - Uncontrolled Resource Consumption</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/1333\">CWE-1333 - Inefficient Regular Expression Complexity</a> </li>\n  <li> <a href=\"https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\">owasp.org</a> - OWASP Regular expression Denial\n  of Service - ReDoS </li>\n  <li> <a\n  href=\"https://web.archive.org/web/20220506215733/https://stackstatus.net/post/147710624694/outage-postmortem-july-20-2016\">stackstatus.net(archived)</a> - Outage Postmortem - July 20, 2016 </li>\n  <li> <a href=\"https://www.regular-expressions.info/catastrophic.html\">regular-expressions.info</a> - Runaway Regular Expressions: Catastrophic\n  Backtracking </li>\n  <li> <a\n  href=\"https://docs.microsoft.com/en-us/dotnet/standard/base-types/backtracking-in-regular-expressions#backtracking-with-nested-optional-quantifiers\">docs.microsoft.com</a> - Backtracking with Nested Optional Quantifiers </li>\n</ul>"
                },
                {
                    "key": "assess_the_problem",
                    "content": "<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The input is user-controlled. </li>\n  <li> The input size is not restricted to a small number of characters. </li>\n  <li> There is no timeout in place to limit the regex evaluation time. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Sensitive Code Example</h2>\n<p>The first regex evaluation will never end in <code>JDK</code> &lt;= 9 and the second regex evaluation will never end in any versions of the\n<code>JDK</code>:</p>\n<pre>\njava.util.regex.Pattern.compile(\"(a+)+\").matcher(\n\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"+\n\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"+\n\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"+\n\"aaaaaaaaaaaaaaa!\").matches(); // Sensitive\n\njava.util.regex.Pattern.compile(\"(h|h|ih(((i|a|c|c|a|i|i|j|b|a|i|b|a|a|j))+h)ahbfhba|c|i)*\").matcher(\n\"hchcchicihcchciiicichhcichcihcchiihichiciiiihhcchi\"+\n\"cchhcihchcihiihciichhccciccichcichiihcchcihhicchcciicchcccihiiihhihihihi\"+\n\"chicihhcciccchihhhcchichchciihiicihciihcccciciccicciiiiiiiiicihhhiiiihchccch\"+\n\"chhhhiiihchihcccchhhiiiiiiiicicichicihcciciihichhhhchihciiihhiccccccciciihh\"+\n\"ichiccchhicchicihihccichicciihcichccihhiciccccccccichhhhihihhcchchihih\"+\n\"iihhihihihicichihiiiihhhhihhhchhichiicihhiiiiihchccccchichci\").matches(); // Sensitive\n</pre>\n"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "impacts": []
        },
        {
            "key": "java:S5857",
            "repo": "java",
            "name": "Character classes should be preferred over reluctant quantifiers in regular expressions",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "regex"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "3min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "3min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5857"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Using reluctant quantifiers (also known as lazy or non-greedy quantifiers) in patterns can often lead to needless backtracking, making the regex\nneedlessly inefficient and potentially vulnerable to <a href=\"https://www.regular-expressions.info/catastrophic.html\">catastrophic backtracking</a>.\nParticularly when using <code>.*?</code> or <code>.+?</code> to match anything up to some terminating character, it is usually a better idea to\ninstead use a greedily or possessively quantified negated character class containing the terminating character. For example <code>&lt;.+?&gt;</code>\nshould be replaced with <code>&lt;[^&gt;]++&gt;</code>.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n&lt;.+?&gt;\n\".*?\"\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n&lt;[^&gt;]++&gt;\n\"[^\"]*+\"\n</pre>\n<p>or</p>\n<pre>\n&lt;[^&gt;]+&gt;\n\"[^\"]*\"\n</pre>\n<h3>Exceptions</h3>\n<p>This rule only applies in cases where the reluctant quantifier can easily be replaced with a negated character class. That means the repetition has\nto be terminated by a single character or character class. Patterns such as the following, where the alternatives without reluctant quantifiers are\nmore complicated, are therefore not subject to this rule:</p>\n<pre>\n&lt;!--.*?--&gt;\n/\\*.*?\\*/\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "EFFICIENT",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S5970",
            "repo": "java",
            "name": "Spring's ModelAndViewAssert assertions should be used instead of other assertions",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "spring",
                "tests"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "TEST",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5970"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>The Spring framework comes with dedicated classes to help writing better and simpler unit tests. In particular, when testing applications built on\ntop of Spring MVC, it is recommended to use Spring’s <code>ModelAndViewAssert</code> assertions class, instead of manually testing MVC’s\nproperties.</p>\n<p>&nbsp;</p>\n<p>This rule raises an issue when&nbsp;Spring’s <code>ModelAndViewAssert</code> assertions should be used instead of manual testing.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nModelAndView mav = getMyModelAndView();\n\nAssert.assertEquals(\"register\", mav.getViewName());\nAssert.assertTrue((Boolean) mav.getModelMap().get(\"myAttribute\"));\nAssert.assertFalse((Boolean) mav.getModelMap().get(\"myAttribute\"));\nAssert.assertEquals(myObject, mav.getModelMap().get(\"myAttribute\"));\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nModelAndView mav = getMyModelAndView();\n\nModelAndViewAssert.assertViewName(mav, \"register\");\nModelAndViewAssert.assertModelAttributeValue(mav, \"myAttribute\", Boolean.TRUE);\nModelAndViewAssert.assertModelAttributeValue(mav, \"myAttribute\", Boolean.FALSE);\nModelAndViewAssert.assertModelAttributeValue(mav, \"myAttribute\", myObject);\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/testing.html#unit-testing-spring-mvc\">Unit Testing\n  Spring MVC</a> </li>\n  <li> <a\n  href=\"https://docs.spring.io/spring-framework/docs/5.2.8.RELEASE/javadoc-api/org/springframework/test/web/ModelAndViewAssert.html\">ModelAndViewAssert Javadoc</a> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S5973",
            "repo": "java",
            "name": "Tests should be stable",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "tests",
                "design",
                "unpredictable"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "TEST",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5973"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> TestNG documentation - <a href=\"https://testng.org/#_annotations\">Annotations</a> </li>\n  <li> Spotify Engineering - <a\n  href=\"https://engineering.atspotify.com/2019/11/18/test-flakiness-methods-for-identifying-and-dealing-with-flaky-tests/\">Test Flakiness - Methods\n  for identifying and dealing with flaky tests</a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Unstable / flaky tests are tests which sometimes pass and sometimes fail, without any code change. Obviously, they slow down developments when\ndevelopers have to rerun failed tests. However, the real problem is that you can’t completely trust these tests, they might fail for many different\nreasons and you don’t know if any of them will happen in production.</p>\n<p>Some tools, such as TestNG, enable developers to automatically retry flaky tests. This might be acceptable as a temporary solution, but it should\neventually be fixed. The more flaky tests you add, the more chances there are for a bug to arrive in production.</p>\n<p>This rule raises an issue when the annotation <code>org.testng.annotations.Test</code> is given a <code>successPercentage</code> argument with a\nvalue lower than <code>100</code>.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nimport org.testng.annotations.Test;\n\npublic class PercentageTest {\n    @Test(successPercentage = 80, invocationCount = 10)  // Noncompliant. The test is allowed to fail 2 times.\n    public void flakyTest() {\n    }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "TESTED",
            "cleanCodeAttributeCategory": "ADAPTABLE",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                },
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S5979",
            "repo": "java",
            "name": "Annotated Mockito objects should be initialized",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "tests",
                "mockito"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "TEST",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5979"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://site.mockito.org/javadoc/current/org/mockito/MockitoAnnotations.html\">Mockito documentation - MockitoAnnotations</a> </li>\n  <li> <a href=\"https://site.mockito.org/javadoc/current/org/mockito/junit/MockitoRule.html\">Mockito documentation - MockitoRule </a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Objects annotated with Mockito annotations <code>@Mock</code>,&nbsp;<code>@Spy</code>,&nbsp;<code>@Captor</code>,&nbsp;or <code>@InjectMocks</code>\nneed to be initialized explicitly.</p>\n<p>There are several ways to do this:</p>\n<ul>\n  <li> Call <code>MockitoAnnotations.openMocks(this)</code> or&nbsp;<code>MockitoAnnotations.initMocks(this)</code>&nbsp;in a setup method </li>\n  <li> Annotate test class with&nbsp;<code>@RunWith(MockitoJUnitRunner.class)</code>&nbsp;(JUnit 4) </li>\n  <li> Annotate test class with&nbsp;<code>@ExtendWith(MockitoExtension.class)</code>&nbsp;(JUnit 5 Jupiter) </li>\n  <li> Use&nbsp;<code>@Rule public MockitoRule rule = MockitoJUnit.rule();</code> </li>\n</ul>\n<p>Test using uninitialized mocks will fail.</p>\n<p>Note that this only applies to annotated Mockito objects. It is not necessary to initialize objects instantiated via <code>Mockito.mock()</code> or\n<code>Mockito.spy()</code>.</p>\n<p>This rule raises an issue when a test class uses uninitialized mocks.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class FooTest { // Noncompliant: Mockito initialization missing\n  @Mock private Bar bar;\n\n  @Spy private Baz baz;\n\n  @InjectMocks private Foo fooUnderTest;\n\n  @Test\n  void someTest() {\n    // test something ...\n  }\n\n  @Nested\n  public class Nested {\n    @Mock\n    private Bar bar;\n  }\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n@RunWith(MockitoJUnitRunner.class)\npublic class FooTest {\n  @Mock private Bar bar;\n  // ...\n}\n</pre>\n<pre>\n@ExtendWith(MockitoExtension.class)\npublic class FooTest {\n  @Mock private Bar bar;\n  // ...\n}\n</pre>\n<pre>\npublic class FooTest {\n  @Rule\n  public MockitoRule rule = MockitoJUnit.rule();\n\n  @Mock private Bar bar;\n  // ...\n}\n</pre>\n<pre>\npublic class FooTest {\n  @Mock private Bar bar;\n  // ...\n\n  @BeforeEach\n  void setUp() {\n    MockitoAnnotations.openMocks(this);\n  }\n  // ...\n}\n</pre>\n<pre>\npublic class FooTest {\n  @Mock private Bar bar;\n  // ...\n\n  @Before\n  void setUp() {\n    MockitoAnnotations.initMocks(this);\n  }\n  // ...\n}\n</pre>\n<pre>\n@ExtendWith(MockitoExtension.class)\npublic class FooTest {\n  @Nested\n  public class Nested {\n    @Mock\n    private Bar bar;\n  }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "BLOCKER"
                }
            ]
        },
        {
            "key": "java:S6829",
            "repo": "java",
            "name": "\"@Autowired\" should be used when multiple constructors are provided",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "spring"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S6829"
                ]
            },
            "descriptionSections": [
                {
                    "key": "introduction",
                    "content": "<p>The <code>@Autowired</code> annotation in Spring is used for automatic dependency injection. It allows Spring to resolve and inject the required\nbeans into your bean. For example to inject a <code>@Repository</code> object into a <code>@Service</code>.</p>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>Use the <code>@Autowired</code> annotation to specify which constructor to use for auto-wiring.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@Component\npublic class ExampleClass { // Noncompliant, multiple constructors present and no @Autowired annotation to specify which one to use\n\n    private final DependencyClass1 dependency1;\n\n    public ExampleClass() {\n        throw new UnsupportedOperationException(\"Not supported yet.\");\n    }\n\n    public ExampleClass(DependencyClass1 dependency1) {\n        this.dependency1 = dependency1;\n    }\n\n    // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@Component\npublic class ExampleClass {\n\n    private final DependencyClass1 dependency1;\n\n    public ExampleClass() {\n        throw new UnsupportedOperationException(\"Not supported yet.\");\n    }\n\n    @Autowired\n    public ExampleClass(DependencyClass1 dependency1) {\n        this.dependency1 = dependency1;\n    }\n\n    // ...\n}\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> Spring - <a href=\"https://docs.spring.io/spring-framework/reference/core/beans/annotation-config/autowired.html\">Annotation Config:\n  Autowired</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> Java Guides - <a href=\"https://www.javaguides.net/2023/08/unsatisfieddependencyexception-in.html\">UnsatisfiedDependencyException in Spring\n  Boot</a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>The Spring dependency injection mechanism cannot identify which constructor to use for auto-wiring when multiple constructors are present in a\nclass. This ambiguity can cause the application to crash at runtime, and it makes the code less clear to understand and more complex to extend and\nmaintain.</p>\n<h3>What is the potential impact?</h3>\n<ul>\n  <li> <strong>Incorrect Instantiation</strong>: the wrong constructor is selected for instantiation, leading to a bean not being correctly\n  initialized. </li>\n  <li> <strong>Unsatisfied Dependency Exception</strong>: the constructor selected by Spring requires beans that are not available in the Spring\n  context. </li>\n  <li> <strong>Non-Deterministic Behavior</strong>: the constructor selected by Spring can vary, based on the number of dependencies that can be\n  satisfied at runtime, leading to unpredictable application behavior. </li>\n  <li> <strong>Maintainability Issues</strong>: adding more constructors in the future could lead to further confusion and potential bugs. </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                },
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S1142",
            "repo": "java",
            "name": "Methods should not have too many return statements",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "brain-overload"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "max",
                    "htmlDesc": "Maximum allowed return statements per method",
                    "defaultValue": "3",
                    "type": "INTEGER"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1142"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Having too many return statements in a method increases the method’s essential complexity because the flow of execution is broken each time a\nreturn statement is encountered. This makes it harder to read and understand the logic of the method.</p>\n<h3>Noncompliant code example</h3>\n<p>With the default threshold of 3:</p>\n<pre>\npublic boolean myMethod() { // Noncompliant; there are 4 return statements\n  if (condition1) {\n    return true;\n  } else {\n    if (condition2) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n  return false;\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S1143",
            "repo": "java",
            "name": "Jump statements should not occur in \"finally\" blocks",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "error-handling",
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "30min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "30min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1143"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/584\">CWE-584 - Return Inside Finally Block</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/BTdGBQ\">CERT, ERR04-J.</a> - Do not complete abruptly from a finally block </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Using <code>return</code>, <code>break</code>, <code>throw</code>, and so on from a <code>finally</code> block suppresses the propagation of any\nunhandled <code>Throwable</code> which was thrown in the <code>try</code> or <code>catch</code> block.</p>\n<p>This rule raises an issue when a jump statement (<code>break</code>, <code>continue</code>, <code>return</code>, <code>throw</code>, and\n<code>goto</code>) would force control flow to leave a <code>finally</code> block.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic static void main(String[] args) {\n  try {\n    doSomethingWhichThrowsException();\n    System.out.println(\"OK\");   // incorrect \"OK\" message is printed\n  } catch (RuntimeException e) {\n    System.out.println(\"ERROR\");  // this message is not shown\n  }\n}\n\npublic static void doSomethingWhichThrowsException() {\n  try {\n    throw new RuntimeException();\n  } finally {\n    for (int i = 0; i &lt; 10; i ++) {\n      //...\n      if (q == i) {\n        break; // ignored\n      }\n    }\n\n    /* ... */\n    return;      // Noncompliant - prevents the RuntimeException from being propagated\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic static void main(String[] args) {\n  try {\n    doSomethingWhichThrowsException();\n    System.out.println(\"OK\");\n  } catch (RuntimeException e) {\n    System.out.println(\"ERROR\");  // \"ERROR\" is printed as expected\n  }\n}\n\npublic static void doSomethingWhichThrowsException() {\n  try {\n    throw new RuntimeException();\n  } finally {\n    for (int i = 0; i &lt; 10; i ++) {\n      //...\n      if (q == i) {\n        break; // ignored\n      }\n    }\n\n    /* ... */\n  }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S1144",
            "repo": "java",
            "name": "Unused \"private\" methods should be removed",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "unused"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:UnusedPrivateMethod"
                ]
            },
            "descriptionSections": [
                {
                    "key": "introduction",
                    "content": "<p>This rule raises an issue when a private method is never referenced in the code.</p>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>A method that is never called is dead code, and should be removed. Cleaning out dead code decreases the size of the maintained codebase, making it\neasier to understand the program and preventing bugs from being introduced.</p>\n<p>This rule detects methods that are never referenced from inside a translation unit, and cannot be referenced from the outside.</p>\n\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class Foo implements Serializable\n{\n  public static void doSomething() {\n    Foo foo = new Foo();\n    ...\n  }\n\n  private void unusedPrivateMethod() {...}\n  private void writeObject(ObjectOutputStream s) {...}  //Compliant, relates to the java serialization mechanism\n  private void readObject(ObjectInputStream in) {...}  //Compliant, relates to the java serialization mechanism\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class Foo implements Serializable\n{\n  public static void doSomething(){\n    Foo foo = new Foo();\n    ...\n  }\n\n  private void writeObject(ObjectOutputStream s) {...}  //Compliant, relates to the java serialization mechanism\n  private void readObject(ObjectInputStream in) {...}  //Compliant, relates to the java serialization mechanism\n}\n</pre>\n<h3>Exceptions</h3>\n<p>This rule doesn’t raise issues for:</p>\n<ul>\n  <li> annotated methods </li>\n  <li> methods with parameters that are annotated with <code>@javax.enterprise.event.Observes</code> </li>\n</ul>\n<p>The rule does not take reflection into account, which means that issues will be raised on <code>private</code> methods that are only accessed using\nthe reflection API.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S1147",
            "repo": "java",
            "name": "Exit methods should not be called",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "cert",
                "suspicious"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "30min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "30min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1147"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/382\">CWE-382 - Use of System.exit()</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/7zZGBQ\">CERT, ERR09-J.</a> - Do not allow untrusted code to terminate the JVM </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Calling <code>System.exit(int status)</code> or <code>Rutime.getRuntime().exit(int status)</code> calls the shutdown hooks and shuts downs the\nentire Java virtual machine. Calling <code>Runtime.getRuntime().halt(int)</code> does an immediate shutdown, without calling the shutdown hooks, and\nskipping finalization.</p>\n<p>Each of these methods should be used with extreme care, and only when the intent is to stop the whole Java process. For instance, none of them\nshould be called from applications running in a J2EE container.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nSystem.exit(0);\nRuntime.getRuntime().exit(0);\nRuntime.getRuntime().halt(0);\n</pre>\n<h3>Exceptions</h3>\n<p>These methods are ignored inside <code>main</code>.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "BLOCKER"
                }
            ]
        },
        {
            "key": "java:S1264",
            "repo": "java",
            "name": "A \"while\" loop should be used instead of a \"for\" loop",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "clumsy"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1264"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/tutorial/java/nutsandbolts/for.html\">Java SE - The for Statement</a> </li>\n</ul>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfor (;condition;) { /*...*/ } // Noncompliant; only the condition is specified\n</pre>\n<p>When only the condition expression is defined in a <code>for</code> loop, a <code>while</code> loop should be used instead to increase readability.\nA <code>while</code> loop consists of a single loop condition and allows a block of code to be executed repeatedly as long as the specified condition\nis true.</p>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nwhile (condition) { /*...*/ }\n</pre>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>A <code>for</code> loop is a type of loop construct that allows a block of code to be executed repeatedly for a fixed number of times. The\n<code>for</code> loop is typically used when the number of iterations is known in advance and consists of three parts:</p>\n<ul>\n  <li> The initialization statement is executed once at the beginning of the loop. It is used to initialize the loop counter or any other variables\n  that may be used in the loop. </li>\n  <li> The loop condition is evaluated at the beginning of each iteration, and if it is <code>true</code>, the code inside the loop is executed. </li>\n  <li> The update statement is executed at the end of each iteration and is used to update the loop counter or any other variables that may be used in\n  the loop. </li>\n</ul>\n<pre>\nfor (initialization; termination; increment) { /*...*/ }\n</pre>\n<p>All three statements are optional. However, when the initialization and update statements are not used, it can be unclear to the reader what the\nloop counter is and how it is being updated. This can make the code harder to understand and maintain.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S2109",
            "repo": "java",
            "name": "Reflection should not be used to check non-runtime annotations",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2109"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Denoted by the \"@\" symbol, annotations are metadata that can be added to classes, methods, and variables for various purposes such as\ndocumentation, code analysis, and runtime processing.</p>\n<p>Annotations have retention policies that determine in which context they are retained and available for use. There are three retention policies for\nannotations:</p>\n<ul>\n  <li> <code>RetentionPolicy.SOURCE</code> - Annotations are only available during compilation and code analysis. They are not included in the\n  compiled class file and are not available at runtime. E.G. <code>@Override</code>, <code>@SuppressWarnings</code> </li>\n  <li> <code>RetentionPolicy.CLASS</code> - Annotations are included in the compiled class file providing information to the compiler, but they are\n  not retained by the JVM at runtime. This is the default retention policy. E.G. <code>@PreviewFeature</code> </li>\n  <li> <code>RetentionPolicy.RUNTIME</code> - Annotations are included in the compiled class file and available at runtime. They can be accessed and\n  used by the program through reflection. E.G. <code>@FunctionalInterface</code>, <code>@Deprecated</code> </li>\n</ul>\n<p>It is important to understand that only annotations having the <code>RUNTIME</code> retention policy can be accessed at runtime using reflection.\nFor example, the following if condition is true when the method argument is the <code>java.util.function.Function</code> class:</p>\n<pre>\nvoid execute(Class&lt;?&gt; cls) {\n  if (cls.isAnnotationPresent(FunctionalInterface.class)) {\n    // ...\n  }\n}\n</pre>\n<p>Therefore, it is an issue to use reflection in combination with annotations with the <code>SOURCE</code> or <code>CLASS</code> retention policy\nbecause they are not present at runtime. For example, in the JVM source code, the <code>hashCode()</code> method of the <code>Integer</code> class has\nthe <code>@Override</code> annotation. However, the following if condition will always be false even if the method argument is the\n<code>Integer#hashCode()</code> method because <code>@Override</code> has the <code>SOURCE</code> retention policy:</p>\n<pre>\nvoid execute(Method method) {\n  if (method.isAnnotationPresent(Override.class)) { // Noncompliant, if condition will always be false because\n                                                    // @Override is declared with @Retention(RetentionPolicy.SOURCE)\n    // ...\n  }\n}\n</pre>\n<p>This rule detects improper reflective access on annotations having the <code>SOURCE</code> or <code>CLASS</code> retention policy.</p>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/annotation/RetentionPolicy.html\">Oracle SDK -\n  java.lang.annotation.RetentionPolicy</a> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S2111",
            "repo": "java",
            "name": "\"BigDecimal(double)\" should not be used",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2111"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>The <code>BigDecimal</code> is used to represents immutable, arbitrary-precision signed decimal numbers.</p>\n<p>Differently from the <code>BigDecimal</code>, the <code>double</code> primitive type and the <code>Double</code> type have limited precision due to\nthe use of double-precision 64-bit IEEE 754 floating point. Because of floating point imprecision, the <code>BigDecimal(double)</code> constructor can\nbe somewhat unpredictable.</p>\n<p>For example writing <code>new BigDecimal(0.1)</code> doesn’t create a BigDecimal which is exactly equal to 0.1, but it is equal to\n0.1000000000000000055511151231257827021181583404541015625. This is because 0.1 cannot be represented exactly as a double (or, for that matter, as a\nbinary fraction of any finite length).</p>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/math/BigDecimal.html\">Oracle - BigDecimal</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/kzdGBQ\">CERT, NUM10-J</a> - Do not construct BigDecimal objects from floating-point literals\n  </li>\n</ul>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>Use <code>BigDecimal.valueOf</code>, which uses a string under the covers to eliminate floating point rounding errors, or the constructor that\ntakes a <code>String</code> argument.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndouble d = 1.1;\n\nBigDecimal bd1 = new BigDecimal(d);   // Noncompliant\nBigDecimal bd2 = new BigDecimal(1.1); // Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndouble d = 1.1;\n\nBigDecimal bd1 = BigDecimal.valueOf(d); // Compliant\nBigDecimal bd2 = new BigDecimal(\"1.1\"); // Compliant\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S2112",
            "repo": "java",
            "name": "\"URL.hashCode\" and \"URL.equals\" should be avoided",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "performance"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2112"
                ]
            },
            "descriptionSections": [
                {
                    "key": "how_to_fix",
                    "content": "<p>Use the <code>URI</code> class until access to the resource is actually needed.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic void checkUrl(URL url) {\n  Set&lt;URL&gt; sites = new HashSet&lt;URL&gt;();               // Noncompliant\n\n  URL homepage = new URL(\"http://sonarsource.com\");  // Compliant\n  if (homepage.equals(url)) {                        // Noncompliant\n    // ...\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic void checkUrl(URL url) {\n  Set&lt;URI&gt; sites = new HashSet&lt;URI&gt;();               // Compliant\n\n  URI homepage = new URI(\"http://sonarsource.com\");  // Compliant\n  URI uri = url.toURI();\n  if (homepage.equals(uri)) {                        // Compliant\n    // ...\n  }\n}\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/net/URL.html\">Oracle Java SE - java.net.URL</a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>The <code>equals</code> and <code>hashCode</code> methods of <code>java.net.URL</code> may trigger a name service lookup (typically DNS) to resolve\nthe hostname or IP address. Depending on the configuration, and network status, this lookup can be time-consuming.</p>\n<p>On the other hand, the <code>URI</code> class does not perform such lookups and is a better choice unless you specifically require the\nfunctionality provided by <code>URL</code>.</p>\n<p>In general, it is better to use the <code>URI</code> class until access to the resource is actually needed, at which point you can convert the\n<code>URI</code> to a <code>URL</code> using <code>URI.toURL()</code>.</p>\n<p>This rule checks for uses of <code>URL</code> 's in <code>Map</code> and <code>Set</code> , and for explicit calls to the <code>equals</code> and\n<code>hashCode</code> methods. It suggests reconsidering the use of <code>URL</code> in such scenarios to avoid potential performance issues related\nto name service lookups.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S2114",
            "repo": "java",
            "name": "Collections should not be passed as arguments to their own methods",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2114"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Passing a collection as an argument to the collection’s own method is either an error - some other argument was intended - or simply nonsensical\ncode.</p>\n<p>Further, because some methods require that the argument remain unmodified during the execution, passing a collection to itself can result in\nundefined behavior.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nList &lt;Object&gt; objs = new ArrayList&lt;Object&gt;();\nobjs.add(\"Hello\");\n\nobjs.add(objs); // Noncompliant; StackOverflowException if objs.hashCode() called\nobjs.addAll(objs); // Noncompliant; behavior undefined\nobjs.containsAll(objs); // Noncompliant; always true\nobjs.removeAll(objs); // Noncompliant; confusing. Use clear() instead\nobjs.retainAll(objs); // Noncompliant; NOOP\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S2115",
            "repo": "java",
            "name": "A secure password should be used when connecting to a database",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "VULNERABILITY",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "45min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "45min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2115"
                ]
            },
            "descriptionSections": [
                {
                    "key": "introduction",
                    "content": "<p>When accessing a database, an empty password should be avoided as it introduces a weakness.</p>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>The following code uses an empty password to connect to a Postgres database.</p>\n<p>The vulnerability can be fixed by using a strong password retrieved from Properties. This <code>database.password</code> property is set during\ndeployment. Its value should be strong and different for each database.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"201\" data-diff-type=\"noncompliant\">\nConnection conn = DriverManager.getConnection(\"jdbc:derby:memory:myDB;create=true\", \"login\", \"\"); // Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"201\" data-diff-type=\"compliant\">\nString password = System.getProperty(\"database.password\");\nConnection conn = DriverManager.getConnection(\"jdbc:derby:memory:myDB;create=true\", \"login\", password);\n</pre>\n<h3>Pitfalls</h3>\n<h4>Hard-coded passwords</h4>\n<p>It could be tempting to replace the empty password with a hard-coded one. Hard-coding passwords in the code can pose significant security risks.\nHere are a few reasons why it is not recommended:</p>\n<ol>\n  <li> Security Vulnerability: Hard-coded passwords can be easily discovered by anyone who has access to the code, such as other developers or\n  attackers. This can lead to unauthorized access to the database and potential data breaches. </li>\n  <li> Lack of Flexibility: Hard-coded passwords make it difficult to change the password without modifying the code. If the password needs to be\n  updated, it would require recompiling and redeploying the code, which can be time-consuming and error-prone. </li>\n  <li> Version Control Issues: Storing passwords in code can lead to version control issues. If the code is shared or stored in a version control\n  system, the password will be visible to anyone with access to the repository, which is a security risk. </li>\n</ol>\n<p>To mitigate these risks, it is recommended to use secure methods for storing and retrieving passwords, such as using environment variables,\nconfiguration files, or secure key management systems. These methods allow for better security, flexibility, and separation of sensitive information\nfrom the codebase.</p>",
                    "context": {
                        "displayName": "Java SE",
                        "key": "java_se"
                    }
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/tutorial/essential/environment/properties.html\">Java Properties</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\">Top 10 2021 Category A7 - Identification and\n  Authentication Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication\">Top 10 2017 Category A2 - Broken Authentication</a>\n  </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/521\">CWE-521 - Weak Password Requirements</a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>When a database does not require a password for authentication, it allows anyone to access and manipulate the data stored within it. Exploiting\nthis vulnerability typically involves identifying the target database and establishing a connection to it without the need for any authentication\ncredentials.</p>\n<h3>What is the potential impact?</h3>\n<p>Once connected, an attacker can perform various malicious actions, such as viewing, modifying, or deleting sensitive information, potentially\nleading to data breaches or unauthorized access to critical systems. It is crucial to address this vulnerability promptly to ensure the security and\nintegrity of the database and the data it contains.</p>\n<h4>Unauthorized Access to Sensitive Data</h4>\n<p>When a database lacks a password for authentication, it opens the door for unauthorized individuals to gain access to sensitive data. This can\ninclude personally identifiable information (PII), financial records, intellectual property, or any other confidential information stored in the\ndatabase. Without proper access controls in place, malicious actors can exploit this vulnerability to retrieve sensitive data, potentially leading to\nidentity theft, financial loss, or reputational damage.</p>\n<h4>Compromise of System Integrity</h4>\n<p>Without a password requirement, unauthorized individuals can gain unrestricted access to a database, potentially compromising the integrity of the\nentire system. Attackers can inject malicious code, alter configurations, or manipulate data within the database, leading to system malfunctions,\nunauthorized system access, or even complete system compromise. This can disrupt business operations, cause financial losses, and expose the\norganization to further security risks.</p>\n<h4>Unwanted Modifications or Deletions</h4>\n<p>The absence of a password for database access allows anyone to make modifications or deletions to the data stored within it. This poses a\nsignificant risk, as unauthorized changes can lead to data corruption, loss of critical information, or the introduction of malicious content. For\nexample, an attacker could modify financial records, tamper with customer orders, or delete important files, causing severe disruptions to business\nprocesses and potentially leading to financial and legal consequences.</p>\n<p>Overall, the lack of a password configured to access a database poses a serious security risk, enabling unauthorized access, data breaches, system\ncompromise, and unwanted modifications or deletions. It is essential to address this vulnerability promptly to safeguard sensitive data, maintain\nsystem integrity, and protect the organization from potential harm.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "TRUSTWORTHY",
            "cleanCodeAttributeCategory": "RESPONSIBLE",
            "impacts": [
                {
                    "softwareQuality": "SECURITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S2116",
            "repo": "java",
            "name": "\"hashCode\" and \"toString\" should not be called on array instances",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2116"
                ]
            },
            "descriptionSections": [
                {
                    "key": "how_to_fix",
                    "content": "<p>Use relevant static <code>Arrays</code> method.</p>\n<ul>\n  <li> <code>Arrays.hashCode</code> or <code>Arrays.deepHashCode</code> </li>\n  <li> <code>Arrays.toString</code> or <code>Arrays.deepToString</code> </li>\n</ul>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic static void main(String[] args) {\n    String argStr = args.toString();       // Noncompliant\n    int argHash = args.hashCode();         // Noncompliant\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic static void main(String[] args) {\n    String argStr = Arrays.toString(args); // Compliant\n    int argHash = Arrays.hashCode(args);   // Compliant\n}\n</pre>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>The purpose of the <code>hashCode</code> method is to return a hash code based on the contents of the object. Similarly, the purpose of the\n<code>toString</code> method is to provide a textual representation of the object’s contents.</p>\n<p>Calling <code>hashCode()</code> and <code>toString()</code> directly on array instances should be avoided because the default implementations\nprovided by the <code>Object</code> class do not provide meaningful results for arrays. <code>hashCode()</code> returns the array’s \"identity hash\ncode\", and <code>toString()</code> returns nearly the same value. Neither method’s output reflects the array’s contents.</p>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/util/Arrays.html\">Oracle Java SE - Arrays API</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://github.com/google/error-prone/blob/master/docs/bugpattern/ArrayHashCode.md\">Error Prone - ArrayHashCode</a> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "COMPLETE",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S2230",
            "repo": "java",
            "name": "Methods with Spring proxying annotations should be public",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "spring"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2230"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/scheduling/annotation/Async.html\">Spring\n  Framework API - Annotation Interface Async</a> </li>\n  <li> <a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/transaction/annotation/Transactional.html\">Spring\n  Framework API - Annotation Interface Transactional</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://www.baeldung.com/spring-async\">Baeldung - How To Do @Async in Spring</a> </li>\n  <li> <a href=\"https://stackoverflow.com/questions/22561775/spring-async-ignored\">Stack Overflow - Spring @Async ignored</a> </li>\n  <li> <a href=\"https://stackoverflow.com/questions/4396284/does-spring-transactional-attribute-work-on-a-private-method\">Stack Overflow - Does Spring\n  @Transactional attribute work on a private method?</a> </li>\n</ul>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>Declare the method <code>public</code>. Note that this action alone does not resolve the issue of direct instance calls from within the same class\n(see rule <a href='/coding_rules#rule_key=java%3AS6809'>S6809</a>), but it is a required precondition to fix it.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@Async\nprivate Future&lt;String&gt; asyncMethodWithReturnType() { // Noncompliant, no proxy generated and\n    return \"Hellow, world!\";                         // can only be invoked from same class\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@Async\npublic Future&lt;String&gt; asyncMethodWithReturnType() { // Compliant\n    return \"Hellow, world!\";\n}\n</pre>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Marking a non-public method <code>@Async</code> or <code>@Transactional</code> is misleading because Spring does not recognize non-public methods,\nand so makes no provision for their proper invocation. Nor does Spring make provision for the methods invoked by the method it called.</p>\n<p>Therefore marking a private method, for instance, @Transactional can only result in a runtime error or exception if the method is annotated as\n@Transactional.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S2232",
            "repo": "java",
            "name": "\"ResultSet.isLast()\" should not be used",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "performance",
                "pitfall",
                "sql"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2232"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/8/docs/api/java/sql/ResultSet.html#isLast--\">Java SE 8 API Specification: ResultSet.isLast()</a> </li>\n</ul>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>Refactor your code to use <code>ResultSet.next()</code> instead of <code>ResultSet.isLast()</code>. Be cautious of its different semantics and side\neffects on cursor positioning in the result set. Verify that your program logic is still valid under these side effects and otherwise adjust it.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nResultSet results = stmt.executeQuery(\"SELECT name, address FROM PERSON\");\nStringBuilder sb = new StringBuilder();\nwhile (results.next() &amp;&amp; !results.isLast()) { // Noncompliant\n  sb.append(results.getString(\"name\") + \", \");\n}\nsb.append(results.getString(\"name\"));\nString formattedNames = sb.toString();\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nResultSet results = stmt.executeQuery(\"SELECT name, address FROM PERSON\");\nList&lt;String&gt; names = new ArrayList&lt;&gt;();\nwhile (results.next()) { // Compliant, and program logic refactored\n  names.add(results.getString(\"name\"));\n}\nString formattedNames =  names.stream().collect(Collectors.joining(\", \"));\n</pre>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>There are several reasons to avoid using this method:</p>\n<ol>\n  <li> It is optionally available only for result sets of type <code>ResultSet.TYPE_FORWARD_ONLY</code>. Database drivers will throw an exception if\n  not supported. </li>\n  <li> The method can be expensive to execute as the database driver may need to fetch ahead one row to determine whether the current row is the last\n  in the result set. The documentation of the method explicitly mentions this fact. </li>\n  <li> What \"the cursor is on the last row\" means for an empty <code>ResultSet</code> is unclear. Database drivers may return <code>true</code> or\n  <code>false</code> in this case . </li>\n</ol>\n<p><code>ResultSet.next()</code> is a good alternative to <code>ResultSet.isLast()</code> as it does not have the mentioned issues. It is always\nsupported and, as per specification, returns <code>false</code> for empty result sets.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S2234",
            "repo": "java",
            "name": "Parameters should be passed in the correct order",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2234"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>When the names of parameters in a method call match the names of the method arguments, it contributes to clearer, more readable code. However, when\nthe names match, but are passed in a different order than the method arguments, it indicates a mistake in the parameter order which will likely lead\nto unexpected results.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic double divide(int divisor, int dividend) {\n  return divisor/dividend;\n}\n\npublic void doTheThing() {\n  int divisor = 15;\n  int dividend = 5;\n\n  double result = divide(dividend, divisor);  // Noncompliant; operation succeeds, but result is unexpected\n  //...\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic double divide(int divisor, int dividend) {\n  return divisor/dividend;\n}\n\npublic void doTheThing() {\n  int divisor = 15;\n  int dividend = 5;\n\n  double result = divide(divisor, dividend);\n  //...\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S2235",
            "repo": "java",
            "name": "\"IllegalMonitorStateException\" should not be caught",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "error-handling",
                "multi-threading"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2235"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>The <code>IllegalMonitorStateException</code> is an exception that occurs when a thread tries to perform an operation on an object’s monitor that\nit does not own. This exception is typically thrown when a method like <code>wait()</code>, <code>notify()</code>, or <code>notifyAll()</code> is\ncalled outside a synchronized block or method.</p>\n<p><code>IllegalMonitorStateException</code> is specifically designed to be an unchecked exception to point out a programming mistake. This exception\nserves as a reminder for developers to rectify their code by correctly acquiring and releasing locks using synchronized blocks or methods. It also\nemphasizes the importance of calling monitor-related methods on the appropriate objects to ensure proper synchronization.</p>\n<p>Catching and handling this exception can mask underlying synchronization issues and lead to unpredictable behavior.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic void doSomething() {\n  try {\n    anObject.notify();\n  } catch(IllegalMonitorStateException e) { // Noncompliant\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic void doSomething() {\n  synchronized(anObject) {\n    anObject.notify();\n  }\n}\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/lang/IllegalMonitorStateException.html\">Oracle Java SE -\n  IllegalMonitorStateException</a> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S2236",
            "repo": "java",
            "name": "Methods \"wait(...)\", \"notify()\" and \"notifyAll()\" should not be called on Thread instances",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "multi-threading"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "30min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "30min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2236"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/lang/Thread.html\">Oracle Java SE - Thread</a> </li>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/lang/Object.html\">Oracle Java SE - Object</a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>In Java, the <code>Thread</code> class represents a thread of execution. Synchronization between threads is typically achieved using objects or\nshared resources.</p>\n<p>The methods <code>wait(…​)</code>, <code>notify()</code>, and <code>notifyAll()</code> are related to the underlying object’s monitor and are\ndesigned to be called on objects that act as locks or monitors for synchronization. These methods are available on Java <code>Object</code> and,\ntherefore, automatically inherited by all objects, including <code>Thread.</code></p>\n<p>Calling these methods on a <code>Thread</code> may corrupt the behavior of the JVM, which relies on them to change the state of the thread\n(<code>BLOCKED,</code> <code>WAITING,</code>…​).</p>\n<h3>Noncompliant code example</h3>\n<pre>\nThread myThread = new Thread(new RunnableJob());\n...\nmyThread.wait(); // Noncompliant\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "BLOCKER"
                }
            ]
        },
        {
            "key": "java:S2479",
            "repo": "java",
            "name": "Whitespace and control characters in literals should be explicit",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "allowTabsInTextBlocks",
                    "htmlDesc": "Allow tabs in text blocks",
                    "defaultValue": "false",
                    "type": "BOOLEAN"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2479"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content":"<p>Non-encoded control characters and whitespace characters are often injected in the source code because of a bad manipulation. They are either\ninvisible or difficult to recognize, which can result in bugs when the string is not what the developer expects. If you actually need to use a control\ncharacter use their encoded version (ex: ASCII <code>\\n,\\t,</code>…​ or Unicode <code>U+000D, U+0009,</code>…​).</p>\n<p>This rule raises an issue when the following characters are seen in a literal string:</p>\n<ul>\n  <li> <a href=\"https://en.wikipedia.org/wiki/ASCII#Control_characters\">ASCII control character</a>. (character index &lt; 32 or = 127) </li>\n  <li> Unicode <a href=\"https://en.wikipedia.org/wiki/Unicode_character_property#Whitespace\">whitespace characters</a>. </li>\n  <li> Unicode <a href=\"https://en.wikipedia.org/wiki/C0_and_C1_control_codes\">C0 control characters</a> </li>\n  <li> Unicode characters <code>U+200B, U+200C, U+200D, U+2060, U+FEFF, U+2028, U+2029</code> </li>\n</ul>\n<p>No issue will be raised on the simple space character. Unicode <code>U+0020</code>, ASCII 32.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nString tabInside = \"A\tB\";  // Noncompliant, contains a tabulation\nString zeroWidthSpaceInside = \"foo​bar\"; // Noncompliant, it contains a U+200B character inside\nchar tab = '\t';\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nString tabInside = \"A\\tB\";  // Compliant, uses escaped value\nString zeroWidthSpaceInside = \"foo\\​bar\";  // Compliant, uses escaped value\nchar tab = '\\t';\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S3437",
            "repo": "java",
            "name": "Value-based objects should not be serialized",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "serialization",
                "java8",
                "lock-in"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S3437"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>According to the documentation,</p>\n<blockquote>\n  <p>A program may produce unpredictable results if it attempts to distinguish two references to equal values of a value-based class, whether directly\n  via reference equality or indirectly via an appeal to synchronization, identity hashing, serialization…​</p>\n</blockquote>\n<p>For example (credit to Brian Goetz), imagine Foo is a value-based class:</p>\n<pre>\nFoo[] arr = new Foo[2];\narr[0] = new Foo(0);\narr[1] = new Foo(0);\n</pre>\n<p>Serialization promises that on deserialization of arr, elements 0 and 1 will not be aliased. Similarly, in:</p>\n<pre>\nFoo[] arr = new Foo[2];\narr[0] = new Foo(0);\narr[1] = arr[0];\n</pre>\n<p>Serialization promises that on deserialization of <code>arr</code>, elements 0 and 1 <strong>will</strong> be aliased.</p>\n<p>While these promises are coincidentally fulfilled in current implementations of Java, that is not guaranteed in the future, particularly when true\nvalue types are introduced in the language.</p>\n<p>This rule raises an issue when a <code>Serializable</code> class defines a non-transient, non-static field field whose type is a known serializable\nvalue-based class. Known serializable value-based classes are: all the classes in the <code>java.time</code> package except <code>Clock</code>; the\ndate classes for alternate calendars: <code>HijrahDate</code>, <code>JapaneseDate</code>, <code>MinguoDate</code>, <code>ThaiBuddhistDate</code>.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nclass MyClass implements Serializable {\n  private HijrahDate date;  // Noncompliant; mark this transient\n  // ...\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nclass MyClass implements Serializable {\n  private transient HijrahDate date;\n  // ...\n}\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/doc-files/ValueBased.html\">Value-based classes</a> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S3688",
            "repo": "java",
            "name": "Track uses of disallowed classes",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "INFO",
            "status": "READY",
            "isTemplate": true,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "className",
                    "htmlDesc": "Fully qualified name of the forbidden class. Use a regex to forbid a package.",
                    "type": "STRING"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "0min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "0min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S3688"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>This rule allows banning certain classes.</p>\n<h3>Noncompliant code example</h3>\n<p>Given parameters:</p>\n<ul>\n  <li> className:java.lang.String </li>\n</ul>\n<pre>\nString name;  // Noncompliant\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S5738",
            "repo": "java",
            "name": "\"@Deprecated\" code marked for removal should never be used",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "obsolete",
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5738"
                ]
            },
            "descriptionSections": [
                {
                    "key": "how_to_fix",
                    "content": "<p>Usage of deprecated classes, interfaces, and their methods explicitly marked for removal is discouraged. A developer should either migrate to\nalternative methods or refactor the code to avoid the deprecated ones.</p>\n\n<h4>Noncompliant code example</h4>\n<pre>\n/**\n * @deprecated As of release 1.3, replaced by {@link #Fee}. Will be dropped with release 1.4.\n */\n@Deprecated(forRemoval=true)\npublic class Foo { ... }\n\npublic class Bar {\n  /**\n   * @deprecated  As of release 1.7, replaced by {@link #doTheThingBetter()}\n   */\n  @Deprecated(forRemoval=true)\n  public void doTheThing() { ... }\n\n  public void doTheThingBetter() { ... }\n\n  /**\n   * @deprecated As of release 1.14 due to poor performances.\n   */\n  @Deprecated(forRemoval=false)\n  public void doTheOtherThing() { ... }\n}\n\npublic class Qix extends Bar {\n  @Override\n  public void doTheThing() { ... } // Noncompliant; don't override a deprecated method marked for removal\n}\n\npublic class Bar extends Foo {  // Noncompliant; Foo is deprecated and will be removed\n\n  public void myMethod() {\n    Bar bar = new Bar();  // okay; the class isn't deprecated\n    bar.doTheThing();  // Noncompliant; doTheThing method is deprecated and will be removed\n\n    bar.doTheOtherThing(); // Okay; deprecated, but not marked for removal\n  }\n}\n</pre>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>With the introduction of Java 9, the standard annotation class <code>java.lang.Deprecated</code> has been updated with new parameters. Notably, a\nboolean parameter <code>forRemoval</code> has been added to clearly signify whether the deprecated code is intended to be removed in the future. This\nis indicated with <code>forRemoval=true</code>. The javadoc of the annotation explicitly mentions the following:</p>\n<blockquote>\n  <p>This annotation type has a boolean-valued element <code>forRemoval</code>. A value of <code>true</code> indicates intent to remove the annotated\n  program element in a future version. A value of <code>false</code> indicates that use of the annotated program element is discouraged, but at the\n  time the program element was annotated, there was no specific intent to remove it.</p>\n</blockquote>\n<p>While it is generally recommended for developers to steer clear of using deprecated classes, interfaces, and their deprecated members, those\nalready marked for removal will surely block you from upgrading your dependency. Usage of deprecated code should be avoided or eliminated as soon as\npossible to prevent accumulation and allow a smooth upgrade of dependencies.</p>\n<p>The deprecated code is usually no longer maintained, can contain some bugs or vulnerabilities, and usually indicates that there is a better way to\ndo the same thing. Removing it can even lead to significant improvement of your software.</p>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/477\">CWE-477 - Use of Obsolete Functions</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/6TdGBQ\">CERT, MET02-J.</a> - Do not use deprecated or obsolete classes or methods </li>\n  <li> RSPEC-1874 for standard deprecation use </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "COMPLETE",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S5860",
            "repo": "java",
            "name": "Names of regular expressions named groups should be used",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "regex"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5860"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Why use named groups only to never use any of them later on in the code?</p>\n<p>This rule raises issues every time named groups are:</p>\n<ul>\n  <li> defined but never called anywhere in the code through their name; </li>\n  <li> defined but called elsewhere in the code by their number instead; </li>\n  <li> referenced while not defined. </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<pre>\nString date = \"01/02\";\n\nPattern datePattern = Pattern.compile(\"(?&lt;month&gt;[0-9]{2})/(?&lt;year&gt;[0-9]{2})\");\nMatcher dateMatcher = datePattern.matcher(date);\n\nif (dateMatcher.matches()) {\n  checkValidity(dateMatcher.group(1), dateMatcher.group(2));  // Noncompliant - numbers instead of names of groups are used\n  checkValidity(dateMatcher.group(\"day\")); // Noncompliant - there is no group called \"day\"\n}\n\n// ...\n\nString score = \"14:1\";\n\nPattern scorePattern = Pattern.compile(\"(?&lt;player1&gt;[0-9]+):(?&lt;player2&gt;[0-9]+)\"); // Noncompliant - named groups are never used\nMatcher scoreMatcher = scorePattern.matcher(score);\n\nif (scoreMatcher.matches()) {\n  checkScore(score);\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nString date = \"01/02\";\n\nPattern datePattern = Pattern.compile(\"(?&lt;month&gt;[0-9]{2})/(?&lt;year&gt;[0-9]{2})\");\nMatcher dateMatcher = datePattern.matcher(date);\n\nif (dateMatcher.matches()) {\n  checkValidity(dateMatcher.group(\"month\"), dateMatcher.group(\"year\"));\n}\n\n// ...\n\nString score = \"14:1\";\n\nPattern scorePattern = Pattern.compile(\"(?&lt;player1&gt;[0-9]+):(?&lt;player2&gt;[0-9]+)\");\nMatcher scoreMatcher = scorePattern.matcher(score);\n\nif (scoreMatcher.matches()) {\n  checkScore(scoreMatcher.group(\"player1\"));\n  checkScore(scoreMatcher.group(\"player2\"));\n}\n</pre>\n<p>Or, using dedicated variables instead of group names:</p>\n<pre>\nString score = \"14:1\";\n\nString player = \"([0-9]+)\";\nString gameScore = player + \":\" + player;\n\nPattern scorePattern = Pattern.compile(gameScore);\nMatcher scoreMatcher = scorePattern.matcher(score);\n\nif (scoreMatcher.matches()) {\n  checkScore(score);\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S5866",
            "repo": "java",
            "name": "Case insensitive Unicode regular expressions should enable the \"UNICODE_CASE\" flag",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "regex"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "3min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "3min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5866"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>By default case insensitivity only affects letters in the ASCII range. This can be changed by either passing <code>Pattern.UNICODE_CASE</code> or\n<code>Pattern.UNICODE_CHARACTER_CLASS</code> as an argument to <code>Pattern.compile</code> or using <code>(?u)</code> or <code>(?U)</code> within the\nregex.</p>\n<p>If not done, regular expressions involving non-ASCII letters will still handle those letters as being case sensitive.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nPattern.compile(\"söme pättern\", Pattern.CASE_INSENSITIVE);\nstr.matches(\"(?i)söme pättern\");\nstr.matches(\"(?i:söme) pättern\");\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nPattern.compile(\"söme pättern\", Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\nstr.matches(\"(?iu)söme pättern\");\nstr.matches(\"(?iu:söme) pättern\");\n\n// UNICODE_CHARACTER_CLASS implies UNICODE_CASE\nPattern.compile(\"söme pättern\", Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CHARACTER_CLASS);\nstr.matches(\"(?iU)söme pättern\");\nstr.matches(\"(?iU:söme) pättern\");\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S5867",
            "repo": "java",
            "name": "Unicode-aware versions of character classes should be preferred",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "regex"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5867"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>When using POSIX classes like <code>\\p{Alpha}</code> without the <code>UNICODE_CHARACTER_CLASS</code> flag or when using hard-coded character\nclasses like <code>\"[a-zA-Z]\"</code>, letters outside of the ASCII range, such as umlauts, accented letters or letter from non-Latin languages, won’t\nbe matched. This may cause code to incorrectly handle input containing such letters.</p>\n<p>To correctly handle non-ASCII input, it is recommended to use Unicode classes like <code>\\p{IsAlphabetic}</code>. When using POSIX classes, Unicode\nsupport should be enabled by either passing <code>Pattern.UNICODE_CHARACTER_CLASS</code> as a flag to <code>Pattern.compile</code> or by using\n<code>(?U)</code> inside the regex.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nPattern.compile(\"[a-zA-Z]\");\nPattern.compile(\"\\\\p{Alpha}\");\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nPattern.compile(\"\\\\p{IsAlphabetic}\"); // matches all letters from all languages\nPattern.compile(\"\\\\p{IsLatin}\"); // matches latin letters, including umlauts and other non-ASCII variations\nPattern.compile(\"\\\\p{Alpha}\", Pattern.UNICODE_CHARACTER_CLASS);\nPattern.compile(\"(?U)\\\\p{Alpha}\");\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S6830",
            "repo": "java",
            "name": "Bean names should adhere to the naming conventions",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "spring"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S6830"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> Spring Framework Documentation - <a href=\"https://docs.spring.io/spring-framework/reference/core/beans/definition.html#beans-beanname\">3.3 Bean\n  overview</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> Java Guides - <a href=\"https://www.javaguides.net/2019/03/spring-boot-best-practices.html\">Spring Boot Best Practices</a> </li>\n</ul>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>Change the bean’s name to adhere to the naming conventions. Names should be camel-cased and start with a lowercase letter, for example,\n<code>myBean</code>.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@Bean(name = \"MyBean\") // Noncompliant, the first letter of the name should be lowercase\npublic MyBean myBean() {\n    ...\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@Bean(name = \"myBean\") // Compliant\npublic MyBean myBean() {\n    ...\n</pre>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\n@Service(\"my_service\") // Noncompliant, the name should be camel-cased\npublic class MyService {\n    ...\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\n@Service(\"myService\") // Compliant\npublic class MyService {\n    ...\n</pre>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Consistent naming of beans is important for the readability and maintainability of the code. More precisely, according to the Spring\ndocumentation:</p>\n<pre>\nNaming beans consistently makes your configuration easier to read and understand. Also, if you use Spring AOP, it helps a lot when applying advice to a set of beans related by name.\n</pre>\n<p>Not following accepted conventions can introduce inconsistent naming, especially when multiple developers work on the same project, leading to\ntechnical debt.</p>\n<p>The spring documentation establishes a naming convention that consists of camel-cased names with a leading lowercase letter.</p>\n<p>This rule raises an issue when a bean name defined in one of the following annotations does not adhere to the naming convention:</p>\n<ul>\n  <li> <code>@Bean</code> </li>\n  <li> <code>@Configuration</code> </li>\n  <li> <code>@Controller</code> </li>\n  <li> <code>@Component</code> </li>\n  <li> <code>@Qualifier</code> </li>\n  <li> <code>@Repository</code> </li>\n  <li> <code>@Service</code> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "IDENTIFIABLE",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S6832",
            "repo": "java",
            "name": "Non-singleton Spring beans should not be injected into singleton beans",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "spring"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S6832"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>In Spring, singleton beans and their dependencies are initialized when the application context is created.</p>\n<p>If a <code>Singleton</code> bean depends on a bean with a shorter-lived scope (like <code>Request</code> or <code>Session</code> beans), it retains\nthe same instance of that bean, even when new instances are created for each Request or Session. This mismatch can cause unexpected behavior and bugs,\nas the Singleton bean doesn’t interact correctly with the new instances of the shorter-lived bean.</p>\n<p>This rule raises an issue when non-singleton beans are injected into a singleton bean.</p>\n<h3>What is the potential impact?</h3>\n<p>When a <code>Singleton</code> bean has a dependency on a bean with a shorter-lived scope, it can lead to the following issues:</p>\n<ul>\n  <li> <strong>Data inconsistency</strong>: any state change in the shorter-lived bean will not be reflected in the Singleton bean. </li>\n  <li> <strong>Incorrect behavior</strong>: using the same instance of the shorter-lived bean, when a new instance is supposed to be created for each\n  new request or session. </li>\n  <li> <strong>Memory leaks</strong>: preventing garbage collection of a shorter-lived bean that allocates a significant amount of data over time.\n  </li>\n</ul>"
                },
                {
                    "key": "introduction",
                    "content": "<p>In Spring the scope of a bean defines the lifecycle and visibility of that bean in the Spring container. There are six scopes:</p>\n<ul>\n  <li> <strong>Singleton</strong>: default, one instance per Spring container </li>\n  <li> <strong>Prototype</strong>: a new instance per bean request </li>\n  <li> <strong>Request</strong>: a new instance per HTTP request </li>\n  <li> <strong>Session</strong>: a new instance per HTTP session </li>\n  <li> <strong>Application</strong>: a new instance per ServletContext </li>\n  <li> <strong>Websocket</strong>: a new instance per Websocket session </li>\n</ul>\n<p>The last four scopes mentioned, request, session, application and websocket, are only available in a web-aware application.</p>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>Inject a shorter-lived bean into a <code>Singleton</code> bean using <strong>ApplicationContext</strong>, <strong>Factories</strong> or\n<strong>Providers</strong>.</p>\n\n<h4>Noncompliant code example</h4>\n<p>When a <code>Singleton</code> bean auto-wires a <code>Request</code> bean, the dependency is resolved at instantiation time and thus the same\ninstance is used for each HTTP request.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@Component\n@Scope(value = WebApplicationContext.SCOPE_REQUEST, proxyMode = ScopedProxyMode.TARGET_CLASS)\npublic class RequestBean {\n    //...\n}\n\npublic class SingletonBean {\n    @Autowired\n    private final RequestBean requestBean; // Noncompliant, the same instance of RequestBean is used for each HTTP request.\n\n    public RequestBean getRequestBean() {\n        return requestBean;\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<p>Instead, use a <code>ObjectFactory&lt;RequestBean&gt;</code>, <code>ObjectProvider&lt;RequestBean&gt;</code>, or\n<code>Provider&lt;RequestBean&gt;</code> as injection point (as for <a\nhref=\"https://docs.spring.io/spring-framework/reference/core/beans/standard-annotations.html#beans-inject-named\">JSR-330</a>).</p>\n<p>Such a dependency is resolved at runtime, allowing for actual injection of a new instance of the shorter-lived bean on each HTTP request.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@Component\n@Scope(value = WebApplicationContext.SCOPE_REQUEST, proxyMode = ScopedProxyMode.TARGET_CLASS)\npublic class RequestBean {\n    //...\n}\n\npublic class SingletonBean {\n    private final ObjectFactory&lt;RequestBean&gt; requestBeanFactory;\n\n    @Autowired\n    public SingletonBean(ObjectFactory&lt;RequestBean&gt; requestBeanFactory) {\n        this.requestBeanFactory = requestBeanFactory;\n    }\n\n    public RequestBean getRequestBean() {\n        return requestBeanFactory.getObject();\n    }\n}\n</pre>\n<h4>Noncompliant code example</h4>\n<p>When a <code>Singleton</code> bean auto-wires a <code>Prototype</code> bean, the dependency is resolved at instantiation time and thus the same\ninstance is used for each bean request.</p>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\n@Component\n@Scope(\"prototype\")\npublic class PrototypeBean {\n    public Object execute() {\n      //...\n    }\n}\n\npublic class SingletonBean {\n    private PrototypeBean prototypeBean;\n\n    @Autowired\n    public SingletonBean(PrototypeBean prototypeBean) { // Noncompliant, the same instance of PrototypeBean is used for each bean request.\n      this.prototypeBean = prototypeBean;\n    }\n\n    public Object process() {\n        return prototypeBean.execute();\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<p>Using the <code>ApplicationContext</code> to retrieve a new instance of a <code>Prototype</code> bean on each bean request.</p>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\n@Component\n@Scope(\"prototype\")\npublic class PrototypeBean {\n    public Object execute() {\n      //...\n    }\n}\n\npublic class SingletonBean implements ApplicationContextAware {\n    private ApplicationContext applicationContext;\n\n    @Autowired\n    public SingletonBean(ApplicationContext applicationContext) {\n      this.applicationContext = applicationContext;\n    }\n\n    public Object process() {\n        PrototypeBean prototypeBean = createPrototypeBean();\n        return prototypeBean.execute();\n    }\n\n    protected PrototypeBean createPrototypeBean() {\n        return this.applicationContext.getBean(\"prototypeBean\", PrototypeBean.class);\n    }\n}\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> Spring Framework - <a href=\"https://docs.spring.io/spring-framework/reference/core/beans/factory-scopes.html\">Factory Scopes</a> </li>\n  <li> Spring Framework - <a href=\"https://docs.spring.io/spring-framework/reference/core/beans/standard-annotations.html#beans-inject-named\">Beans\n  Inject Named</a> </li>\n  <li> Spring Framework - <a href=\"https://docs.spring.io/spring-framework/reference/core/beans/dependencies/factory-method-injection.html\">Method\n  Injection</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> Baeldung - <a href=\"https://www.baeldung.com/spring-bean-scopes\">Spring Bean Scopes</a> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S6833",
            "repo": "java",
            "name": "\"@Controller\" should be replaced with \"@RestController\"",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "spring"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S6833"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Classes annotated as <code>@Controller</code> in Spring are responsible for handling incoming web requests. When annotating methods or the entire\ncontroller with <code>@ResponseBody</code>, the return value of said methods will be serialized and set as the response body. In other words, it tells\nthe Spring framework that this method does not produce a view. This mechanism is commonly used to create API endpoints.</p>\n<p>Spring provides <code>@RestController</code> as a convenient annotation to replace the combination of <code>@Controller</code> and\n<code>@ResponseBody</code>. The two are functionally identical, so the single annotation approach is preferred.</p>\n<p>This rule will raise an issue on a class that is annotated with <code>@Controller</code> if:</p>\n<ul>\n  <li> the class is also annotated with <code>@ResponseBody</code> or </li>\n  <li> all methods in said class are annotated with <code>@ResponseBody</code>. </li>\n</ul>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> Spring Guides - <a href=\"https://spring.io/guides/gs/rest-service/\">Building a RESTful Web Service</a> </li>\n  <li> Baeldung - <a href=\"https://www.baeldung.com/spring-controller-vs-restcontroller\">The Spring @Controller and @RestController Annotations</a>\n  </li>\n  <li> Baeldung - <a href=\"https://www.baeldung.com/spring-request-response-body\">Spring’s RequestBody and ResponseBody Annotations</a> </li>\n</ul>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>Replace the <code>@Controller</code> annotation with the <code>@RestController</code> annotation and remove all <code>@ResponseBody</code>\nannotations from the class and its methods.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@Controller\n@ResponseBody\npublic class MyController {\n    @GetMapping(\"/hello\")\n    public String hello() {\n        return \"Hello World!\";\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@RestController\npublic class MyController {\n    @GetMapping(\"/hello\")\n    public String hello() {\n        return \"Hello World!\";\n    }\n}\n</pre>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\n@Controller\npublic class MyController {\n    @ResponseBody\n    @GetMapping(\"/hello\")\n    public String hello() {\n        return \"Hello World!\";\n    }\n\n    @ResponseBody\n    @GetMapping(\"/foo\")\n    public String foo() {\n        return \"Foo\";\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\n@RestController\npublic class MyController {\n    @GetMapping(\"/hello\")\n    public String hello() {\n        return \"Hello World!\";\n    }\n\n    @GetMapping(\"/foo\")\n    public String foo() {\n        return \"Foo\";\n    }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S864",
            "repo": "java",
            "name": "Limited dependence should be placed on operator precedence",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S864"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/YdYxBQ\">CERT, EXP00-C.</a> - Use parentheses for precedence of operation </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/ZzZGBQ\">CERT, EXP53-J.</a> - Use parentheses for precedence of operation </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/783\">CWE-783 - Operator Precedence Logic Error</a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>The rules of operator precedence are complicated and can lead to errors. For this reason, parentheses should be used for clarification in complex\nstatements. However, this does not mean that parentheses should be gratuitously added around every operation.</p>\n<p>This rule raises issues when <code>&amp;&amp;</code> and <code>||</code> are used in combination, when assignment and equality or relational\noperators are used together in a condition, and for other operator combinations according to the following table:</p>\n<table>\n  <colgroup>\n    <col style=\"width: 16.6666%;\">\n    <col style=\"width: 16.6666%;\">\n    <col style=\"width: 16.6666%;\">\n    <col style=\"width: 16.6666%;\">\n    <col style=\"width: 16.6666%;\">\n    <col style=\"width: 16.667%;\">\n  </colgroup>\n  <thead>\n    <tr>\n      <th></th>\n      <th><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code></th>\n      <th><code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code></th>\n      <th><code>&amp;</code></th>\n      <th><code>^</code></th>\n      <th><code>|</code></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><p><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code></p></td>\n      <td></td>\n      <td><p>x</p></td>\n      <td><p>x</p></td>\n      <td><p>x</p></td>\n      <td><p>x</p></td>\n    </tr>\n    <tr>\n      <td><p><code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code></p></td>\n      <td><p>x</p></td>\n      <td></td>\n      <td><p>x</p></td>\n      <td><p>x</p></td>\n      <td><p>x</p></td>\n    </tr>\n    <tr>\n      <td><p><code>&amp;</code></p></td>\n      <td><p>x</p></td>\n      <td><p>x</p></td>\n      <td></td>\n      <td><p>x</p></td>\n      <td><p>x</p></td>\n    </tr>\n    <tr>\n      <td><p><code>^</code></p></td>\n      <td><p>x</p></td>\n      <td><p>x</p></td>\n      <td><p>x</p></td>\n      <td></td>\n      <td><p>x</p></td>\n    </tr>\n    <tr>\n      <td><p><code>|</code></p></td>\n      <td><p>x</p></td>\n      <td><p>x</p></td>\n      <td><p>x</p></td>\n      <td><p>x</p></td>\n      <td></td>\n    </tr>\n  </tbody>\n</table>\n<p>This rule also raises an issue when the \"true\" or \"false\" expression of a ternary operator is not trivial and not wrapped inside parentheses.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nx = a + b - c;\nx = a + 1 &lt;&lt; b;  // Noncompliant\ny = a == b ? a * 2 : a + b;  // Noncompliant\n\nif ( a &gt; b || c &lt; d || a == d) {...}\nif ( a &gt; b &amp;&amp; c &lt; d || a == b) {...}  // Noncompliant\nif (a = f(b,c) == 1) { ... } // Noncompliant; == evaluated first\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nx = a + b - c;\nx = (a + 1) &lt;&lt; b;\ny = a == b ? (a * 2) : (a + b);\n\nif ( a &gt; b || c &lt; d || a == d) {...}\nif ( (a &gt; b &amp;&amp; c &lt; d) || a == b) {...}\nif ( (a = f(b,c)) == 1) { ... }\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S1114",
            "repo": "java",
            "name": "\"super.finalize()\" should be called at the end of \"Object.finalize()\" implementations",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "DEPRECATED",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:ObjectFinalizeOverridenCallsSuperFinalizeCheck"
                ]
            },
            "descriptionSections": [
                {
                    "key": "introduction",
                    "content": "<p>This rule is deprecated, and will eventually be removed.</p>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/568\">CWE-568 - finalize() Method Without super.finalize()</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/4jZGBQ\">CERT, MET12-J.</a> - Do not use finalizers </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Overriding the <code>Object.finalize()</code> method must be done with caution to dispose some system resources.</p>\n<p>Calling the <code>super.finalize()</code> at the end of this method implementation is highly recommended in case parent implementations must also\ndispose some system resources.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nprotected void finalize() {   // Noncompliant; no call to super.finalize();\n  releaseSomeResources();\n}\n\nprotected void finalize() {\n  super.finalize();  // Noncompliant; this call should come last\n  releaseSomeResources();\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nprotected void finalize() {\n  releaseSomeResources();\n  super.finalize();\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S1141",
            "repo": "java",
            "name": "Try-catch blocks should not be nested",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "error-handling",
                "confusing"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1141"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Nesting <code>try</code>/<code>catch</code> blocks severely impacts the readability of source code because it makes it too difficult to understand\nwhich block will catch which exception.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S1149",
            "repo": "java",
            "name": "Synchronized classes \"Vector\", \"Hashtable\", \"Stack\" and \"StringBuffer\" should not be used",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "performance"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1149"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Early classes of the Java API, such as <code>Vector</code>, <code>Hashtable</code> and <code>StringBuffer</code>, were synchronized to make them\nthread-safe. However, synchronization has a significant negative impact on performance, even when using these collections from a single thread.</p>\n<p>It is often best to use their non-synchronized counterparts:</p>\n<ul>\n  <li> <code>ArrayList</code> or <code>LinkedList</code> instead of <code>Vector</code> </li>\n  <li> <code>Deque</code> instead of <code>Stack</code> </li>\n  <li> <code>HashMap</code> instead of <code>Hashtable</code> </li>\n  <li> <code>StringBuilder</code> instead of <code>StringBuffer</code> </li>\n</ul>\n<p>Even when used in synchronized contexts, you should think twice before using their synchronized counterparts, since their usage can be costly. If\nyou are confident the usage is legitimate, you can safely ignore this warning.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nVector&lt;Cat&gt; cats = new Vector&lt;&gt;();\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nArrayList&lt;Cat&gt; cats = new ArrayList&lt;&gt;();\n</pre>\n<h3>Exceptions</h3>\n<p>Usage of these synchronized classes is ignored in the signatures of overriding methods.</p>\n<pre>\n@Override\npublic Vector getCats() {...} // Compliant\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S1598",
            "repo": "java",
            "name": "Package declaration should match source file directory",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1598"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://www.baeldung.com/java-declared-expected-package-error\">Baeldung - Fixing the \"Declared package does not match the expected\n  package\" Error</a> </li>\n  <li> <a href=\"https://www.baeldung.com/java-file-vs-file-path-separator\">Stackoverflow - Why do java source files require package declarations?</a>\n  </li>\n  <li> <a\n  href=\"https://www.tutorialspoint.com/what-are-the-best-practices-to-keep-in-mind-while-using-packages-in-java#:~:text=Naming%20conventions%20and%20best%20practices%20for%20packages\">tutorialspoint - What are the best practices to keep in mind while using packages in Java?</a> </li>\n</ul>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>Either move the source file so that the relative file path within the source directory matches the package name, or change the package name so that\nit matches the relative file path.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n// file: src/main/foo/Fubar.java\npackage com.foo.bar;\n\nclass Fubar {\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n// file: src/main/com/foo/bar/Fubar.java\npackage com.foo.bar;\n\nclass Fubar {\n}\n</pre>\n<pre>\n// file: src/main/foo/Fubar.java\npackage foo;\n\nclass Fubar {\n}\n</pre>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>The purpose of Java packages is to give structure to your project. A structure helps to mentally break down a project into smaller parts,\nsimplifying readers' understanding of how components are connected and how they interact.</p>\n<p>By convention, the source files' directory structure should replicate the project’s package structure. This is for the following reasons:</p>\n<ol>\n  <li> The mapping between the package name and the location of the source file of a class is straightforward. That is, the path to the source file is\n  easier to find for a given fully qualified class name. </li>\n  <li> If two different structures are applied to the same project - one to the packages but another to the source file directories - this confuses\n  developers while not providing any benefit. </li>\n  <li> The directory structure of the class files generated by the compiler will match the package structure, no matter the source file’s directory.\n  It would not make sense to have one directory structure for the generated class files but a different one for the associated source files. </li>\n</ol>\n<p>Similarly, a source directory should not have the character <code>.</code> in its name, as this would make it impossible to match the directory to\nthe package structure.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S2110",
            "repo": "java",
            "name": "Invalid \"Date\" values should not be used",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2110"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Whether the valid value ranges for <code>Date</code> fields start with 0 or 1 varies by field. For instance, month starts at 0, and day of month\nstarts at 1. Enter a date value that goes past the end of the valid range, and the date will roll without error or exception. For instance, enter 12\nfor month, and you’ll get January of the following year.</p>\n<p>This rule checks for bad values used in conjunction with <code>java.util.Date</code>, <code>java.sql.Date</code>, and\n<code>java.util.Calendar</code>. Specifically, values outside of the valid ranges:</p>\n<table>\n  <colgroup>\n    <col style=\"width: 50%;\">\n    <col style=\"width: 50%;\">\n  </colgroup>\n  <thead>\n    <tr>\n      <th>Field</th>\n      <th>Valid</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><p>month</p></td>\n      <td><p>0-11</p></td>\n    </tr>\n    <tr>\n      <td><p>date (day)</p></td>\n      <td><p>0-31</p></td>\n    </tr>\n    <tr>\n      <td><p>hour</p></td>\n      <td><p>0-23</p></td>\n    </tr>\n    <tr>\n      <td><p>minute</p></td>\n      <td><p>0-60</p></td>\n    </tr>\n    <tr>\n      <td><p>second</p></td>\n      <td><p>0-61</p></td>\n    </tr>\n  </tbody>\n</table>\n<p>Note that this rule does not check for invalid leap years, leap seconds (second = 61), or invalid uses of the 31st day of the month.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nDate d = new Date();\nd.setDate(25);\nd.setYear(2014);\nd.setMonth(12);  // Noncompliant; rolls d into the next year\n\nCalendar c = new GregorianCalendar(2014, 12, 25);  // Noncompliant\nif (c.get(Calendar.MONTH) == 12) {  // Noncompliant; invalid comparison\n  // ...\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nDate d = new Date();\nd.setDate(25);\nd.setYear(2014);\nd.setMonth(11);\n\nCalendar c = new Gregorian Calendar(2014, 11, 25);\nif (c.get(Calendar.MONTH) == 11) {\n  // ...\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S2118",
            "repo": "java",
            "name": "\"writeObject\" argument must implement \"Serializable\"",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "serialization"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2118"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/io/Serializable.html\">Oracle Java SE - Serializable</a> </li>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/io/ObjectOutputStream.html\">Oracle Java SE - ObjectOutputStream</a>\n  </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Serialization is a platform-independent mechanism for writing the state of an object into a byte-stream. For serializing the object, we call the\n<code>writeObject()</code> method of <code>java.io.ObjectOutputStream</code> class. Only classes that implement <code>Serializable</code> or extend a\nclass that does it can successfully be serialized (or de-serialized).</p>\n<p>Attempting to write a class with the <code>writeObject</code> method of the <code>ObjectOutputStream</code> class that does not implement\n<code>Serializable</code> or extends a class that implements it, will throw an <code>IOException</code>.</p>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>The object class passed as an argument to the <code>writeObject</code> must implement <code>Serializable</code>.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class Vegetable {\n  // ...\n}\n\npublic class Menu {\n  public void meal(ObjectOutputStream oos) throws IOException {\n    Vegetable veg = new Vegetable();\n    oos.writeObject(veg);  // Noncompliant\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class Vegetable implements Serializable {\n  // ...\n}\n\npublic class Menu {\n  public void meal(ObjectOutputStream oos) throws IOException {\n    Vegetable veg = new Vegetable();\n    oos.writeObject(veg);\n  }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S2119",
            "repo": "java",
            "name": "\"Random\" objects should be reused",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2119"
                ]
            },
            "descriptionSections": [
                {
                    "key": "how_to_fix",
                    "content": "<p>Define and reuse the <code>Random</code> object.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass MyClass {\n\n    public void doSomethingCommon() {\n      Random random = new Random();        // Noncompliant - new instance created with each invocation\n      int rValue = random.nextInt();\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass MyClass {\n    private Random random = new Random();  // Compliant\n\n    public void doSomethingCommon() {\n      int rValue = this.random.nextInt();\n    }\n}\n</pre>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Creating a new <code>Random</code> object each time a random value is needed is inefficient and may produce numbers that are not random, depending\non the JDK. For better efficiency and randomness, create a single <code>Random</code>, store it, and reuse it.</p>\n<p>The <code>Random()</code> constructor tries to set the seed with a distinct value every time. However, there is no guarantee that the seed will be\nrandomly or uniformly distributed. Some JDK will use the current time as seed, making the generated numbers not random.</p>\n<p>This rule finds cases where a new <code>Random</code> is created each time a method is invoked.</p>\n<h3>Exceptions</h3>\n<p>This rule doesn’t apply to classes that use a <code>Random</code> in their constructors or the static <code>main</code> function and nowhere\nelse.</p>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/util/Random.html\">Oracle Java SE - Random</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> <a href=\"https://www.baeldung.com/java-generating-random-numbers\">Baeldung - generating random number</a> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "COMPLETE",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S2203",
            "repo": "java",
            "name": "\"collect\" should be used with \"Streams\" instead of \"list::add\"",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "java8"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2203"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>While you can use either <code>forEach(list::add)</code> or <code>collect</code> with a <code>Stream</code>, <code>collect</code> is by far the\nbetter choice because it’s automatically thread-safe and parallellizable.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nList&lt;String&gt; bookNames = new ArrayList&lt;&gt;();\nbooks.stream().filter(book -&gt; book.getIsbn().startsWith(\"0\"))\n                .map(Book::getTitle)\n                .forEach(bookNames::add);  // Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nList&lt;String&gt; bookNames = books.stream().filter(book -&gt; book.getIsbn().startsWith(\"0\"))\n                .map(Book::getTitle)\n                .collect(Collectors.toList());\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S2325",
            "repo": "java",
            "name": "\"private\" and \"final\" methods that don't access instance data should be \"static\"",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2325"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Non-overridable methods (<code>private</code> or <code>final</code>) that don’t access instance data can be <code>static</code> to prevent any\nmisunderstanding about the contract of the method.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nclass Utilities {\n  private static String magicWord = \"magic\";\n\n  private String getMagicWord() { // Noncompliant\n    return magicWord;\n  }\n\n  private void setMagicWord(String value) { // Noncompliant\n    magicWord = value;\n  }\n\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nclass Utilities {\n  private static String magicWord = \"magic\";\n\n  private static String getMagicWord() {\n    return magicWord;\n  }\n\n  private static void setMagicWord(String value) {\n    magicWord = value;\n  }\n\n}\n</pre>\n<h3>Exceptions</h3>\n<p>When <code>java.io.Serializable</code> is implemented the following three methods are excluded by the rule:</p>\n<ul>\n  <li> <code>private void writeObject(java.io.ObjectOutputStream out) throws IOException;</code> </li>\n  <li> <code>private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException;</code> </li>\n  <li> <code>private void readObjectNoData() throws ObjectStreamException;</code> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S2445",
            "repo": "java",
            "name": "Blocks should be synchronized on \"private final\" fields",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "multi-threading",
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2445"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/412\">CWE-412 - Unrestricted Externally Accessible Lock</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/413\">CWE-413 - Improper Resource Locking</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/djdGBQ\">CERT, LCK00-J.</a> - Use private final lock objects to synchronize classes that may\n  interact with untrusted code </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Synchronizing on a class field synchronizes not on the field itself, but on the object assigned to it. So synchronizing on a non-<code>final</code>\nfield makes it possible for the field’s value to change while a thread is in a block synchronized on the old value. That would allow a second thread,\nsynchronized on the new value, to enter the block at the same time.</p>\n<p>The story is very similar for synchronizing on parameters; two different threads running the method in parallel could pass two different object\ninstances in to the method as parameters, completely undermining the synchronization.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nprivate String color = \"red\";\n\nprivate void doSomething(){\n  synchronized(color) {  // Noncompliant; lock is actually on object instance \"red\" referred to by the color variable\n    //...\n    color = \"green\"; // other threads now allowed into this block\n    // ...\n  }\n  synchronized(new Object()) { // Noncompliant this is a no-op.\n     // ...\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nprivate String color = \"red\";\nprivate final Object lockObj = new Object();\n\nprivate void doSomething(){\n  synchronized(lockObj) {\n    //...\n    color = \"green\";\n    // ...\n  }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "COMPLETE",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S2446",
            "repo": "java",
            "name": "\"notifyAll()\" should be preferred over \"notify()\"",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "multi-threading",
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2446"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p><code>notify</code> and <code>notifyAll</code> both wake up sleeping threads waiting on the object’s monitor, but <code>notify</code> only wakes up\none single thread, while <code>notifyAll</code> wakes them all up. Unless you do not care which specific thread is woken up, <code>notifyAll</code>\nshould be used instead.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass MyThread implements Runnable {\n  Object lock = new Object();\n\n  @Override\n  public void run() {\n    synchronized(lock) {\n      // ...\n      lock.notify();  // Noncompliant\n    }\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass MyThread implements Runnable {\n  Object lock = new Object();\n\n  @Override\n  public void run() {\n    synchronized(lock) {\n      // ...\n      lock.notifyAll();\n    }\n  }\n}\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/MTdGBQ\">CERT, THI02-J.</a> - Notify all waiting threads rather than a single thread </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "COMPLETE",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S3329",
            "repo": "java",
            "name": "Cipher Block Chaining IVs should be unpredictable",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "VULNERABILITY",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S3329"
                ]
            },
            "descriptionSections": [
                {
                    "key": "introduction",
                    "content": "<p>This vulnerability exposes encrypted data to a number of attacks whose goal is to recover the plaintext.</p>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">Top 10 2021 Category A2 - Cryptographic Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/329\">CWE-329 - Not Using an Unpredictable IV with CBC Mode</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/780\">CWE-780 - Use of RSA Algorithm without OAEP</a> </li>\n  <li> <a href=\"https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38a.pdf\">NIST, SP-800-38A</a> - Recommendation for Block Cipher\n  Modes of Operation </li>\n  <li> OWASP - <a href=\"https://mas.owasp.org/checklists/MASVS-CRYPTO/\">Mobile AppSec Verification Standard - Cryptography Requirements</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2016-risks/m5-insufficient-cryptography\">Mobile Top 10 2016 Category M5 -\n  Insufficient Cryptography</a> </li>\n</ul>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport java.nio.charset.StandardCharsets;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.InvalidKeyException;\nimport java.security.InvalidAlgorithmParameterException;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\nimport javax.crypto.NoSuchPaddingException;\n\npublic void encrypt(String key, String plainText) {\n\n    byte[] RandomBytes = \"7cVgr5cbdCZVw5WY\".getBytes(StandardCharsets.UTF_8);\n\n    IvParameterSpec iv   = new IvParameterSpec(RandomBytes);\n    SecretKeySpec keySpec = new SecretKeySpec(key.getBytes(StandardCharsets.UTF_8), \"AES\");\n\n    try {\n        Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE, keySpec, iv);\n\n    } catch(NoSuchAlgorithmException|InvalidKeyException|\n            NoSuchPaddingException|InvalidAlgorithmParameterException e) {\n        // ...\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<p>In this example, the code explicitly uses a number generator that is considered <strong>strong</strong>.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport java.nio.charset.StandardCharsets;\nimport java.security.SecureRandom;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.InvalidKeyException;\nimport java.security.InvalidAlgorithmParameterException;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\nimport javax.crypto.NoSuchPaddingException;\n\npublic void encrypt(String key, String plainText) {\n\n    SecureRandom random = new SecureRandom();\n    byte[] randomBytes  = new byte[128];\n    random.nextBytes(randomBytes);\n\n    IvParameterSpec iv   = new IvParameterSpec(randomBytes);\n    SecretKeySpec keySpec = new SecretKeySpec(key.getBytes(StandardCharsets.UTF_8), \"AES\");\n\n    try {\n        Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE, keySpec, iv);\n\n    } catch(NoSuchAlgorithmException|InvalidKeyException|\n            NoSuchPaddingException|InvalidAlgorithmParameterException e) {\n        // ...\n    }\n}\n</pre>\n<h3>How does this work?</h3>\n<h4>Use unique IVs</h4>\n<p>To ensure high security, initialization vectors must meet two important criteria:</p>\n<ul>\n  <li> IVs must be unique for each encryption operation. </li>\n  <li> For CBC and CFB modes, a secure FIPS-compliant random number generator should be used to generate unpredictable IVs. </li>\n</ul>\n<p>The IV does not need be secret, so the IV or information sufficient to determine the IV may be transmitted along with the ciphertext.</p>\n<p>In the previous non-compliant example, the problem is not that the IV is hard-coded.<br> It is that the same IV is used for multiple encryption\nattempts.</p>",
                    "context": {
                        "displayName": "Java Cryptography Extension",
                        "key": "java_cryptography_extension"
                    }
                },
                {
                    "key": "root_cause",
                    "content": "<p>Encryption algorithms are essential for protecting sensitive information and ensuring secure communications in a variety of domains. They are used\nfor several important reasons:</p>\n<ul>\n  <li> Confidentiality, privacy, and intellectual property protection </li>\n  <li> Security during transmission or on storage devices </li>\n  <li> Data integrity, general trust, and authentication </li>\n</ul>\n<p>When selecting encryption algorithms, tools, or combinations, you should also consider two things:</p>\n<ol>\n  <li> No encryption is unbreakable. </li>\n  <li> The strength of an encryption algorithm is usually measured by the effort required to crack it within a reasonable time frame. </li>\n</ol>\n<p>In the mode Cipher Block Chaining (CBC), each block is used as cryptographic input for the next block. For this reason, the first block requires an\ninitialization vector (IV), also called a \"starting variable\" (SV).</p>\n<p>If the same IV is used for multiple encryption sessions or messages, each new encryption of the same plaintext input would always produce the same\nciphertext output. This may allow an attacker to detect patterns in the ciphertext.</p>\n<h3>What is the potential impact?</h3>\n<p>After retrieving encrypted data and performing cryptographic attacks on it on a given timeframe, attackers can recover the plaintext that\nencryption was supposed to protect.</p>\n<p>Depending on the recovered data, the impact may vary.</p>\n<p>Below are some real-world scenarios that illustrate the potential impact of an attacker exploiting the vulnerability.</p>\n<h4>Additional attack surface</h4>\n<p>By modifying the plaintext of the encrypted message, an attacker may be able to trigger additional vulnerabilities in the code. An attacker can\nfurther exploit a system to obtain more information.<br> Encrypted values are often considered trustworthy because it would not be possible for a\nthird party to modify them under normal circumstances.</p>\n<h4>Breach of confidentiality and privacy</h4>\n<p>When encrypted data contains personal or sensitive information, its retrieval by an attacker can lead to privacy violations, identity theft,\nfinancial loss, reputational damage, or unauthorized access to confidential systems.</p>\n<p>In this scenario, a company, its employees, users, and partners could be seriously affected.</p>\n<p>The impact is twofold, as data breaches and exposure of encrypted data can undermine trust in the organization, as customers, clients and\nstakeholders may lose confidence in the organization’s ability to protect their sensitive data.</p>\n<h4>Legal and compliance issues</h4>\n<p>In many industries and locations, there are legal and compliance requirements to protect sensitive data. If encrypted data is compromised and the\nplaintext can be recovered, companies face legal consequences, penalties, or violations of privacy laws.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "TRUSTWORTHY",
            "cleanCodeAttributeCategory": "RESPONSIBLE",
            "impacts": [
                {
                    "softwareQuality": "SECURITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S3414",
            "repo": "java",
            "name": "Tests should be kept in a dedicated source directory",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "tests",
                "suspicious"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S3414"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>It is a good practice to isolate test classes in a separate package so that what is shipped to production is neither polluted by nor bloated with\nthem. Further, including unit tests in code assemblies could affect build processes.</p>\n<p>This rule raises an issue when test classes are found in projects containing non-test-related code.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "MODULAR",
            "cleanCodeAttributeCategory": "ADAPTABLE",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S3655",
            "repo": "java",
            "name": "Optional value should only be accessed after calling isPresent()",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "symbolic-execution"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/476\">CWE-476 - NULL Pointer Dereference</a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p><code>Optional</code> value can hold either a value or not. The value held in the <code>Optional</code> can be accessed using the\n<code>get()</code> method, but it will throw a</p>\n<p><code>NoSuchElementException</code> if there is no value present. To avoid the exception, calling the <code>isPresent()</code> or <code>!\nisEmpty()</code> method should always be done before any call to <code>get()</code>.</p>\n<p>Alternatively, note that other methods such as <code>orElse(...)</code>, <code>orElseGet(...)</code> or <code>orElseThrow(...)</code> can be used\nto specify what to do with an empty <code>Optional</code>.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nOptional&lt;String&gt; value = this.getOptionalValue();\n\n// ...\n\nString stringValue = value.get(); // Noncompliant\n</pre>\n<pre>\nif (methodThatReturnsOptional().isEmpty()) {\n  throw new NotFoundException();\n}\nString value = methodThatReturnsOptional().get(); // Noncompliant: indirect access, we consider that two consecutive calls can return different values.\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nthis.getOptionalValue().ifPresent(stringValue -&gt;\n  // Do something with stringValue\n);\n</pre>\n<p>or</p>\n<pre>\nOptional&lt;String&gt; value = this.getOptionalValue();\n\n// ...\n\nif (value.isPresent()) {\n  String stringValue = value.get();\n}\n</pre>\n<p>or</p>\n<pre>\nOptional&lt;String&gt; value = this.getOptionalValue();\n\n// ...\n\nString stringValue = value.orElse(\"default\");\n</pre>\n<pre>\nOptional&lt;String&gt; optional = methodThatReturnsOptional();\nif (optional.isEmpty()) {\n  throw new NotFoundException();\n}\nString value = optional.get();\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "COMPLETE",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S3776",
            "repo": "java",
            "name": "Cognitive Complexity of methods should not be too high",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "brain-overload"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "Threshold",
                    "htmlDesc": "The maximum authorized complexity.",
                    "defaultValue": "15",
                    "type": "INTEGER"
                }
            ],
            "defaultDebtRemFnType": "LINEAR_OFFSET",
            "debtRemFnType": "LINEAR_OFFSET",
            "type": "CODE_SMELL",
            "defaultRemFnType": "LINEAR_OFFSET",
            "defaultRemFnGapMultiplier": "1min",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "LINEAR_OFFSET",
            "remFnGapMultiplier": "1min",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "gapDescription": "per complexity point over the threshold",
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S3776"
                ]
            },
            "descriptionSections": [
                {
                    "key": "introduction",
                    "content": "<p>This rule raises an issue when the code cognitive complexity of a function is above a certain threshold.</p>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Cognitive Complexity is a measure of how hard it is to understand the control flow of a unit of code. Code with high cognitive complexity is hard\nto read, understand, test, and modify.</p>\n<p>As a rule of thumb, high cognitive complexity is a sign that the code should be refactored into smaller, easier-to-manage pieces.</p>\n<h3>Which syntax in code does impact cognitive complexity score?</h3>\n<p>Here are the core concepts:</p>\n<ul>\n  <li> <strong>Cognitive complexity is incremented each time the code breaks the normal linear reading flow.</strong><br> This concerns, for example,\n  loop structures, conditionals, catches, switches, jumps to labels, and conditions mixing multiple operators. </li>\n  <li> <strong>Each nesting level increases complexity.</strong><br> During code reading, the deeper you go through nested layers, the harder it\n  becomes to keep the context in mind. </li>\n  <li> <strong>Method calls are free</strong><br> A well-picked method name is a summary of multiple lines of code. A reader can first explore a\n  high-level view of what the code is performing then go deeper and deeper by looking at called functions content.<br> <em>Note:</em> This does not\n  apply to recursive calls, those will increment cognitive score. </li>\n</ul>\n<p>The method of computation is fully detailed in the pdf linked in the resources.</p>\n<h3>Exceptions</h3>\n<p><code>equals</code> and <code>hashCode</code> methods are ignored because they might be automatically generated and might end up being difficult to\nunderstand, especially in the presence of many fields.</p>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> Sonar - <a href=\"https://www.sonarsource.com/docs/CognitiveComplexity.pdf\">Cognitive Complexity</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> Sonar Blog - <a href=\"https://www.sonarsource.com/blog/5-clean-code-tips-for-reducing-cognitive-complexity/\">5 Clean Code Tips for Reducing\n  Cognitive Complexity</a> </li>\n</ul>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>Reducing cognitive complexity can be challenging.<br> Here are a few suggestions:</p>\n<ul>\n  <li> <strong>Extract complex conditions in a new function.</strong><br> Mixed operators in condition will increase complexity. Extracting the\n  condition in a new function with an appropriate name will reduce cognitive load. </li>\n  <li> <strong>Break down large functions.</strong><br> Large functions can be hard to understand and maintain. If a function is doing too many\n  things, consider breaking it down into smaller, more manageable functions. Each function should have a single responsibility. </li>\n  <li> <strong>Avoid deep nesting by returning early.</strong><br> To avoid the nesting of conditions, process exceptional cases first and return\n  early. </li>\n</ul>\n\n<p><strong>Extraction of a complex condition in a new function.</strong></p>\n<h4>Noncompliant code example</h4>\n<p>The code is using a complex condition and has a cognitive cost of 3.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndouble calculateFinalPrice(User user, Cart cart) {\n  double total = calculateTotal(cart);\n  if (user.hasMembership()                            // +1 (if)\n    &amp;&amp; user.ordersCount() &gt; 10                        // +1 (more than one condition)\n    &amp;&amp; user.isAccountActive()\n    &amp;&amp; !user.hasDiscount()\n    || user.ordersCount() == 1) {                    // +1 (change of operator in condition)\n    total = applyDiscount(user, total);\n  }\n  return total;\n}\n</pre>\n<h4>Compliant solution</h4>\n<p>Even if the cognitive complexity of the whole program did not change, it is easier for a reader to understand the code of the\n<code>calculateFinalPrice</code> function, which now only has a cognitive cost of 1.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndouble calculateFinalPrice(User user, Cart cart) {\n  double total = calculateTotal(cart);\n  if (isEligibleForDiscount(user)) {                  // +1 (if)\n    total = applyDiscount(user, total);\n  }\n  return total;\n}\n\nboolean isEligibleForDiscount(User user) {\n  return user.hasMembership()\n    &amp;&amp; user.ordersCount() &gt; 10                        // +1 (more than one condition)\n    &amp;&amp; user.isAccountActive()\n    &amp;&amp; !user.hasDiscount()\n    || user.ordersCount() == 1;                       // +1 (change of operator in condition)\n}\n</pre>\n<p><strong>Break down large functions.</strong></p>\n<h4>Noncompliant code example</h4>\n<p>For example, consider a function that calculates the total price of a shopping cart, including sales tax and shipping.<br> <em>Note:</em> The code\nis simplified here, to illustrate the purpose. Please imagine there is more happening in the <code>for</code> loops.</p>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\ndouble calculateTotal(Cart cart) {\n  double total = 0;\n  for (Item item : cart.items()) {       // +1 (for)\n    total += item.price;\n  }\n\n  // calculateSalesTax\n  for (Item item : cart.items()) {       // +1 (for)\n    total += 0.2 * item.price;\n  }\n\n  //calculateShipping\n  total += 5 * cart.items().size();\n\n  return total;\n}\n</pre>\n<p>This function could be refactored into smaller functions: The complexity is spread over multiple functions and the complex\n<code>calculateTotal</code> has now a complexity score of zero.</p>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\ndouble calculateTotal(Cart cart) {\n  double total = 0;\n  total = calculateSubtotal(cart, total);\n  total += calculateSalesTax(cart, total);\n  total += calculateShipping(cart, total);\n\n  return total;\n}\n\ndouble calculateShipping(Cart cart, double total) {\n  total += 5 * cart.items().size();\n  return total;\n}\n\ndouble calculateSalesTax(Cart cart, double total) {\n  for (Item item : cart.items()) {       // +1 (for)\n    total += 0.2 * item.price;\n  }\n  return total;\n}\n\ndouble calculateSubtotal(Cart cart, double total) {\n  for (Item item : cart.items()) {       // +1 (for)\n    total += item.price;\n  }\n  return total;\n}\n</pre>\n<p><strong>Avoid deep nesting by returning early.</strong></p>\n<h4>Noncompliant code example</h4>\n<p>The below code has a cognitive complexity of 6.</p>\n<pre data-diff-id=\"3\" data-diff-type=\"noncompliant\">\ndouble calculateDiscount(double price, User user) {\n  if (isEligibleForDiscount(user)) {      // +1 ( if )\n    if (user.hasMembership()) {           // +2 ( nested if )\n      return price * 0.9;\n    } else if (user.ordersCount() == 1) { // +1 ( else )\n      return price * 0.95;\n    } else {                              // +1 ( else )\n      return price;\n    }\n  } else {                                // +1 ( else )\n    return price;\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<p>Checking for the edge case first flattens the <code>if</code> statements and reduces the cognitive complexity to 3.</p>\n<pre data-diff-id=\"3\" data-diff-type=\"compliant\">\ndouble calculateDiscount(double price, User user) {\n  if (!isEligibleForDiscount(user)) {     // +1 ( if )\n    return price;\n  }\n  if (user.hasMembership()) {             // +1\n    return price * 0.9;\n  }\n  if (user.ordersCount() == 1) {          // +1 ( if )\n    return price * 0.95;\n  }\n  return price;\n}\n</pre>\n<h3>Pitfalls</h3>\n<p>As this code is complex, ensure that you have unit tests that cover the code before refactoring.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "FOCUSED",
            "cleanCodeAttributeCategory": "ADAPTABLE",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S5863",
            "repo": "java",
            "name": "Assertions should not compare an object to itself",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "tests"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "TEST",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5863"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Assertions comparing an object to itself are more likely to be bugs due to developer’s carelessness.</p>\n<p>This rule raises an issue when the actual expression matches the expected expression.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nassertThat(actual).isEqualTo(actual); // Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nassertThat(actual).isEqualTo(expected);\n</pre>\n<h3>Exceptions</h3>\n<p>In a unit test validating the <code>equals(...)</code> and <code>hashCode()</code> methods, it’s legitimate to compare an object to itself. This\nrule does not raise an issue for <code>isEqualTo</code>, <code>assertEquals</code> or <code>hasSameHashCodeAs</code> when the unit test name contains\n(case insensitive): <code>equal</code>, <code>hash_?code</code>, <code>object_?method</code>. For example, in tests with the following names:\n<code>test_equals</code>, <code>testEqual</code>, <code>test_hashCode</code>, <code>test_hash_code</code>, <code>test_object_methods</code>.</p>\n<pre>\nclass MyClassTest {\n  @Test\n  void test_equals_and_hash_code() {\n    MyClass obj = new MyClass();\n    assertThat(obj).isEqualTo(obj); // Compliant\n    assertThat(obj).hasSameHashCodeAs(obj); // Compliant\n  }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S5868",
            "repo": "java",
            "name": "Unicode Grapheme Clusters should be avoided inside regex character classes",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "regex"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5868"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>When placing Unicode <a href=\"https://unicode.org/glossary/#grapheme_cluster\">Grapheme Clusters</a> (characters which require to be encoded in\nmultiple <a href=\"https://unicode.org/glossary/#code_point\">Code Points</a>) inside a character class of a regular expression, this will likely lead\nto unintended behavior.</p>\n<p>For instance, the grapheme cluster <code>c̈</code> requires two code points: one for <code>'c'</code>, followed by one for the <em>umlaut</em>\nmodifier <code>'\\u{0308}'</code>. If placed within a character class, such as <code>[c̈]</code>, the regex will consider the character class being the\nenumeration <code>[c\\u{0308}]</code> instead. It will, therefore, match every <code>'c'</code> and every <em>umlaut</em> that isn’t expressed as a\nsingle codepoint, which is extremely unlikely to be the intended behavior.</p>\n<p>This rule raises an issue every time Unicode Grapheme Clusters are used within a character class of a regular expression.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n\"cc̈d̈d\".replaceAll(\"[c̈d̈]\", \"X\"); // Noncompliant, print \"XXXXXX\" instead of expected \"cXXd\".\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n\"cc̈d̈d\".replaceAll(\"c̈|d̈\", \"X\"); // print \"cXXd\"\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S5869",
            "repo": "java",
            "name": "Character classes in regular expressions should not contain the same character twice",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "regex"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5869"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Character classes in regular expressions are a convenient way to match one of several possible characters by listing the allowed characters or\nranges of characters. If the same character is listed twice in the same character class or if the character class contains overlapping ranges, this\nhas no effect.</p>\n<p>Thus duplicate characters in a character class are either a simple oversight or a sign that a range in the character class matches more than is\nintended or that the author misunderstood how character classes work and wanted to match more than one character. A common example of the latter\nmistake is trying to use a range like <code>[0-99]</code> to match numbers of up to two digits, when in fact it is equivalent to <code>[0-9]</code>.\nAnother common cause is forgetting to escape the <code>-</code> character, creating an unintended range that overlaps with other characters in the\ncharacter class.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nstr.matches(\"[0-99]\") // Noncompliant, this won't actually match strings with two digits\nstr.matches(\"[0-9.-_]\") // Noncompliant, .-_ is a range that already contains 0-9 (as well as various other characters such as capital letters)\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nstr.matches(\"[0-9]{1,2}\")\nstr.matches(\"[0-9.\\\\-_]\")\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S6831",
            "repo": "java",
            "name": "\"@Qualifier\" should not be used on \"@Bean\" methods",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "spring"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S6831"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.spring.io/spring-framework/reference/core/beans/java/bean-annotation.html\">Spring Framework - Using the @Bean\n  Annotation</a> </li>\n  <li> <a href=\"https://docs.spring.io/spring-framework/reference/core/beans/annotation-config/autowired-qualifiers.html\">Spring Framework - Using\n  @Qualifier</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://www.baeldung.com/spring-qualifier-annotation\">Baeldung - Spring @Qualifier Annotation</a> </li>\n  <li> <a href=\"https://www.baeldung.com/spring-bean-annotations\">Baeldung - Spring Bean Annotations</a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>In Spring Framework, the <code>@Qualifier</code> annotation is typically used to disambiguate between multiple beans of the same type when\nauto-wiring dependencies. It is not necessary to use <code>@Qualifier</code> when defining a bean using the <code>@Bean</code> annotation because the\nbean’s name can be explicitly specified using the <code>name</code> attribute or derived from the method name. Using <code>@Qualifier</code> on\n<code>@Bean</code> methods can lead to confusion and redundancy. Beans should be named appropriately using either the <code>name</code> attribute of\nthe <code>@Bean</code> annotation or the method name itself.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@Configuration\npublic class MyConfiguration {\n  @Bean\n  @Qualifier(\"myService\")\n  public MyService myService() {\n    // ...\n    return new MyService();\n  }\n\n  @Bean\n  @Qualifier(\"betterService\")\n  public MyService aBetterService() {\n    // ...\n    return new MyService();\n  }\n\n  @Bean\n  @Qualifier(\"evenBetterService\")\n  public MyService anEvenBetterService() {\n    // ...\n    return new MyService();\n  }\n\n  @Bean\n  @Qualifier(\"differentService\")\n  public MyBean aDifferentService() {\n    // ...\n    return new MyBean();\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@Configuration\npublic class MyConfiguration {\n  @Bean\n  public MyService myService() {\n    // ...\n    return new MyService();\n  }\n\n  @Bean(name=\"betterService\")\n  public MyService aBetterService() {\n    // ...\n    return new MyService();\n  }\n\n  @Bean(name=\"evenBetterService\")\n  public MyService anEvenBetterService() {\n    // ...\n    return new MyService();\n  }\n\n  @Bean(name=\"differentService\")\n  public MyBean aDifferentService() {\n    // ...\n    return new MyBean();\n  }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "DISTINCT",
            "cleanCodeAttributeCategory": "ADAPTABLE",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                },
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S6837",
            "repo": "java",
            "name": "Superfluous \"@ResponseBody\" annotations should be removed",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "spring"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S6837"
                ]
            },
            "descriptionSections": [
                {
                    "key": "how_to_fix",
                    "content": "<p>Remove the <code>@ResponseBody</code> annotation from the class or method.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@RestController\npublic class MyController {\n  @ResponseBody // Noncompliant, the @RestController annotation already implies @ResponseBody\n  @RequestMapping(\"/hello\")\n  public String hello() {\n    return \"Hello World!\";\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@RestController\npublic class MyController {\n  @RequestMapping(\"/hello\")\n  public String hello() {\n    return \"Hello World!\";\n  }\n}\n</pre>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\n@RestController\n@ResponseBody // Noncompliant, the @RestController annotation already implies @ResponseBody\npublic class MyController {\n  @RequestMapping(\"/hello\")\n  public String hello() {\n    return \"Hello World!\";\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\n@RestController\npublic class MyController {\n  @RequestMapping(\"/hello\")\n  public String hello() {\n    return \"Hello World!\";\n  }\n}\n</pre>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>The Spring framework’s <code>@RestController</code> annotation is equivalent to using the <code>@Controller</code> and <code>@ResponseBody</code>\nannotations together. As such, it is redundant to add a <code>@ResponseBody</code> annotation when the class is already annotated with\n<code>@RestController</code>.</p>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> Spring Guides - <a href=\"https://spring.io/guides/gs/rest-service/\">Building a RESTful Web Service</a> </li>\n  <li> Baeldung - <a href=\"https://www.baeldung.com/spring-controller-vs-restcontroller\">The Spring @Controller and @RestController Annotations</a>\n  </li>\n  <li> Baeldung - <a href=\"https://www.baeldung.com/spring-request-response-body\">Spring’s RequestBody and ResponseBody Annotations</a> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S6838",
            "repo": "java",
            "name": "\"@Bean\" methods for Singleton should not be invoked in \"@Configuration\" when proxyBeanMethods is false",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "spring"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S6838"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> Spring - <a\n  href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/Configuration.html#proxyBeanMethods()\">Configuration - proxyBeanMethods</a> </li>\n  <li> Spring - <a href=\"https://docs.spring.io/spring-framework/reference/core/aop/proxying.html\">Proxying Mechanisms</a> </li>\n  <li> Spring - <a href=\"https://docs.spring.io/spring-framework/reference/core/beans/java/bean-annotation.html#beans-java-dependencies\">Bean\n  Annotation - Dependencies</a> </li>\n  <li> GitHub - <a href=\"https://github.com/cglib/cglib/wiki\">CGLIB</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> Medium - <a href=\"https://blog.devgenius.io/demystifying-proxy-in-spring-3ab536046b11\">Demystifying Proxy in Spring</a> </li>\n</ul>"
                },
                {
                    "key": "introduction",
                    "content": "<p>Spring proxies are based on the <strong>Proxy design pattern</strong> and serve as intermediaries to other resources, offering extra features at a\nslight performance penalty. For example, they facilitate lazy resource initialization and data caching.</p>\n<p>The <code>@Configuration</code> annotation enables this mechanism by default through the <code>proxyBeanMethods</code> attribute set to\n<code>true</code>. This ensures that the <code>@Bean</code> methods are proxied in order to enforce bean lifecycle behavior, e.g. to return shared\nsingleton bean instances even in case of direct <code>@Bean</code> method calls in user code. This functionality is achieved via method interception,\nimplemented through a runtime-generated <strong><a href=\"https://github.com/cglib/cglib/wiki\">CGLIB</a></strong> subclass.</p>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>When setting the <code>proxyBeanMethods</code> attribute to <code>false</code> the <code>@Bean</code> methods are not proxied and this is similar\nto removing the <code>@Configuration</code> stereotype. In this scenario, <code>@Bean</code> methods within the <code>@Configuration</code> annotated\nclass operate in <a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/Bean.html\"><em>lite\nmode</em></a>, resulting in a new bean creation each time the method is invoked.</p>\n<p>For <code>Singleton</code> beans, this could cause unexpected outcomes as the bean is created multiple times instead of being created once and\ncached.</p>\n<p>The rule raises an issue when the <code>proxyBeanMethods</code> attribute is set to <code>false</code> and the <code>@Bean</code> method of a\n<code>Singleton</code> bean is directly invoked in the <code>@Configuration</code> annotated class code.</p>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>The issue can be fixed in the following ways:</p>\n<ul>\n  <li> Not invoking the <code>@Bean</code> method directly, but rather injecting the bean in the context and using it, by means of <code>@Bean</code>\n  <a href=\"https://docs.spring.io/spring-framework/reference/core/beans/java/bean-annotation.html#beans-java-dependencies\">method parameters</a>.\n  </li>\n  <li> If the performance penalty is negligible, consider not disabling the <code>proxyBeanMethods</code> attribute, so that the <code>@Bean</code>\n  methods are proxied and the bean lifecycle is enforced. </li>\n</ul>\n\n<h4>Noncompliant code example</h4>\n<p>In the example below, every instance of <code>PrototypeBean</code> will have a different instance of <code>SingletonBean</code>, as\n<code>singletonBean()</code> is called directly from <code>prototypeBean()</code>.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@Configuration(proxyBeanMethods = false)\nclass ConfigurationExample {\n  @Bean\n  public SingletonBean singletonBean() {\n    return new SingletonBean();\n  }\n\n  @Bean\n  @Scope(\"prototype\")\n  public PrototypeBean prototypeBean() {\n    return new PrototypeBean(singletonBean()); // Noncompliant, the singletonBean is created every time a prototypeBean is created\n  }\n\n  class SingletonBean {\n    // ...\n  }\n\n  class PrototypeBean {\n    // ...\n\n    public PrototypeBean(SingletonBean singletonBean) {\n      // ...\n    }\n\n    // ...\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<p>The compliant solution relies on the <code>@Bean</code> method parameter to automatically inject the <code>SingletonBean</code> from the\n<code>ApplicationContext</code>. This way every instance of <code>PrototypeBean</code> will have the same instance of <code>SingletonBean</code>.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@Configuration(proxyBeanMethods = false)\nclass ConfigurationExample {\n  @Bean\n  public SingletonBean singletonBean() {\n    return new SingletonBean();\n  }\n\n  @Bean\n  @Scope(\"prototype\")\n  public PrototypeBean prototypeBean(SingletonBean singletonBean) { // Compliant, the singletonBean is injected in the context and used by every prototypeBean\n    return new PrototypeBean(singletonBean);\n  }\n\n  class SingletonBean {\n    // ...\n  }\n\n  class PrototypeBean {\n    // ...\n\n    public PrototypeBean(SingletonBean singletonBean) {\n      // ...\n    }\n\n    // ...\n  }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S881",
            "repo": "java",
            "name": "Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S881"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>The use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:</p>\n<ul>\n  <li> It can significantly impair the readability of the code. </li>\n  <li> It introduces additional side effects into a statement, with the potential for undefined behavior. </li>\n  <li> It is safer to use these operators in isolation from any other arithmetic operators. </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<pre>\nu8a = ++u8b + u8c--;\nfoo = bar++ / 4;\n</pre>\n<h3>Compliant solution</h3>\n<p>The following sequence is clearer and therefore safer:</p>\n<pre>\n++u8b;\nu8a = u8b + u8c;\nu8c--;\nfoo = bar / 4;\nbar++;\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/StYxBQ\">CERT, EXP30-C.</a> - Do not depend on the order of evaluation for side effects </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/IXw-BQ\">CERT, EXP50-CPP.</a> - Do not depend on the order of evaluation for side effects </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/NDdGBQ\">CERT, EXP05-J.</a> - Do not follow a write by a subsequent write or read of the same\n  object within an expression </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:NoSonar",
            "repo": "java",
            "name": "Track uses of \"NOSONAR\" comments",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "internalKey": "S1291",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "bad-practice"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "1min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "1min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:NoSonar"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Any issue to quality rule can be deactivated with the <code>NOSONAR</code> marker. This marker is pretty useful to exclude false-positive results\nbut it can also be used abusively to hide real quality flaws.</p>\n<p>This rule raises an issue when <code>NOSONAR</code> is used.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S1110",
            "repo": "java",
            "name": "Redundant pairs of parentheses should be removed",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "confusing"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "1min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "1min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:UselessParenthesesCheck"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Parentheses can disambiguate the order of operations in complex expressions and make the code easier to understand.</p>\n<pre>\na = (b * c) + (d * e); // Compliant: the intent is clear.\n</pre>\n<p>Redundant parentheses are parenthesis that do not change the behavior of the code, and do not clarify the intent. They can mislead and complexify\nthe code. They should be removed.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nint x = ((y / 2 + 1)); // Noncompliant\n\nif (a &amp;&amp; ((x + y &gt; 0))) { // Noncompliant\n  return ((x + 1)); // Noncompliant\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nint x = (y / 2 + 1);\n\nif (a &amp;&amp; (x + y &gt; 0)) {\n  return (x + 1);\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S1111",
            "repo": "java",
            "name": "The \"Object.finalize()\" method should not be called",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:ObjectFinalizeCheck"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Before it reclaims storage from an object that is no longer referenced, the garbage collector calls <code>finalize()</code> on the object.</p>\n<p>This is a good time to release resources held by the object.</p>\n<p>Because the general contract is that the <code>finalize</code> method should only be called once per object, calling this method explicitly is\nmisleading and does not respect this contract.</p>\n<h3>What is the potential impact?</h3>\n<p>An explicit call to an object’s finalize method will perform operations that most likely were supposed to be performed only when the object was not\nreferenced anymore by any thread.</p>\n<p>Since it is an acceptable practice to override the finalize method in any subclass of <code>Object</code>, by invoking it explicitly, we will run\ncode that was designed to only be ran at a different time.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic void dispose() throws Throwable {\n  this.finalize();                       // Noncompliant\n}\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/specs/jls/se17/html/jls-12.html#jls-12.6\">docs.oracle.com</a> - Finalization of Class Instances </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/586\">CWE-586 - Explicit Call to Finalize()</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/4jZGBQ\">CERT, MET12-J.</a> - Do not use finalizers </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S1113",
            "repo": "java",
            "name": "The \"Object.finalize()\" method should not be overridden",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "unpredictable",
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:ObjectFinalizeOverridenCheck"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Before it reclaims storage from an object that is no longer referenced, the garbage collector calls <code>finalize()</code> on the object.</p>\n<p>But there is no guarantee that this method will be called as soon as the last references to the object are removed.</p>\n<p>It can be few microseconds to few minutes later.</p>\n<p>For this reason relying on overriding the <code>finalize()</code> method to release resources or to update the state of the program is highly\ndiscouraged.</p>\n<h3>What is the potential impact?</h3>\n<p>More unexpected issues can be caused by relying on the <code>finalize()</code> method to perform important operations on the application state:</p>\n<ul>\n  <li> The JVM might terminate without ever calling this method on a particular object, leaving an unexpected or incomplete state of the program </li>\n  <li> Uncaught exceptions will be ignored inside this method, making it harder to detect issues that could have been logged otherwise </li>\n  <li> Finalizer methods can also be invoked concurrently, even on single-threaded applications, making it hard to maintain desired program invariants\n  </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class MyClass {\n\n  @Override\n  protected void finalize() { // Noncompliant\n    releaseSomeResources();\n  }\n\n}\n</pre>\n<h3>Exceptions</h3>\n<p>It is allowed to override the <code>finalize()</code> method as <code>final</code> method with an empty body, to prevent the <em>finalizer\nattack</em> as described in <em>MET12-J-EX1</em>.</p>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/specs/jls/se17/html/jls-12.html#jls-12.6\">docs.oracle.com</a> - Finalization of Class Instances </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/4jZGBQ\">CERT, MET12-J.</a> - Do not use finalizers </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S1117",
            "repo": "java",
            "name": "Local variables should not shadow class fields",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "suspicious",
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:HiddenFieldCheck"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Shadowing occurs when a local variable has the same name as a variable or a field in an outer scope.</p>\n<p>This can lead to three main problems:</p>\n<ul>\n  <li> Confusion: The same name can refer to different variables in different parts of the scope, making the code hard to read and understand. </li>\n  <li> Unintended Behavior: You might accidentally use the wrong variable, leading to hard-to-detect bugs. </li>\n  <li> Maintenance Issues: If the inner variable is removed or renamed, the code’s behavior might change unexpectedly because the outer variable is\n  now being used. </li>\n</ul>\n<p>To avoid these problems, rename the shadowing, shadowed, or both identifiers to accurately represent their purpose with unique and meaningful\nnames.</p>\n<p>This rule focuses on variables in methods that shadow a field.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nclass Foo {\n  public int myField;\n\n  public void doSomething() {\n    int myField = 0; // Noncompliant\n    // ...\n  }\n}\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> CERT - <a href=\"https://wiki.sei.cmu.edu/confluence/display/java/DCL51-J.+Do+not+shadow+or+obscure+identifiers+in+subscopes\">DCL51-J. Do not\n  shadow or obscure identifiers in subscopes</a> </li>\n</ul>\n<h3>Related rules</h3>\n<ul>\n  <li> <a href='/coding_rules#rule_key=java%3AS2176'>S2176</a> - Class names should not shadow interfaces or superclasses </li>\n  <li> <a href='/coding_rules#rule_key=java%3AS2387'>S2387</a> - Child class fields should not shadow parent class fields </li>\n  <li> <a href='/coding_rules#rule_key=java%3AS4977'>S4977</a> - Type parameters should not shadow other type parameters </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S1118",
            "repo": "java",
            "name": "Utility classes should not have public constructors",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "design"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1118"
                ]
            },
            "descriptionSections": [
                {
                    "key": "how_to_fix",
                    "content": "<p>To prevent the class from being instantiated, you should define a non-public constructor. This will prevent the compiler from implicitly generating\na public parameterless constructor.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass StringUtils { // Noncompliant\n\n  public static String concatenate(String s1, String s2) {\n    return s1 + s2;\n  }\n\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass StringUtils { // Compliant\n\n  private StringUtils() {\n    throw new IllegalStateException(\"Utility class\");\n  }\n\n  public static String concatenate(String s1, String s2) {\n    return s1 + s2;\n  }\n\n}\n</pre>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Whenever there are portions of code that are duplicated and do not depend on the state of their container class, they can be centralized inside a\n\"utility class\". A utility class is a class that only has static members, hence it should not be instantiated.</p>\n<h3>Exceptions</h3>\n<p>When a class contains <code>public static void main(String[] args)</code> method it is not considered as a utility class and will be ignored by\nthis rule.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S1119",
            "repo": "java",
            "name": "Labels should not be used",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "confusing"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "30min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "30min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:LabelsShouldNotBeUsedCheck"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Labels are not commonly used in Java, and many developers do not understand how they work. Moreover, their usage makes the control flow harder to\nfollow, which reduces the code’s readability.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nint matrix[][] = {\n  {1, 2, 3},\n  {4, 5, 6},\n  {7, 8, 9}\n};\n\nouter: for (int row = 0; row &lt; matrix.length; row++) {   // Non-Compliant\n  for (int col = 0; col &lt; matrix[row].length; col++) {\n    if (col == row) {\n      continue outer;\n    }\n    System.out.println(matrix[row][col]);                // Prints the elements under the diagonal, i.e. 4, 7 and 8\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nfor (int row = 1; row &lt; matrix.length; row++) {          // Compliant\n  for (int col = 0; col &lt; row; col++) {\n    System.out.println(matrix[row][col]);                // Also prints 4, 7 and 8\n  }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S1596",
            "repo": "java",
            "name": "\"Collections.EMPTY_LIST\", \"EMPTY_MAP\", and \"EMPTY_SET\" should not be used",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "obsolete",
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1596"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html\">Oracle - Java™ Platform, Standard Edition 8 API Specification,\n  Class Collections</a> </li>\n  <li> <a href=\"https://docs.oracle.com/javase/tutorial/java/generics/rawTypes.html\">Oracle - The Java™ Tutorials - Raw Types</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://www.baeldung.com/java-generics\">Baeldung - The Basics of Java Generics</a> </li>\n</ul>"
                },
                {
                    "key": "introduction",
                    "content": "<p>This rule raises an issue when the <code>Collections.EMPTY_*</code> fields are used instead of the <code>Collections.empty*()</code> methods.</p>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>Use:</p>\n<ul>\n  <li> <code>Collections.emptyList()</code> instead of <code>Collections.EMPTY_LIST</code> </li>\n  <li> <code>Collections.emptySet()</code> instead of <code>Collections.EMPTY_SET</code> </li>\n  <li> <code>Collections.emptyMap()</code> instead of <code>Collections.EMPTY_MAP</code> </li>\n</ul>\n<p>In addition, there are variants of <code>Collections.empty*()</code> available also for other collection interfaces, such as\n<code>Collections.emptyIterator()</code>, <code>Collections.emptyNavigableMap()</code>, <code>Collections.emptySortedSet()</code>.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nList&lt;String&gt; collection1 = Collections.EMPTY_LIST;     // Noncompliant, raw List\nSet&lt;Float&gt; collection2 = Collections.EMPTY_SET;        // Noncompliant, raw Set\nMap&lt;Int, String&gt; collection3 = Collections.EMPTY_MAP;  // Noncompliant, raw Map\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nList&lt;String&gt; collection1 = Collections.emptyList();    // Compliant, List&lt;String&gt;\nSet&lt;Float&gt; collection2 = Collections.emptySet();       // Compliant, Set&lt;Float&gt;\nMap&lt;Int, String&gt; collection3 = Collections.emptyMap(); // Compliant, Map&lt;Int, String&gt;\n</pre>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Generic types (types with type parameters) have been introduced into Java with language version 1.5. If type parameters are specified for a class\nor method, it is still possible to ignore them to keep backward compatibility with older code, which is called the <em>raw type</em> of the class or\ninterface.</p>\n<p>Using raw type expressions is highly discouraged because the compiler cannot perform static type checking on them. This means that the compiler\nwill not report typing errors about them at compile time, but a <code>ClassCastException</code> will be thrown during runtime.</p>\n<p>In Java 1.5, generics were also added to the Java collections API, and the data structures in <code>java.util</code>, such as <code>List</code>,\n<code>Set</code>, or <code>Map</code>, now feature type parameters. <code>Collections.EMPTY_LIST</code>, <code>Collections.EMPTY_SET</code>, and\n<code>Collections.EMPTY_MAP</code> are relics from before generics, and they return raw lists, sets, or maps, with the limitations mentioned\nabove.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S2200",
            "repo": "java",
            "name": "\"compareTo\" results should not be checked for specific values",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "unpredictable"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2200"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Assuming that a comparator or <code>compareTo</code> method always returns -1 or 1 if the first operand is less than or greater than the second is\nincorrect.</p>\n<p>The specifications for both methods, <code>Comparator.compare</code> and <code>Comparable.compareTo</code>, state that their return value is \"a\nnegative integer, zero, or a positive integer as this object is less than, equal to, or greater than the specified object.\" Even if a specific\ncomparator always returns -1, 0, or 1, this is only an implementation detail, not the API contract developers can rely on.</p>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>Replace</p>\n<ul>\n  <li> <code>== -1</code> with <code>&lt; 0</code> (the first operand is less than the second) </li>\n  <li> <code>== 1</code> with <code>&gt; 0</code> (the first operand is greater than the second) </li>\n  <li> <code>!= -1</code> with <code>&gt;= 0</code> (the first operand is greater than or equal to the second) </li>\n  <li> <code>!= 1</code> with <code>&lt;= 0</code> (the first operand is less than or equal to the second) </li>\n</ul>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class Main {\n\n  boolean isAGreaterThanB(Comparable&lt;Integer&gt; a, Integer b) {\n    return a.compareTo(b) == 1; // Noncompliant, check for constant return value\n  }\n\n  public static void main(String[] args) {\n    ByteComparator comparator = new ByteComparator();\n    if (comparator.compare((byte) 23, (byte) 42) == -1) { // Noncompliant, check for constant return value\n      System.out.println(\"23 &lt; 42\");\n    } else {\n      System.out.println(\"23 &gt;= 42\");\n    }\n  }\n\n  static class ByteComparator implements Comparator&lt;Byte&gt; {\n    @Override\n    public int compare(Byte a, Byte b) {\n      return a - b;\n    }\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class Main {\n\n  boolean isAGreaterThanB(Comparable&lt;Integer&gt; a, Integer b) {\n    return a.compareTo(b) &gt; 0; // Compliant, check for positive return value\n  }\n\n  public static void main(String[] args) {\n    ByteComparator comparator = new ByteComparator();\n    if (comparator.compare((byte) 23, (byte) 42) &lt; 0) { // Compliant, check for negative return value\n      System.out.println(\"23 &lt; 42\");\n    } else {\n      System.out.println(\"23 &gt;= 42\");\n    }\n  }\n\n  static class ByteComparator implements Comparator&lt;Byte&gt; {\n    @Override\n    public int compare(Byte a, Byte b) {\n      return a - b;\n    }\n  }\n}\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Comparable.html#compareTo-T-\">Java SE 8 API Specification:\n  Comparable.compareTo</a> </li>\n  <li> <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html#compare-T-T-\">Java SE 8 API Specification: Comparator.compare</a>\n  </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "COMPLETE",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S2201",
            "repo": "java",
            "name": "Return values from functions without side effects should not be ignored",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2201"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>When the call to a function doesn’t have any side effects, what is the point of making the call if the results are ignored? In such case, either\nthe function call is useless and should be dropped or the source code doesn’t behave as expected.</p>\n<p>To prevent generating any false-positives, this rule triggers an issue only on the following predefined list of immutable classes in the Java API\n:</p>\n<ul>\n  <li> <code>java.lang.String</code> </li>\n  <li> <code>java.lang.Boolean</code> </li>\n  <li> <code>java.lang.Integer</code> </li>\n  <li> <code>java.lang.Double</code> </li>\n  <li> <code>java.lang.Float</code> </li>\n  <li> <code>java.lang.Byte</code> </li>\n  <li> <code>java.lang.Character</code> </li>\n  <li> <code>java.lang.Short</code> </li>\n  <li> <code>java.lang.StackTraceElement</code> </li>\n  <li> <code>java.time.DayOfWeek</code> </li>\n  <li> <code>java.time.Duration</code> </li>\n  <li> <code>java.time.Instant</code> </li>\n  <li> <code>java.time.LocalDate</code> </li>\n  <li> <code>java.time.LocalDateTime</code> </li>\n  <li> <code>java.time.LocalTime</code> </li>\n  <li> <code>java.time.Month</code> </li>\n  <li> <code>java.time.MonthDay</code> </li>\n  <li> <code>java.time.OffsetDateTime</code> </li>\n  <li> <code>java.time.OffsetTime</code> </li>\n  <li> <code>java.time.Period</code> </li>\n  <li> <code>java.time.Year</code> </li>\n  <li> <code>java.time.YearMonth</code> </li>\n  <li> <code>java.time.ZonedDateTime</code> </li>\n  <li> <code>java.math.BigInteger</code> </li>\n  <li> <code>java.math.BigDecimal</code> </li>\n  <li> <code>java.util.Optional</code> </li>\n</ul>\n<p>As well as methods of the following classes:</p>\n<ul>\n  <li> <code>java.util.Collection</code>:\n    <ul>\n      <li> <code>size()</code> </li>\n      <li> <code>isEmpty()</code> </li>\n      <li> <code>contains(...)</code> </li>\n      <li> <code>containsAll(...)</code> </li>\n      <li> <code>iterator()</code> </li>\n      <li> <code>toArray()</code> </li>\n    </ul>  </li>\n  <li> <code>java.util.Map</code>:\n    <ul>\n      <li> <code>size()</code> </li>\n      <li> <code>isEmpty()</code> </li>\n      <li> <code>containsKey(...)</code> </li>\n      <li> <code>containsValue(...)</code> </li>\n      <li> <code>get(...)</code> </li>\n      <li> <code>getOrDefault(...)</code> </li>\n      <li> <code>keySet()</code> </li>\n      <li> <code>entrySet()</code> </li>\n      <li> <code>values()</code> </li>\n    </ul>  </li>\n  <li> <code>java.util.stream.Stream</code>\n    <ul>\n      <li> <code>toArray</code> </li>\n      <li> <code>reduce</code> </li>\n      <li> <code>collect</code> </li>\n      <li> <code>min</code> </li>\n      <li> <code>max</code> </li>\n      <li> <code>count</code> </li>\n      <li> <code>anyMatch</code> </li>\n      <li> <code>allMatch</code> </li>\n      <li> <code>noneMatch</code> </li>\n      <li> <code>findFirst</code> </li>\n      <li> <code>findAny</code> </li>\n      <li> <code>toList</code> </li>\n    </ul>  </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<pre>\npublic void handle(String command){\n  command.toLowerCase(); // Noncompliant; result of method thrown away\n  ...\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic void handle(String command){\n  String formattedCommand = command.toLowerCase();\n  ...\n}\n</pre>\n<h3>Exceptions</h3>\n<p>This rule will not raise an issue when both these conditions are met:</p>\n<ul>\n  <li> The method call is in a <code>try</code> block with an associated <code>catch</code> clause. </li>\n  <li> The method name starts with \"parse\", \"format\", \"decode\" or \"valueOf\" or the method is <code>String.getBytes(Charset)</code>. </li>\n</ul>\n<pre>\nprivate boolean textIsInteger(String textToCheck) {\n\n    try {\n        Integer.parseInt(textToCheck, 10); // OK\n        return true;\n    } catch (NumberFormatException ignored) {\n        return false;\n    }\n}\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/xzdGBQ\">CERT, EXP00-J.</a> - Do not ignore values returned by methods </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S2204",
            "repo": "java",
            "name": "\".equals()\" should not be used to test the values of \"Atomic\" classes",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "multi-threading"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2204"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/package-summary.html\">Java SE 8 API Specification: Package\n  \"java.util.concurrent.atomic\"</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://programming.guide/java/atomicinteger-equals.html\">Programming.Guide: AtomicInteger and equals / Comparable</a> </li>\n</ul>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<ul>\n  <li> To compare the number value of two instances <code>a</code> and <code>b</code> of <code>AtomicInteger</code> or <code>AtomicLong</code>, use\n  <code>a.get() == b.get()</code> instead of <code>a.equals(b)</code>. </li>\n  <li> If you want to check for object identity, use <code>a == b</code> instead of <code>a.equals(b)</code> to clarify your intention. </li>\n</ul>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nBoolean isSameNumberValue(AtomicLong a, AtomicLong b) {\n  return a.equals(b); // Noncompliant, this is true only if a == b\n}\n\nBoolean isSameReference(AtomicLong a, AtomicLong b) {\n  return a.equals(b); // Noncompliant, because misleading\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nBoolean isSameNumberValue(AtomicLong a, AtomicLong b) {\n  return a.get() == b.get(); // Compliant\n}\n\nBoolean isSameReference(AtomicLong a, AtomicLong b) {\n  return a == b; // Compliant\n}\n</pre>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>The <code>equals</code> method in <code>AtomicInteger</code> and <code>AtomicLong</code> returns <code>true</code> only if two instances are\nidentical, not if they represent the same number value.</p>\n<p>This is because <code>equals</code> is not part of the API contract of these classes, and they do not override the method inherited from\n<code>java.lang.Object</code>. Although both classes implement the <code>Number</code> interface, assertions about <code>equals</code> comparing\nnumber values are not part of that interface either. Only the API contract of implementing classes like <code>Integer</code>, <code>Long</code>,\n<code>Float</code>, <code>BigInteger</code>, etc., provides such assertions.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S2208",
            "repo": "java",
            "name": "Wildcard imports should not be used",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2208"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Using wildcards in imports may look cleaner as it reduces the number of lines in the import section and simplifies the code.<br> On the other hand,\nit makes the code harder to maintain:</p>\n<ul>\n  <li> It reduces code readability as developers will have a hard time knowing where names come from. </li>\n  <li> It could lead to conflicts between names defined locally and the ones imported. </li>\n  <li> It could later raise conflicts on dependency upgrade or Java version migration, as a wildcard import that works today might be broken tomorrow.\n  </li>\n</ul>\n<p>That is why it is better to import only the specific classes or modules you need.</p>\n<h3>Exceptions</h3>\n<p>Static imports are ignored by this rule. For example:</p>\n<pre>\nimport static java.lang.Math.*;\n</pre>\n<p>will not raise an issue;</p>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>Depending on your IDE you can solve this issue almost <strong>automatically</strong>:<br> Look for <strong>Organize/Optimize imports</strong>\nactions. These actions can also often be applied automatically on save.<br> <em>Note:</em> To make this work properly, you must adjust IDE settings to\nuse a very high <code>allowed class count usage</code> before using wildcards.</p>\n<p>Resolving this issue <strong>manually</strong> will require a step-by-step approach:</p>\n<ol>\n  <li> Remove one wildcard import and note down compilation failures. </li>\n  <li> For each missing class, import it back with the package prefix. </li>\n  <li> When the code compiles again, proceed with the next wildcard import. </li>\n</ol>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport java.sql.*; // Noncompliant\nimport java.util.*; // Noncompliant\n\nprivate Date date; // Date class exists in java.sql and java.util. Which one is this?\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport java.sql.Date;\nimport java.util.List;\nimport java.util.ArrayList;\n\nprivate Date date;\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S2209",
            "repo": "java",
            "name": "\"static\" members should be accessed statically",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2209"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>While it is <em>possible</em> to access <code>static</code> members from a class instance, it’s bad form, and considered by most to be misleading\nbecause it implies to the readers of your code that there’s an instance of the member per class instance.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B {\n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    first.counter ++;  // Noncompliant\n    second.counter ++;  // Noncompliant. A.counter is now 2, which is perhaps contrary to expectations\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B {\n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    A.counter ++;  // Compliant\n    A.counter ++;  // Compliant\n  }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S2326",
            "repo": "java",
            "name": "Unused type parameters should be removed",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "unused"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2326"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Type parameters that aren’t used are dead code, which can only distract and possibly confuse developers during maintenance. Therefore, unused type\nparameters should be removed.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nint &lt;T&gt; Add(int a, int b) // Noncompliant; &lt;T&gt; is ignored\n{\n  return a + b;\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nint Add(int a, int b)\n{\n  return a + b;\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S2440",
            "repo": "java",
            "name": "Classes with only \"static\" methods should not be instantiated",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "clumsy"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2440"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p><code>static</code> methods can be accessed without an instance of the enclosing class, so there’s no reason to instantiate a class that has only\n<code>static</code> methods.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class TextUtils {\n  public static String stripHtml(String source) {\n    return source.replaceAll(\"&lt;[^&gt;]+&gt;\", \"\");\n  }\n}\n\npublic class TextManipulator {\n\n  // ...\n\n  public void cleanText(String source) {\n    TextUtils textUtils = new TextUtils(); // Noncompliant\n\n    String stripped = textUtils.stripHtml(source);\n\n    //...\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic class TextUtils {\n  public static String stripHtml(String source) {\n    return source.replaceAll(\"&lt;[^&gt;]+&gt;\", \"\");\n  }\n}\n\npublic class TextManipulator {\n\n  // ...\n\n  public void cleanText(String source) {\n    String stripped = TextUtils.stripHtml(source);\n\n    //...\n  }\n}\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Related rules</h3>\n<ul>\n  <li> <a href='/coding_rules#rule_key=java%3AS1118'>S1118</a> - Utility classes should not have public constructors </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S2441",
            "repo": "java",
            "name": "Non-serializable objects should not be stored in \"javax.servlet.http.HttpSession\" instances",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2441"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A04_2021-Insecure_Design/\">Top 10 2021 Category A4 - Insecure Design</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/579\">CWE-579 - J2EE Bad Practices: Non-serializable Object Stored in Session</a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p><code>HttpSession</code> s are managed by web servers and can be serialized and stored on disk as the server manages its memory use in a process\ncalled \"passivation\" (and later restored during \"activation\").</p>\n<p>Even though <code>HttpSession</code> does not extend <code>Serializable</code>, you must nonetheless assume that it will be serialized. If\nnon-serializable objects are stored in the session, serialization might fail.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class Address {\n  //...\n}\n\nHttpSession session = request.getSession();\nsession.setAttribute(\"address\", new Address());  // Noncompliant; Address isn't serializable\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class Address implements Serializable {\n  //...\n}\n\nHttpSession session = request.getSession();\nsession.setAttribute(\"address\", new Address());\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "COMPLETE",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S2442",
            "repo": "java",
            "name": "Synchronizing on a \"Lock\" object should be avoided",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "multi-threading",
                "cert",
                "clumsy"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2442"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p><code>java.util.concurrent.locks.Lock</code> offers far more powerful and flexible locking operations than are available with\n<code>synchronized</code> blocks. So synchronizing on a <code>Lock</code> instance throws away the power of the object, as it overrides its better\nlocking mechanisms. Instead, such objects should be locked and unlocked using one of their <code>lock</code> and <code>unlock</code> method\nvariants.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nLock lock = new MyLockImpl();\nsynchronized(lock) {  // Noncompliant\n  // ...\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nLock lock = new MyLockImpl();\nif (lock.tryLock()) {\n  try {\n    // ...\n  } finally {\n    lock.unlock();\n  }\n}\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/qjdGBQ\">CERT, LCK03-J.</a> - Do not synchronize on the intrinsic locks of high-level concurrency\n  objects </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S2444",
            "repo": "java",
            "name": "Lazy initialization of \"static\" fields should be \"synchronized\"",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "multi-threading"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "30min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "30min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2444"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>In a multi-threaded situation, un-<code>synchronized</code> lazy initialization of static fields could mean that a second thread has access to a\nhalf-initialized object while the first thread is still creating it. Allowing such access could cause serious bugs. Instead. the initialization block\nshould be <code>synchronized</code>.</p>\n<p>Similarly, updates of such fields should also be <code>synchronized</code>.</p>\n<p>This rule raises an issue whenever a lazy static initialization is done on a class with at least one <code>synchronized</code> method, indicating\nintended usage in multi-threaded applications.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nprivate static Properties fPreferences = null;\n\nprivate static Properties getPreferences() {\n        if (fPreferences == null) {\n            fPreferences = new Properties(); // Noncompliant\n            fPreferences.put(\"loading\", \"true\");\n            fPreferences.put(\"filterstack\", \"true\");\n            readPreferences();\n        }\n        return fPreferences;\n    }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nprivate static Properties fPreferences = null;\n\nprivate static synchronized Properties getPreferences() {\n        if (fPreferences == null) {\n            fPreferences = new Properties();\n            fPreferences.put(\"loading\", \"true\");\n            fPreferences.put(\"filterstack\", \"true\");\n            readPreferences();\n        }\n        return fPreferences;\n    }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "COMPLETE",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S2681",
            "repo": "java",
            "name": "Multiline blocks should be enclosed in curly braces",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2681"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Having inconsistent indentation and omitting curly braces from a control structure, such as an <code>if</code> statement or <code>for</code> loop,\nis misleading and can induce bugs.</p>\n<p>This rule raises an issue when the indentation of the lines after a control structure indicates an intent to include those lines in the block, but\nthe omission of curly braces means the lines will be unconditionally executed once.</p>\n<p>The following patterns are recognized:</p>\n<pre>\nif (condition)\n  firstActionInBlock();\n  secondAction();  // Noncompliant: secondAction is executed unconditionally\nthirdAction();\n</pre>\n<pre>\nif (condition) firstActionInBlock(); secondAction();  // Noncompliant: secondAction is executed unconditionally\n</pre>\n<pre>\nif (condition) firstActionInBlock();\n  secondAction();  // Noncompliant: secondAction is executed unconditionally\n</pre>\n<pre>\nif (condition); secondAction();  // Noncompliant: secondAction is executed unconditionally\n</pre>\n<pre>\nfor (int i = 0; i &lt; array.length; i++)\n  str = array[i];\n  doTheThing(str);  // Noncompliant: executed only on the last element\n</pre>\n<p>Note that this rule considers tab characters to be equivalent to 1 space. When mixing spaces and tabs, a code may look fine in one editor but be\nconfusing in another configured differently.</p>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/483\">CWE-483 - Incorrect Block Delimitation</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/MzZGBQ\">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "FORMATTED",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S2689",
            "repo": "java",
            "name": "Files opened in append mode should not be used with \"ObjectOutputStream\"",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "serialization",
                "symbolic-execution"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "1h",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "1h",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://docs.jboss.org/jbossas/javadoc/4.0.2/org/jboss/util/stream/AppendingObjectOutputStream.java.html\">JBoss -\n  AppendingObjectOutputStream</a> </li>\n</ul>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/io/ObjectOutputStream.html\">Oracle SE 20 - ObjectOutputStream</a>\n  </li>\n</ul>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>Open the file to use the default action (writes stream header).</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nFileOutputStream fos = new FileOutputStream(fileName , true);  // fos opened in append mode\nObjectOutputStream out = new ObjectOutputStream(fos);  // Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nFileOutputStream fos = new FileOutputStream(fileName);\nObjectOutputStream out = new ObjectOutputStream(fos);\n</pre>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>An <code>ObjectOutputStream</code> writes primitive data types and graphs of Java objects to an <code>OutputStream</code>. The objects can be read\n(reconstituted) using an <code>ObjectInputStream</code>.</p>\n<p>When <code>ObjectOutputStream</code> is used with files opened in append mode, it can cause data corruption and unexpected behavior. This is\nbecause when <code>ObjectOutputStream</code> is created, it writes metadata to the output stream, which can conflict with the existing metadata when\nthe file is opened in append mode. This can lead to errors and data loss.</p>\n<p>When used with serialization, an <code>ObjectOutputStream</code> first writes the serialization stream header. This header should appear once per\nfile at the beginning. When you’re trying to read your object(s) back from the file, only the first one will be read successfully, and a\n<code>StreamCorruptedException</code> will be thrown after that.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "COMPLETE",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S4502",
            "repo": "java",
            "name": "Disabling CSRF protections is security-sensitive",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "spring"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "SECURITY_HOTSPOT",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S4502"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>A cross-site request forgery (CSRF) attack occurs when a trusted user of a web application can be forced, by an attacker, to perform sensitive\nactions that he didn’t intend, such as updating his profile or sending a message, more generally anything that can change the state of the\napplication.</p>\n<p>The attacker can trick the user/victim to click on a link, corresponding to the privileged action, or to visit a malicious web site that embeds a\nhidden web request and as web browsers automatically include cookies, the actions can be authenticated and sensitive.</p>\n"
                },
                {
                    "key": "how_to_fix",
                    "content": "<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Protection against CSRF attacks is strongly recommended:\n    <ul>\n      <li> to be activated by default for all <a href=\"https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Safe_methods\">unsafe HTTP\n      methods</a>. </li>\n      <li> implemented, for example, with an unguessable CSRF token </li>\n    </ul>  </li>\n  <li> Of course all sensitive operations should not be performed with <a\n  href=\"https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Safe_methods\">safe HTTP</a> methods like <code>GET</code> which are designed to be\n  used only for information retrieval. </li>\n</ul>\n<h2>Compliant Solution</h2>\n<p><a href=\"https://docs.spring.io/spring-security/site/docs/5.0.x/reference/html/csrf.html#csrf-using\">Spring Security</a> CSRF protection is enabled\nby default, do not disable it:</p>\n<pre>\n@EnableWebSecurity\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n\n  @Override\n  protected void configure(HttpSecurity http) throws Exception {\n    // http.csrf().disable(); // Compliant\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">Top 10 2021 Category A1 - Broken Access Control</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/352\">CWE-352 - Cross-Site Request Forgery (CSRF)</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-community/attacks/csrf\">Cross-Site Request Forgery</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222603\">Application Security and\n  Development: V-222603</a> - The application must protect from Cross-Site Request Forgery (CSRF) vulnerabilities. </li>\n  <li> PortSwigger - <a href=\"https://portswigger.net/research/web-storage-the-lesser-evil-for-session-tokens\">Web storage: the lesser evil for\n  session tokens</a> </li>\n</ul>"
                },
                {
                    "key": "assess_the_problem",
                    "content": "<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The web application uses cookies to authenticate users. </li>\n  <li> There exist sensitive operations in the web application that can be performed when the user is authenticated. </li>\n  <li> The state / resources of the web application can be modified by doing HTTP POST or HTTP DELETE requests for example. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Sensitive Code Example</h2>\n<p><a href=\"https://docs.spring.io/spring-security/site/docs/5.0.x/reference/html/csrf.html#csrf-using\">Spring Security</a> provides by default a\nprotection against CSRF attacks which can be disabled:</p>\n<pre>\n@EnableWebSecurity\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n\n  @Override\n  protected void configure(HttpSecurity http) throws Exception {\n    http.csrf().disable(); // Sensitive: csrf protection is entirely disabled\n   // or\n    http.csrf().ignoringAntMatchers(\"/route/\"); // Sensitive: csrf protection is disabled for specific routes\n  }\n}\n</pre>\n"
                },
                {
                    "key": "default",
                    "content": "<p>A cross-site request forgery (CSRF) attack occurs when a trusted user of a web application can be forced, by an attacker, to perform sensitive\nactions that he didn’t intend, such as updating his profile or sending a message, more generally anything that can change the state of the\napplication.</p>\n<p>The attacker can trick the user/victim to click on a link, corresponding to the privileged action, or to visit a malicious web site that embeds a\nhidden web request and as web browsers automatically include cookies, the actions can be authenticated and sensitive.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The web application uses cookies to authenticate users. </li>\n  <li> There exist sensitive operations in the web application that can be performed when the user is authenticated. </li>\n  <li> The state / resources of the web application can be modified by doing HTTP POST or HTTP DELETE requests for example. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Protection against CSRF attacks is strongly recommended:\n    <ul>\n      <li> to be activated by default for all <a href=\"https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Safe_methods\">unsafe HTTP\n      methods</a>. </li>\n      <li> implemented, for example, with an unguessable CSRF token </li>\n    </ul>  </li>\n  <li> Of course all sensitive operations should not be performed with <a\n  href=\"https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Safe_methods\">safe HTTP</a> methods like <code>GET</code> which are designed to be\n  used only for information retrieval. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<p><a href=\"https://docs.spring.io/spring-security/site/docs/5.0.x/reference/html/csrf.html#csrf-using\">Spring Security</a> provides by default a\nprotection against CSRF attacks which can be disabled:</p>\n<pre>\n@EnableWebSecurity\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n\n  @Override\n  protected void configure(HttpSecurity http) throws Exception {\n    http.csrf().disable(); // Sensitive: csrf protection is entirely disabled\n   // or\n    http.csrf().ignoringAntMatchers(\"/route/\"); // Sensitive: csrf protection is disabled for specific routes\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<p><a href=\"https://docs.spring.io/spring-security/site/docs/5.0.x/reference/html/csrf.html#csrf-using\">Spring Security</a> CSRF protection is enabled\nby default, do not disable it:</p>\n<pre>\n@EnableWebSecurity\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n\n  @Override\n  protected void configure(HttpSecurity http) throws Exception {\n    // http.csrf().disable(); // Compliant\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">Top 10 2021 Category A1 - Broken Access Control</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/352\">CWE-352 - Cross-Site Request Forgery (CSRF)</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-community/attacks/csrf\">Cross-Site Request Forgery</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222603\">Application Security and\n  Development: V-222603</a> - The application must protect from Cross-Site Request Forgery (CSRF) vulnerabilities. </li>\n  <li> PortSwigger - <a href=\"https://portswigger.net/research/web-storage-the-lesser-evil-for-session-tokens\">Web storage: the lesser evil for\n  session tokens</a> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "impacts": []
        },
        {
            "key": "java:S5831",
            "repo": "java",
            "name": "AssertJ configuration should be applied",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "tests",
                "assertj"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "TEST",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5831"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>A <code>org.assertj.core.configuration.Configuration</code> will be effective only once you call <code>Configuration.apply()</code> or\n<code>Configuration.applyAndDisplay()</code>.</p>\n<p>This rule raises an issue when configurations are set without the appropriate call to apply them.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nConfiguration configuration = new Configuration(); // Noncompliant, this configuration will not be applied.\nconfiguration.setComparingPrivateFields(true);\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nConfiguration configuration = new Configuration();\nconfiguration.setComparingPrivateFields(true);\nconfiguration.applyAndDisplay();\n// Alternatively: configuration.apply();\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://assertj.github.io/doc/#assertj-configuration\">AssertJ configuration documentation</a> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "COMPLETE",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S5833",
            "repo": "java",
            "name": "AssertJ methods setting the assertion context should come before an assertion",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "tests",
                "assertj"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "TEST",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5833"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Describing, setting error message or adding a comparator in <a href=\"https://assertj.github.io/doc/\">AssertJ</a> must be done before calling the\nassertion, otherwise, settings will not be taken into account.</p>\n<p>This rule raises an issue when one of the method (with all similar methods):</p>\n<ul>\n  <li> <code>as</code> </li>\n  <li> <code>describedAs</code> </li>\n  <li> <code>withFailMessage</code> </li>\n  <li> <code>overridingErrorMessage</code> </li>\n  <li> <code>usingComparator</code> </li>\n  <li> <code>usingElementComparator</code> </li>\n  <li> <code>extracting</code> </li>\n  <li> <code>filteredOn</code> </li>\n</ul>\n<p>is called without calling an AssertJ assertion afterward.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nassertThat(actual).isEqualTo(expected).as(\"Description\"); // Noncompliant\nassertThat(actual).isEqualTo(expected).withFailMessage(\"Fail message\"); // Noncompliant\nassertThat(actual).isEqualTo(expected).usingComparator(new CustomComparator()); // Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nassertThat(actual).as(\"Description\").isEqualTo(expected);\nassertThat(actual).withFailMessage(\"Fail message\").isEqualTo(expected);\nassertThat(actual).usingComparator(new CustomComparator()).isEqualTo(expected);\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://assertj.github.io/doc/#calling-as-after-the-assertion\">AssertJ incorrect usage documentation</a> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S6804",
            "repo": "java",
            "name": "\"@Value\" annotation should inject property or SpEL expression",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "spring"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S6804"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>The purpose of the <code>@Value</code> annotation in <code>org.springframework.beans.factory.annotation</code> is to inject a value into a field or\nmethod based on the Spring context after it has been established.</p>\n<p>If the annotation does not include an expression (either Spring Expression Language or a property injection), the injected value is a simple\nconstant that does not depend on the Spring context, making the annotation replaceable with a standard field initialization statement.</p>\n<p>This not only implies the redundant use of <code>@Value</code>, but could also indicate an error where the expression indicators (<code>#</code>,\n<code>$</code>) were omitted by mistake.</p>\n<h3>Exceptions</h3>\n<p>This rule does not raise an issue if <code>@Value</code> is applied to a method or method argument, because the annotation has the side effect that\nthe method is called.</p>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<ul>\n  <li> If a property is to be injected, use <code>${propertyName}</code> instead of <code>propertyName</code>. </li>\n  <li> If a SpEL expression is to be evaluated, use <code>#{expression}</code> instead of <code>expression</code>. </li>\n  <li> If you intend to initialize a field with a simple value or with an expression that does not depend on the Spring context, use a standard field\n  initialization statement. </li>\n</ul>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@Value(\"catalog.name\") // Noncompliant, this will not inject the property\nString catalog;\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@Value(\"${catalog.name}\") // Compliant\nString catalog;\n</pre>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\n@Value(\"book.topics[0]\") // Noncompliant, this will not evaluate the expression\nTopic topic;\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\n@Value(\"#{book.topics[0]}\") // Compliant\nTopic topic;\n</pre>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"3\" data-diff-type=\"noncompliant\">\n@Value(\"Hello, world!\") // Noncompliant, this use of @Value is redundant\nString greeting;\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"3\" data-diff-type=\"compliant\">\nString greeting = \"Hello, world!\"; // Compliant\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/annotation/Value.html\">Spring\n  Framework API - Annotation Interface Value</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://www.baeldung.com/spring-value-annotation\">Baeldung - A Quick Guide to Spring @Value</a> </li>\n  <li> <a href=\"https://www.digitalocean.com/community/tutorials/spring-value-annotation\">DigitalOcean - Spring @Value Annotation</a> </li>\n</ul>"
                },
                {
                    "key": "introduction",
                    "content": "<p>This rule reports when the Spring <code>@Value</code> annotation injects a simple value that does not contain an expression.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                },
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S6809",
            "repo": "java",
            "name": "Methods with Spring proxy should not be called via \"this\"",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S6809"
                ]
            },
            "descriptionSections": [
                {
                    "key": "how_to_fix",
                    "content": "<p>Replace calls to <code>@Async</code>, <code>@Cacheable</code> or <code>@Transactional</code> methods via <code>this</code> with calls on an\ninstance that was injected by Spring (<code>@Autowired</code>, <code>@Resource</code> or <code>@Inject</code>). The injected instance is a proxy on\nwhich the methods can be invoked safely.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@Service\npublic class AsyncNotificationProcessor implements NotificationProcessor {\n\n  @Override\n  public void process(Notification notification) {\n    processAsync(notification); // Noncompliant, call bypasses proxy\n    retrieveNotification(notification.id); // Noncompliant, call bypasses proxy and will not be cached\n  }\n\n  @Async\n  public processAsync(Notification notification) {\n    // ...\n  }\n\n  @Cacheable\n  public Notification retrieveNotification(Long id) {\n    // ...\n  }\n\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@Service\npublic class AsyncNotificationProcessor implements NotificationProcessor {\n\n  @Resource\n  private AsyncNotificationProcessor\n\n  @Override\n  public void process(Notification notification) {\n    asyncNotificationProcessor.processAsync(notification); // Compliant, call via injected proxy\n    asyncNotificationProcessor.retrieveNotification(notification.id); // Compliant, the call will be cached\n  }\n\n  @Async\n  public processAsync(Notification notification) {\n    // ...\n  }\n\n  @Cacheable\n  public Notification retrieveNotification(Long id) {\n    // ...\n  }\n}\n</pre>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>A method annotated with Spring’s <code>@Async</code>, <code>@Cacheable</code> or <code>@Transactional</code> annotations will not work as expected\nif invoked directly from within its class.</p>\n<p>This is because Spring generates a proxy class with wrapper code to manage the method’s asynchronicity (<code>@Async</code>), to cache methods\ninvocations (<code>@Cacheable</code>), or to handle the transaction (<code>@Transactional</code>). However, when called using <code>this</code>, the\nproxy instance is bypassed, and the method is invoked directly without the required wrapper code.</p>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/scheduling/annotation/Async.html\">Spring\n  Framework API - Annotation Interface Async</a> </li>\n  <li> <a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/transaction/annotation/Transactional.html\">Spring\n  Framework API - Annotation Interface Transactional</a> </li>\n  <li> <a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/cache/annotation/Cacheable.html\">Spring Framework\n  API - Annotation Interface Cacheable</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://www.baeldung.com/spring-async\">Baeldung - How To Do @Async in Spring</a> </li>\n  <li> <a href=\"https://stackoverflow.com/questions/22561775/spring-async-ignored\">Stack Overflow - Spring @Async ignored</a> </li>\n  <li> <a href=\"https://stackoverflow.com/questions/4396284/does-spring-transactional-attribute-work-on-a-private-method\">Stack Overflow - Does Spring\n  @Transactional attribute work on a private method?</a> </li>\n  <li> <a href=\"https://docs.spring.io/spring-framework/reference/integration/cache/annotations.html#cache-annotations-cacheable\">Spring docs, The\n  @Cacheable Annotation</a> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S6923",
            "repo": "java",
            "name": "Motion Sensor should not use gyroscope",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "android",
                "sustainability"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S6923"
                ]
            },
            "descriptionSections": [
                {
                    "key": "introduction",
                    "content": "<p>The <code>android.hardware.SensorManager#getDefaultSensor</code> offers two types of Motion Sensors:</p>\n<ul>\n  <li> <code>TYPE_ROTATION_VECTOR:</code> a combination of the gyroscope, accelerometer, and magnetometer. </li>\n  <li> <code>TYPE_GEOMAGNETIC_ROTATION_VECTOR:</code> a combination of the accelerometer and magnetometer. </li>\n</ul>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>Replace <code>TYPE_ROTATION_VECTOR</code> with <code>TYPE_GEOMAGNETIC_ROTATION_VECTOR</code> when retrieving the Motion Sensor.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class BackGroundActivity extends Activity {\n\n    private Sensor motionSensor;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        SensorManager sensorManager = (SensorManager) getSystemService(Context.SENSOR_SERVICE);\n        motionSensor = sensorManager.getDefaultSensor(Sensor.TYPE_ROTATION_VECTOR); // Noncompliant\n        // ..\n    }\n    //..\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class BackGroundActivity extends Activity {\n\n    private Sensor motionSensor;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        SensorManager sensorManager = (SensorManager) getSystemService(Context.SENSOR_SERVICE);\n        motionSensor = sensorManager.getDefaultSensor(Sensor.TYPE_GEOMAGNETIC_ROTATION_VECTOR); // Compliant\n        // ..\n    }\n    //..\n}\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://source.android.com/docs/core/interaction/sensors/power-use\">Android - Low Power Sensors</a> </li>\n  <li> <a href=\"https://developer.android.com/develop/sensors-and-location/sensors/sensors_motion\">Android - Motion Sensors</a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>The battery life is a major concern for mobile devices and choosing the right Sensor is very important to reduce the power usage and extend the\nbattery life.</p>\n<p>It is recommended, for reducing the power usage, to use <code>TYPE_GEOMAGNETIC_ROTATION_VECTOR</code> for <em>background tasks</em>,\n<em>long-running tasks</em> and other tasks not requiring accurate motion detection.</p>\n<p>The rule reports an issue when <code>android.hardware.SensorManager#getDefaultSensor</code> uses <code>TYPE_ROTATION_VECTOR</code> instead of\n<code>TYPE_GEOMAGNETIC_ROTATION_VECTOR</code>.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S1116",
            "repo": "java",
            "name": "Empty statements should be removed",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "unused"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:EmptyStatementUsageCheck"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/5dUxBQ\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed\n  </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/IDZGBQ\">CERT, MSC51-J.</a> - Do not place a semicolon immediately following an if, for, or while\n  condition </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/WtYxBQ\">CERT, EXP15-C.</a> - Do not place a semicolon on the same line as an if, for, or while\n  statement </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Empty statements represented by a semicolon <code>;</code> are statements that do not perform any operation. They are often the result of a typo or\na misunderstanding of the language syntax. It is a good practice to remove empty statements since they don’t add value and lead to confusion and\nerrors.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nvoid doSomething() {\n  ; // Noncompliant - was used as a kind of TODO marker\n}\n\nvoid doSomethingElse() {\n  System.out.println(\"Hello, world!\");; // Noncompliant - double ;\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nvoid doSomething() {}\n\nvoid doSomethingElse() {\n  System.out.println(\"Hello, world!\");\n  // ...\n  for (int i = 0; i &lt; 3; i++) ; // Compliant if unique statement of a loop\n  // ...\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S1125",
            "repo": "java",
            "name": "Boolean literals should not be redundant",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "clumsy"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1125"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>A boolean literal can be represented in two different ways: <code>true</code> or <code>false</code>. They can be combined with logical operators\n(<code>!, &amp;&amp;, ||, ==, !=</code>) to produce logical expressions that represent truth values. However, comparing a boolean literal to a\nvariable or expression that evaluates to a boolean value is unnecessary and can make the code harder to read and understand. The more complex a\nboolean expression is, the harder it will be for developers to understand its meaning and expected behavior, and it will favour the introduction of\nnew bugs.</p>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>Remove redundant boolean literals from expressions to improve readability and make the code more maintainable.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nif (booleanMethod() == true) { /* ... */ }\nif (booleanMethod() == false) { /* ... */ }\nif (booleanMethod() || false) { /* ... */ }\ndoSomething(!false);\ndoSomething(booleanMethod() == true);\n\nbooleanVariable = booleanMethod() ? true : false;\nbooleanVariable = booleanMethod() ? true : exp;\nbooleanVariable = booleanMethod() ? false : exp;\nbooleanVariable = booleanMethod() ? exp : true;\nbooleanVariable = booleanMethod() ? exp : false;\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nif (booleanMethod()) { /* ... */ }\nif (!booleanMethod()) { /* ... */ }\nif (booleanMethod()) { /* ... */ }\ndoSomething(true);\ndoSomething(booleanMethod());\n\nbooleanVariable = booleanMethod();\nbooleanVariable = booleanMethod() || exp;\nbooleanVariable = !booleanMethod() &amp;&amp; exp;\nbooleanVariable = !booleanMethod() || exp;\nbooleanVariable = booleanMethod() &amp;&amp; exp;\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S1126",
            "repo": "java",
            "name": "Return of boolean expressions should not be wrapped into an \"if-then-else\" statement",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "clumsy"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1126"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Return of boolean literal statements wrapped into <code>if-then-else</code> ones should be simplified.</p>\n<p>Similarly, method invocations wrapped into <code>if-then-else</code> differing only from boolean literals should be simplified into a single\ninvocation.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nboolean foo(Object param) {\n  if (expression) { // Noncompliant\n    bar(param, true, \"qix\");\n  } else {\n    bar(param, false, \"qix\");\n  }\n\n  if (expression) {  // Noncompliant\n    return true;\n  } else {\n    return false;\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nboolean foo(Object param) {\n  bar(param, expression, \"qix\");\n\n  return expression;\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S1479",
            "repo": "java",
            "name": "\"switch\" statements should not have too many \"case\" clauses",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "brain-overload"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "maximum",
                    "htmlDesc": "Maximum number of case",
                    "defaultValue": "30",
                    "type": "INTEGER"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "30min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "30min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1479"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>When <code>switch</code> statements have large sets of <code>case</code> clauses, it is usually an attempt to map two sets of data. A real map\nstructure would be more readable and maintainable, and should be used instead.</p>\n<h3>Exceptions</h3>\n<p>This rule ignores <code>switch</code>es over <code>Enum</code>s and empty, fall-through cases.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "FOCUSED",
            "cleanCodeAttributeCategory": "ADAPTABLE",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S1488",
            "repo": "java",
            "name": "Local variables should not be declared and then immediately returned or thrown",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "clumsy"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1488"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Declaring a variable only to immediately return or throw it is considered a bad practice because it adds unnecessary complexity to the code. This\npractice can make the code harder to read and understand, as it introduces an extra step that doesn’t add any value. Instead of declaring a variable\nand then immediately returning or throwing it, it is generally better to return or throw the value directly. This makes the code cleaner, simpler, and\neasier to understand.</p>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>Declaring a variable only to immediately return or throw it is considered a bad practice because it adds unnecessary complexity to the code. To fix\nthe issue, return or throw the value directly.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic long computeDurationInMilliseconds() {\n  long duration = (((hours * 60) + minutes) * 60 + seconds) * 1000;\n  return duration;\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic long computeDurationInMilliseconds() {\n  return (((hours * 60) + minutes) * 60 + seconds) * 1000;\n}\n</pre>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\npublic void doSomething() {\n  RuntimeException myException = new RuntimeException();\n  throw myException;\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\npublic void doSomething() {\n  throw new RuntimeException();\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S2447",
            "repo": "java",
            "name": "\"null\" should not be returned from a \"Boolean\" method",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "cert",
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2447"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/476\">CWE-476 - NULL Pointer Dereference</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/aDdGBQ\">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Callers of a <code>Boolean</code> method may be expecting to receive <code>true</code> or <code>false</code> in response. But <code>Boolean</code>\nobjects can take <code>null</code> as a possible value. <code>Boolean</code> methods should not return <code>null</code> unless the code is annotated\nappropriately. With the proper annotation, the caller is aware that the returned value could be null.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic Boolean isUsable() {\n  // ...\n  return null;  // Noncompliant\n}\n\npublic void caller() {\n  if (isUsable()) { // A NullPointerException might occur here\n    // ...\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n@javax.annotation.Nullable\npublic Boolean isUsable() {\n  // ...\n  return null;\n}\n\n@javax.annotation.CheckForNull\npublic Boolean isUsable() {\n  // ...\n  return null;\n}\n\npublic void caller() {\n  if (Boolean.True.equals(isUsable())) { // This caller knows to check and avoid ambiguity\n    // ...\n  }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S2696",
            "repo": "java",
            "name": "Instance methods should not write to \"static\" fields",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "multi-threading"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2696"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<h3>Standards</h3>\n<ul>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222567\">Application Security and\n  Development: V-222567</a> - The application must not be vulnerable to race conditions. </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Correctly updating a <code>static</code> field from a non-static method is tricky to get right and could easily lead to bugs if there are multiple\nclass instances and/or multiple threads in play. Ideally, <code>static</code> fields are only updated from <code>synchronized static</code>\nmethods.</p>\n<p>This rule raises an issue each time a <code>static</code> field is updated from a non-static method.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class MyClass {\n\n  private static int count = 0;\n\n  public void doSomething() {\n    //...\n    count++;  // Noncompliant\n  }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "COMPLETE",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S2698",
            "repo": "java",
            "name": "Test assertions should include messages",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "junit",
                "tests"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "TEST",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2698"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Adding messages to JUnit, FEST and AssertJ assertions is an investment in your future productivity. Spend a few seconds writing them now, and\nyou’ll save a lot of time on the other end when either the tests fail and you need to quickly diagnose the problem, or when you need to maintain the\ntests and the assertion messages work as a sort of documentation.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nassertEquals(4, list.size());  // Noncompliant\n\ntry {\n  fail();  // Noncompliant\n} catch (Exception e) {\n  assertThat(list.get(0)).isEqualTo(\"pear\");  // Noncompliant\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nassertEquals(\"There should have been 4 Fruits in the list\", 4, list.size());\n\ntry {\n  fail(\"And exception is expected here\");\n} catch (Exception e) {\n  assertThat(list.get(0)).as(\"check first element\").overridingErrorMessage(\"The first element should be a pear, not a %s\", list.get(0)).isEqualTo(\"pear\");\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S2699",
            "repo": "java",
            "name": "Tests should include assertions",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "junit",
                "tests"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "customAssertionMethods",
                    "htmlDesc": "Comma-separated list of fully qualified method symbols that should be considered as assertion methods. The wildcard character can be used at the end of the method name.",
                    "type": "STRING"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "TEST",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2699"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>A test case without assertions ensures only that no exceptions are thrown. Beyond basic runnability, it ensures nothing about the behavior of the\ncode under test.</p>\n<p>This rule raises an exception when no assertions from any of the following known frameworks are found in a test:</p>\n<ul>\n  <li> AssertJ </li>\n  <li> Awaitility </li>\n  <li> EasyMock </li>\n  <li> Eclipse Vert.x </li>\n  <li> Fest 1.x and 2.x </li>\n  <li> Hamcrest </li>\n  <li> JMock </li>\n  <li> JMockit </li>\n  <li> JUnit </li>\n  <li> Mockito </li>\n  <li> Rest-assured 2.x, 3.x and 4.x </li>\n  <li> RxJava 1.x and 2.x </li>\n  <li> Selenide </li>\n  <li> Spring’s <code>org.springframework.test.web.servlet.ResultActions.andExpect()</code> and\n  <code>org.springframework.test.web.servlet.ResultActions.andExpectAll()</code> </li>\n  <li> Truth Framework </li>\n  <li> WireMock </li>\n</ul>\n<p>Furthermore, as new or custom assertion frameworks may be used, the rule can be parametrized to define specific methods that will also be\nconsidered as assertions. No issue will be raised when such methods are found in test cases. The parameter value should have the following format\n<code>&lt;FullyQualifiedClassName&gt;#&lt;MethodName&gt;</code>, where <code>MethodName</code> can end with the wildcard character. For constructors,\nthe pattern should be <code>&lt;FullyQualifiedClassName&gt;#&lt;init&gt;</code>.</p>\n<p>Example:&nbsp;<code>com.company.CompareToTester#compare*,com.company.CustomAssert#customAssertMethod,com.company.CheckVerifier#&lt;init&gt;</code>.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n@Test\npublic void testDoSomething() {  // Noncompliant\n  MyClass myClass = new MyClass();\n  myClass.doSomething();\n}\n</pre>\n<h3>Compliant solution</h3>\n<p>Example when <code>com.company.CompareToTester#compare*</code> is used as parameter to the rule.</p>\n<pre>\nimport com.company.CompareToTester;\n\n@Test\npublic void testDoSomething() {\n  MyClass myClass = new MyClass();\n  assertNull(myClass.doSomething());  // JUnit assertion\n  assertThat(myClass.doSomething()).isNull();  // Fest assertion\n}\n\n@Test\npublic void testDoSomethingElse() {\n  MyClass myClass = new MyClass();\n  new CompareToTester().compareWith(myClass);  // Compliant - custom assertion method defined as rule parameter\n  CompareToTester.compareStatic(myClass);  // Compliant\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "TESTED",
            "cleanCodeAttributeCategory": "ADAPTABLE",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "BLOCKER"
                }
            ]
        },
        {
            "key": "java:S3415",
            "repo": "java",
            "name": "Assertion arguments should be passed in the correct order",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "junit",
                "tests",
                "suspicious"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "TEST",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S3415"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>The standard assertions library methods such as <code>org.junit.Assert.assertEquals</code>, and <code>org.junit.Assert.assertSame</code> expect the\nfirst argument to be the expected value and the second argument to be the actual value. For AssertJ instead, the argument of\n<code>org.assertj.core.api.Assertions.assertThat</code> is the actual value, and the subsequent calls contain the expected values.</p>\n<h3>What is the potential impact?</h3>\n<p>Having the expected value and the actual value in the wrong order will not alter the outcome of tests, (succeed/fail when it should) but the error\nmessages will contain misleading information.</p>\n<p>This rule raises an issue when the actual argument to an assertions library method is a hard-coded value and the expected argument is not.</p>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>You should provide the assertion methods with a hard-coded value as the expected value, while the actual value of the assertion should derive from\nthe portion of code that you want to test.</p>\n<p>Supported frameworks:</p>\n<ul>\n  <li> <a href=\"https://junit.org/junit4/\">JUnit4</a> </li>\n  <li> <a href=\"https://junit.org/junit5/docs/current/user-guide/\">JUnit5</a> </li>\n  <li> <a href=\"https://assertj.github.io/doc/\">AssertJ</a> </li>\n</ul>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\norg.junit.Assert.assertEquals(runner.exitCode(), 0, \"Unexpected exit code\");  // Noncompliant; Yields error message like: Expected:&lt;-1&gt;. Actual:&lt;0&gt;.\norg.assertj.core.api.Assertions.assertThat(0).isEqualTo(runner.exitCode()); // Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\norg.junit.Assert.assertEquals(0, runner.exitCode(), \"Unexpected exit code\");\norg.assertj.core.api.Assertions.assertThat(runner.exitCode()).isEqualTo(0);\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S3416",
            "repo": "java",
            "name": "Loggers should be named for their enclosing classes",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "logging",
                "confusing"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S3416"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>It is convention to name each class’s logger for the class itself. Doing so allows you to set up clear, communicative logger configuration. Naming\nloggers by some other convention confuses configuration, and using the same class name for multiple class loggers prevents the granular configuration\nof each class' logger. Some libraries, such as SLF4J warn about this, but not all do.</p>\n<p>This rule raises an issue when a logger is not named for its enclosing class.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class MyClass {\n  private final static Logger LOG = LoggerFactory.getLogger(WrongClass.class);  // Noncompliant; multiple classes using same logger\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic class MyClass {\n  private final static Logger LOG = LoggerFactory.getLogger(MyClass.class);\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "IDENTIFIABLE",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S3546",
            "repo": "java",
            "name": "Custom resources should be closed",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": true,
            "tags": [],
            "sysTags": [
                "symbolic-execution",
                "denial-of-service"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "factoryMethod",
                    "htmlDesc": "the fully-qualified name of a factory method that returns an open resource, with or without a parameter list. E.G. &quot;org.assoc.res.ResourceFactory$Innerclass#create&quot; or &quot;org.assoc.res.SpecialResourceFactory#create(java.lang.String, int)&quot;",
                    "type": "STRING"
                },
                {
                    "key": "closingMethod",
                    "htmlDesc": "the fully-qualified name of the method which closes the open resource, with or without a parameter list. E.G. &quot;org.assoc.res.MyResource#closeMe&quot; or &quot;org.assoc.res.MySpecialResource#closeMe(java.lang.String, int)&quot;",
                    "type": "STRING"
                },
                {
                    "key": "constructor",
                    "htmlDesc": "the fully-qualified name of a constructor that creates an open resource. An optional signature may be specified after the class name. E.G. &quot;org.assoc.res.MyResource&quot; or &quot;org.assoc.res.MySpecialResource(java.lang.String, int)&quot;",
                    "type": "STRING"
                },
                {
                    "key": "openingMethod",
                    "htmlDesc": "the fully-qualified name of a method that opens an existing resource, with or without a parameter list. E.G. &quot;org.assoc.res.ResourceFactory#create&quot; or &quot;org.assoc.res.SpecialResourceFactory #create(java.lang.String, int)&quot;",
                    "type": "STRING"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "0min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "0min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Leaking resources in an application is never a good idea, as it can lead to memory issues, and even the crash of the application. This rule\ntemplate allows you to specify which constructions open a resource and how it is closed in order to raise issue within a method scope when custom\nresources are leaked.</p>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Related rules</h3>\n<ul>\n  <li> <a href='/coding_rules#rule_key=java%3AS2095'>S2095</a> - Resources should be closed </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "COMPLETE",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S3658",
            "repo": "java",
            "name": "Unit tests should throw exceptions",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "error-handling",
                "junit",
                "tests",
                "clumsy"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "TEST",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S3658"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>When the code under test in a unit test throws an exception, the test itself fails. Therefore, there is no need to surround the tested code with a\n<code>try</code>-<code>catch</code> structure to detect failure. Instead, you can simply move the exception type to the method signature.</p>\n<p>This rule raises an issue when there is a fail assertion inside a <code>catch</code> block.</p>\n<p>Supported frameworks:</p>\n<ul>\n  <li> JUnit3 </li>\n  <li> JUnit4 </li>\n  <li> JUnit5 </li>\n  <li> Fest assert </li>\n  <li> AssertJ </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<pre>\n@Test\npublic void testMethod() {\n  try {\n            // Some code\n  } catch (MyException e) {\n    Assert.fail(e.getMessage());  // Noncompliant\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n@Test\npublic void testMethod() throws MyException {\n    // Some code\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S4507",
            "repo": "java",
            "name": "Delivering code in production with debug features activated is security-sensitive",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "error-handling",
                "spring",
                "debug",
                "user-experience"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "SECURITY_HOTSPOT",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "1min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "1min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S4507"
                ]
            },
            "descriptionSections": [
                {
                    "key": "default",
                    "content": "<p>Development tools and frameworks usually have options to make debugging easier for developers. Although these features are useful during\ndevelopment, they should never be enabled for applications deployed in production. Debug instructions or error messages can leak detailed information\nabout the system, like the application’s path or file names.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The code or configuration enabling the application debug features is deployed on production servers or distributed to end users. </li>\n  <li> The application runs by default with debug features activated. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Do not enable debugging features on production servers or applications distributed to end users.</p>\n<h2>Sensitive Code Example</h2>\n<p><code>Throwable.printStackTrace(...)</code> prints a Throwable and its stack trace to <code>System.Err</code> (by default) which is not easily\nparseable and can expose sensitive information:</p>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  e.printStackTrace(); // Sensitive\n}\n</pre>\n<p><a\nhref=\"https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/config/annotation/web/configuration/EnableWebSecurity.html\">EnableWebSecurity</a>\nannotation for SpringFramework with <code>debug</code> to <code>true</code> enables debugging support:</p>\n<pre>\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n\n@Configuration\n@EnableWebSecurity(debug = true) // Sensitive\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n  // ...\n}\n</pre>\n<p><a\nhref=\"https://developer.android.com/reference/android/webkit/WebView#setWebContentsDebuggingEnabled(boolean)\">WebView.setWebContentsDebuggingEnabled(true)</a>\nfor Android enables debugging support:</p>\n<pre>\nimport android.webkit.WebView;\n\nWebView.setWebContentsDebuggingEnabled(true); // Sensitive\nWebView.getFactory().getStatics().setWebContentsDebuggingEnabled(true); // Sensitive\n</pre>\n<h2>Compliant Solution</h2>\n<p>Loggers should be used (instead of <code>printStackTrace</code>) to print throwables:</p>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  LOGGER.log(\"context\", e);\n}\n</pre>\n<p><a\nhref=\"https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/config/annotation/web/configuration/EnableWebSecurity.html\">EnableWebSecurity</a>\nannotation for SpringFramework with <code>debug</code> to <code>false</code> disables debugging support:</p>\n<pre>\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n\n@Configuration\n@EnableWebSecurity(debug = false)\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n  // ...\n}\n</pre>\n<p><a\nhref=\"https://developer.android.com/reference/android/webkit/WebView#setWebContentsDebuggingEnabled(boolean)\">WebView.setWebContentsDebuggingEnabled(false)</a>\nfor Android disables debugging support:</p>\n<pre>\nimport android.webkit.WebView;\n\nWebView.setWebContentsDebuggingEnabled(false);\nWebView.getFactory().getStatics().setWebContentsDebuggingEnabled(false);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">Top 10 2021 Category A5 - Security Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/489\">CWE-489 - Active Debug Code</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/215\">CWE-215 - Information Exposure Through Debug Information</a> </li>\n</ul>"
                },
                {
                    "key": "assess_the_problem",
                    "content": "<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The code or configuration enabling the application debug features is deployed on production servers or distributed to end users. </li>\n  <li> The application runs by default with debug features activated. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Sensitive Code Example</h2>\n<p><code>Throwable.printStackTrace(...)</code> prints a Throwable and its stack trace to <code>System.Err</code> (by default) which is not easily\nparseable and can expose sensitive information:</p>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  e.printStackTrace(); // Sensitive\n}\n</pre>\n<p><a\nhref=\"https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/config/annotation/web/configuration/EnableWebSecurity.html\">EnableWebSecurity</a>\nannotation for SpringFramework with <code>debug</code> to <code>true</code> enables debugging support:</p>\n<pre>\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n\n@Configuration\n@EnableWebSecurity(debug = true) // Sensitive\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n  // ...\n}\n</pre>\n<p><a\nhref=\"https://developer.android.com/reference/android/webkit/WebView#setWebContentsDebuggingEnabled(boolean)\">WebView.setWebContentsDebuggingEnabled(true)</a>\nfor Android enables debugging support:</p>\n<pre>\nimport android.webkit.WebView;\n\nWebView.setWebContentsDebuggingEnabled(true); // Sensitive\nWebView.getFactory().getStatics().setWebContentsDebuggingEnabled(true); // Sensitive\n</pre>\n"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Development tools and frameworks usually have options to make debugging easier for developers. Although these features are useful during\ndevelopment, they should never be enabled for applications deployed in production. Debug instructions or error messages can leak detailed information\nabout the system, like the application’s path or file names.</p>\n"
                },
                {
                    "key": "how_to_fix",
                    "content": "<h2>Recommended Secure Coding Practices</h2>\n<p>Do not enable debugging features on production servers or applications distributed to end users.</p>\n<h2>Compliant Solution</h2>\n<p>Loggers should be used (instead of <code>printStackTrace</code>) to print throwables:</p>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  LOGGER.log(\"context\", e);\n}\n</pre>\n<p><a\nhref=\"https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/config/annotation/web/configuration/EnableWebSecurity.html\">EnableWebSecurity</a>\nannotation for SpringFramework with <code>debug</code> to <code>false</code> disables debugging support:</p>\n<pre>\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n\n@Configuration\n@EnableWebSecurity(debug = false)\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n  // ...\n}\n</pre>\n<p><a\nhref=\"https://developer.android.com/reference/android/webkit/WebView#setWebContentsDebuggingEnabled(boolean)\">WebView.setWebContentsDebuggingEnabled(false)</a>\nfor Android disables debugging support:</p>\n<pre>\nimport android.webkit.WebView;\n\nWebView.setWebContentsDebuggingEnabled(false);\nWebView.getFactory().getStatics().setWebContentsDebuggingEnabled(false);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">Top 10 2021 Category A5 - Security Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/489\">CWE-489 - Active Debug Code</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/215\">CWE-215 - Information Exposure Through Debug Information</a> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "impacts": []
        },
        {
            "key": "java:S4512",
            "repo": "java",
            "name": "Setting JavaBean properties is security-sensitive",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "SECURITY_HOTSPOT",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S4512"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Setting JavaBean properties is security sensitive. Doing it with untrusted values has led in the past to the following vulnerability:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0114\">CVE-2014-0114</a> </li>\n</ul>\n<p>JavaBeans can have their properties or nested properties set by population functions. An attacker can leverage this feature to push into the\nJavaBean malicious data that can compromise the software integrity. A typical attack will try to manipulate the ClassLoader and finally execute\nmalicious code.</p>\n<p>This rule raises an issue when:</p>\n<ul>\n  <li> BeanUtils.populate(…​) or BeanUtilsBean.populate(…​) from <a href=\"http://commons.apache.org/proper/commons-beanutils/\">Apache Commons\n  BeanUtils</a> are called </li>\n  <li> BeanUtils.setProperty(…​) or BeanUtilsBean.setProperty(…​) from <a href=\"http://commons.apache.org/proper/commons-beanutils/\">Apache Commons\n  BeanUtils</a> are called </li>\n  <li> org.springframework.beans.BeanWrapper.setPropertyValue(…​) or org.springframework.beans.BeanWrapper.setPropertyValues(…​) from Spring is called\n  </li>\n</ul>\n"
                },
                {
                    "key": "assess_the_problem",
                    "content": "<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the new property values might have been tampered with or provided by an untrusted source. </li>\n  <li> sensitive properties can be modified, for example: <code>class.classLoader</code> </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\nCompany bean = new Company();\nHashMap map = new HashMap();\nEnumeration names = request.getParameterNames();\nwhile (names.hasMoreElements()) {\n    String name = (String) names.nextElement();\n    map.put(name, request.getParameterValues(name));\n}\nBeanUtils.populate(bean, map); // Sensitive: \"map\" is populated with data coming from user input, here \"request.getParameterNames()\"\n</pre>\n"
                },
                {
                    "key": "default",
                    "content": "<p>Setting JavaBean properties is security sensitive. Doing it with untrusted values has led in the past to the following vulnerability:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0114\">CVE-2014-0114</a> </li>\n</ul>\n<p>JavaBeans can have their properties or nested properties set by population functions. An attacker can leverage this feature to push into the\nJavaBean malicious data that can compromise the software integrity. A typical attack will try to manipulate the ClassLoader and finally execute\nmalicious code.</p>\n<p>This rule raises an issue when:</p>\n<ul>\n  <li> BeanUtils.populate(…​) or BeanUtilsBean.populate(…​) from <a href=\"http://commons.apache.org/proper/commons-beanutils/\">Apache Commons\n  BeanUtils</a> are called </li>\n  <li> BeanUtils.setProperty(…​) or BeanUtilsBean.setProperty(…​) from <a href=\"http://commons.apache.org/proper/commons-beanutils/\">Apache Commons\n  BeanUtils</a> are called </li>\n  <li> org.springframework.beans.BeanWrapper.setPropertyValue(…​) or org.springframework.beans.BeanWrapper.setPropertyValues(…​) from Spring is called\n  </li>\n</ul>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the new property values might have been tampered with or provided by an untrusted source. </li>\n  <li> sensitive properties can be modified, for example: <code>class.classLoader</code> </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Sanitize all values used as JavaBean properties.</p>\n<p>Don’t set any sensitive properties. Keep full control over which properties are set. If the property names are provided by an unstrusted source,\nfilter them with a whitelist.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\nCompany bean = new Company();\nHashMap map = new HashMap();\nEnumeration names = request.getParameterNames();\nwhile (names.hasMoreElements()) {\n    String name = (String) names.nextElement();\n    map.put(name, request.getParameterValues(name));\n}\nBeanUtils.populate(bean, map); // Sensitive: \"map\" is populated with data coming from user input, here \"request.getParameterNames()\"\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/\">Top 10 2021 Category A8 - Software and Data Integrity\n  Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/915\">CWE-915 - Improperly Controlled Modification of Dynamically-Determined Object\n  Attributes</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/hDdGBQ\">CERT, MSC61-J.</a> - Do not use insecure or weak cryptographic algorithms </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#BEAN_PROPERTY_INJECTION\">BEAN_PROPERTY_INJECTION</a> </li>\n</ul>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<h2>Recommended Secure Coding Practices</h2>\n<p>Sanitize all values used as JavaBean properties.</p>\n<p>Don’t set any sensitive properties. Keep full control over which properties are set. If the property names are provided by an unstrusted source,\nfilter them with a whitelist.</p>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/\">Top 10 2021 Category A8 - Software and Data Integrity\n  Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/915\">CWE-915 - Improperly Controlled Modification of Dynamically-Determined Object\n  Attributes</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/hDdGBQ\">CERT, MSC61-J.</a> - Do not use insecure or weak cryptographic algorithms </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#BEAN_PROPERTY_INJECTION\">BEAN_PROPERTY_INJECTION</a> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "impacts": []
        },
        {
            "key": "java:S4635",
            "repo": "java",
            "name": "String offset-based methods should be preferred for finding substrings from offsets",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "performance"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S4635"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Looking for a given substring starting from a specified offset can be achieved by such code: <code>str.substring(beginIndex).indexOf(char1)</code>.\nThis works well, but it creates a new <code>String</code> for each call to the <code>substring</code> method. When this is done in a loop, a lot of\n<code>Strings</code> are created for nothing, which can lead to performance problems if <code>str</code> is large.</p>\n<p>To avoid performance problems, <code>String.substring(beginIndex)</code> should not be chained with the following methods:</p>\n<ul>\n  <li> <code>indexOf(int ch)</code> </li>\n  <li> <code>indexOf(String str)</code> </li>\n  <li> <code>lastIndexOf(int ch)</code> </li>\n  <li> <code>lastIndexOf(String str)</code> </li>\n  <li> <code>startsWith(String prefix)</code> </li>\n</ul>\n<p>For each of these methods, another method with an additional parameter is available to specify an offset.</p>\n<p>Using these methods will avoid the creation of additional <code>String</code> instances. For indexOf methods, adjust the returned value by\nsubtracting the substring index parameter to obtain the same result.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nstr.substring(beginIndex).indexOf(char1); // Noncompliant; a new String is going to be created by \"substring\"\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nstr.indexOf(char1, beginIndex) - beginIndex; // index for char1 not found is (-1-beginIndex)\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "EFFICIENT",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S5838",
            "repo": "java",
            "name": "Chained AssertJ assertions should be simplified to the corresponding dedicated assertion",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "tests",
                "assertj"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "TEST",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5838"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>AssertJ contains many assertions methods specific to common types. Both versions will test the same things, but the dedicated one will provide a\nbetter error message, simplifying the debugging process.</p>\n<p>This rule reports an issue when an assertion can be simplified to a dedicated one.</p>\n<p>The array below gives a non-exhaustive list of assertion reported by the rule. Code behaving similarly, or with a negation will also be\nreported.</p>\n<table>\n  <colgroup>\n    <col style=\"width: 50%;\">\n    <col style=\"width: 50%;\">\n  </colgroup>\n  <thead>\n    <tr>\n      <th>Original</th>\n      <th>Dedicated</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><p><strong>Related to Object</strong></p></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getObject()).isEqualTo(null)</code></p></td>\n      <td><p><code>assertThat(getObject()).isNull()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getBoolean()).isEqualTo(true)</code></p></td>\n      <td><p><code>assertThat(getBoolean()).isTrue()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getBoolean()).isEqualTo(false)</code></p></td>\n      <td><p><code>assertThat(getBoolean()).isFalse()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(x.equals(y)).isTrue()</code></p></td>\n      <td><p><code>assertThat(x).isEqualTo(y)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(x == y).isTrue()</code></p></td>\n      <td><p><code>assertThat(x).isSameAs(y)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(x == null).isTrue()</code></p></td>\n      <td><p><code>assertThat(x).isNull()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(x.toString()).isEqualTo(y)</code></p></td>\n      <td><p><code>assertThat(x).hasToString(y)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(x.hashCode()).isEqualTo(y.hashCode())</code></p></td>\n      <td><p><code>assertThat(x).hasSameHashCodeAs(y)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getObject() instanceof MyClass).isTrue()</code></p></td>\n      <td><p><code>assertThat(getObject()).isInstanceOf(MyClass.class)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><strong>Related to <code>Comparable</code></strong></p></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(x.compareTo(y)).isZero()</code></p></td>\n      <td><p><code>assertThat(x).isEqualByComparingTo(y)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(x &gt;= y).isTrue()</code></p></td>\n      <td><p><code>assertThat(x).isGreaterThanOrEqualTo(y)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(x &gt; y).isTrue()</code></p></td>\n      <td><p><code>assertThat(x).isGreaterThan(y)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(x &lt;= y).isTrue()</code></p></td>\n      <td><p><code>assertThat(x).isLessThanOrEqualTo(y)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(x &lt; y).isTrue()</code></p></td>\n      <td><p><code>assertThat(x).isLessThan(y)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><strong>Related to <code>String</code></strong></p></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getString().isEmpty()).isTrue()</code></p></td>\n      <td><p><code>assertThat(getString()).isEmpty()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getString()).hasSize(0)</code></p></td>\n      <td><p><code>assertThat(getString()).isEmpty()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getString().equals(expected)).isTrue()</code></p></td>\n      <td><p><code>assertThat(getString()).isEqualTo(expected)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getString().equalsIgnoreCase(expected)).isTrue()</code></p></td>\n      <td><p><code>assertThat(getString()).isEqualToIgnoringCase(expected)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getString().contains(expected)).isTrue()</code></p></td>\n      <td><p><code>assertThat(getString()).contains(expected)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getString().startsWith(expected)).isTrue()</code></p></td>\n      <td><p><code>assertThat(getString()).startsWith(expected)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getString().endsWith(expected)).isTrue()</code></p></td>\n      <td><p><code>assertThat(getString()).endsWith(expected)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getString().matches(expected)).isTrue()</code></p></td>\n      <td><p><code>assertThat(getString()).matches(expected)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getString().trim()).isEmpty()</code></p></td>\n      <td><p><code>assertThat(getString()).isBlank()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getString().length()).isEqualTo(length)</code></p></td>\n      <td><p><code>assertThat(getString()).hasSize(length)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getString().length()).hasSize(expected.length())</code></p></td>\n      <td><p><code>assertThat(getString()).hasSameSizeAs(expected)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><strong>&nbsp;Related to <code>File</code></strong></p></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getFile()).hasSize(0)</code></p></td>\n      <td><p><code>assertThat(getFile()).isEmpty()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getFile().length()).isZero()</code></p></td>\n      <td><p><code>assertThat(getFile()).isEmpty()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getFile().length()).isEqualTo(length)</code></p></td>\n      <td><p><code>assertThat(getFile()).hasSize(length)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getFile().canRead()).isTrue()</code></p></td>\n      <td><p><code>assertThat(getFile()).canRead()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getFile().canWrite()).isTrue()</code></p></td>\n      <td><p><code>assertThat(getFile()).canWrite()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getFile().exists()).isTrue()</code></p></td>\n      <td><p><code>assertThat(getFile()).exists()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getFile().getName()).isEqualTo(name)</code></p></td>\n      <td><p><code>assertThat(getFile()).hasName(name)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getFile().getParent()).isEqualTo(pathname)</code></p></td>\n      <td><p><code>assertThat(getFile()).hasParent(pathname)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getFile().getParentFile()).isNull()</code></p></td>\n      <td><p><code>assertThat(getFile()).hasNoParent()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getFile().isAbsolute()).isTrue()</code></p></td>\n      <td><p><code>assertThat(getFile()).isAbsolute()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getFile().isAbsolute()).isFalse()</code></p></td>\n      <td><p><code>assertThat(getFile()).isRelative()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getFile().isDirectory()).isTrue()</code></p></td>\n      <td><p><code>assertThat(getFile()).isDirectory()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getFile().isFile()).isTrue()</code></p></td>\n      <td><p><code>assertThat(getFile()).isFile()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getFile().list()).isEmpty()</code></p></td>\n      <td><p><code>assertThat(getFile()).isEmptyDirectory()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><strong>&nbsp;Related to <code>Path</code></strong></p></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getPath().startsWith(path)).isTrue()</code></p></td>\n      <td><p><code>assertThat(getPath()).startsWithRaw(path)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getPath().endsWith(path)).isTrue()</code></p></td>\n      <td><p><code>assertThat(getPath()).endsWithRaw(path)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getPath().getParent()).isEqualTo(name)</code></p></td>\n      <td><p><code>assertThat(getPath()).hasParentRaw(name)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getPath().getParent()).isNull()</code></p></td>\n      <td><p><code>assertThat(getPath()).hasNoParentRaw()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getPath().isAbsolute()).isTrue()</code></p></td>\n      <td><p><code>assertThat(getPath()).isAbsolute()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getPath().isAbsolute()).isFalse()</code></p></td>\n      <td><p><code>assertThat(getPath()).isRelative()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><strong>&nbsp;Related to <code>Array</code></strong></p></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getArray().length).isZero()</code></p></td>\n      <td><p><code>assertThat(getArray()).isEmpty()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getArray().length).isEqualTo(length)</code></p></td>\n      <td><p><code>assertThat(getArray()).hasSize(length)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getArray().length).isEqualTo(anotherArray.length)</code></p></td>\n      <td><p><code>assertThat(getArray()).hasSameSizeAs(anotherArray)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getArray().length).isLessThanOrEqualTo(expression)</code></p></td>\n      <td><p><code>assertThat(getArray()).hasSizeLessThanOrEqualTo(expression)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getArray().length).isLessThan(expression)</code></p></td>\n      <td><p><code>assertThat(getArray()).hasSizeLessThan(expression)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getArray().length).isGreaterThan(expression)</code></p></td>\n      <td><p><code>assertThat(getArray()).hasSizeGreaterThan(expression)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getArray().length).isGreaterThanOrEqualTo(expression)</code></p></td>\n      <td><p><code>assertThat(getArray()).hasSizeGreaterThanOrEqualTo(expression)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><strong>Related to <code>Collection</code></strong></p></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getCollection().isEmpty()).isTrue()</code></p></td>\n      <td><p><code>assertThat(getCollection()).isEmpty()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getCollection().size()).isZero()</code></p></td>\n      <td><p><code>assertThat(getCollection()).isEmpty()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getCollection().contains(something)).isTrue()</code></p></td>\n      <td><p><code>assertThat(getCollection()).contains(something)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getCollection().containsAll(otherCollection)).isTrue()</code></p></td>\n      <td><p><code>assertThat(getCollection()).containsAll(otherCollection)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><strong>Related to <code>Map</code></strong></p></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getMap().size()).isEqualTo(otherMap().size()</code></p></td>\n      <td><p><code>assertThat(getMap()).hasSameSizeAs(otherMap())</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getMap().containsKey(key)).isTrue()</code></p></td>\n      <td><p><code>assertThat(getMap()).containsKey(key)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getMap().keySet()).contains(key)</code></p></td>\n      <td><p><code>assertThat(getMap()).containsKey(key)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getMap().keySet()).containsOnlyKey(key)</code></p></td>\n      <td><p><code>assertThat(getMap()).containsOnlyKey(key)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getMap().containsValue(value)).isTrue()</code></p></td>\n      <td><p><code>assertThat(getMap()).containsValue(value)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getMap().values()).contains(value)</code></p></td>\n      <td><p><code>assertThat(getMap()).containsValue(value)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getMap().get(key)).isEqualTo(value)</code></p></td>\n      <td><p><code>assertThat(getMap()).containsEntry(key, value)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><strong>Related to <code>Optional</code></strong></p></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getOptional().isPresent()).isTrue()</code></p></td>\n      <td><p><code>assertThat(getOptional()).isPresent()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getOptional().get()).isEqualTo(something)</code></p></td>\n      <td><p><code>assertThat(getOptional()).contains(something)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getOptional().get()).isSameAs(something)</code></p></td>\n      <td><p><code>assertThat(getOptional()).containsSame(something)</code></p></td>\n    </tr>\n  </tbody>\n</table>\n<h3>Noncompliant code example</h3>\n<pre>\nassertThat(getObject()).isEqualTo(null); // Noncompliant\nassertThat(getObject()).isNotEqualTo(null); // Noncompliant - not listed above but also supported\n\nassertThat(getString().trim()).isEmpty();\nassertThat(getFile().canRead()).isTrue();\nassertThat(getPath().getParent()).isNull();\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nassertThat(getObject()).isNull();\nassertThat(getObject()).isNotNull();\n\nassertThat(getString()).isBlank();\nassertThat(getFile()).canRead();\nassertThat(getPath()).hasNoParentRaw();\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S5842",
            "repo": "java",
            "name": "Repeated patterns in regular expressions should not match the empty string",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "regex"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5842"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>A regex should never include a repetitive pattern whose body would match the empty string. This is usually a sign that a part of the regex is\nredundant or does not do what the author intended.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n\"(?:)*\"      // same as the empty regex, the '*' accomplishes nothing\n\"(?:|x)*\"    // same as the empty regex, the alternative has no effect\n\"(?:x|)*\"    // same as 'x*', the empty alternative has no effect\n\"(?:x*|y*)*\" // same as 'x*', the first alternative would always match, y* is never tried\n\"(?:x?)*\"    // same as 'x*'\n\"(?:x?)+\"    // same as 'x*'\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n\"x*\"\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S5843",
            "repo": "java",
            "name": "Regular expressions should not be too complicated",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "regex"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "maxComplexity",
                    "htmlDesc": "The maximum authorized complexity.",
                    "defaultValue": "20",
                    "type": "INTEGER"
                }
            ],
            "defaultDebtRemFnType": "LINEAR_OFFSET",
            "debtRemFnType": "LINEAR_OFFSET",
            "type": "CODE_SMELL",
            "defaultRemFnType": "LINEAR_OFFSET",
            "defaultRemFnGapMultiplier": "2min",
            "defaultRemFnBaseEffort": "8min",
            "remFnType": "LINEAR_OFFSET",
            "remFnGapMultiplier": "2min",
            "remFnBaseEffort": "8min",
            "remFnOverloaded": false,
            "gapDescription": "number of complexity points over the configurable limit",
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5843"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Overly complicated regular expressions are hard to read and to maintain and can easily cause hard-to-find bugs. If a regex is too complicated, you\nshould consider replacing it or parts of it with regular code or splitting it apart into multiple patterns at least.</p>\n<p>The complexity of a regular expression is determined as follows:</p>\n<p>Each of the following operators increases the complexity by an amount equal to the current nesting level and also increases the current nesting\nlevel by one for its arguments:</p>\n<ul>\n  <li> <code>|</code> - when multiple <code>|</code> operators are used together, the subsequent ones only increase the complexity by 1 </li>\n  <li> <code>&amp;&amp;</code> (inside character classes) - when multiple <code>&amp;&amp;</code> operators are used together, the subsequent ones\n  only increase the complexity by 1 </li>\n  <li> Quantifiers (<code>*</code>, <code>+</code>, <code>?</code>, <code>{n,m}</code>, <code>{n,}</code> or <code>{n}</code>) </li>\n  <li> Non-capturing groups that set flags (such as <code>(?i:some_pattern)</code> or <code>(?i)some_pattern</code>) </li>\n  <li> Lookahead and lookbehind assertions </li>\n</ul>\n<p>Additionally, each use of the following features increase the complexity by 1 regardless of nesting:</p>\n<ul>\n  <li> character classes </li>\n  <li> back references </li>\n</ul>\n<p>If a regular expression is split among multiple variables, the complexity is calculated for each variable individually, not for the whole regular\nexpression. If a regular expression is split over multiple lines, each line is treated individually if it is accompanied by a comment (either a Java\ncomment or a comment within the regular expression), otherwise the regular expression is analyzed as a whole.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nif (dateString.matches(\"^(?:(?:31(\\\/|-|\\\\.)(?:0?[13578]|1[02]))\\\\1|(?:(?:29|30)(\\\/|-|\\\\.)(?:0?[13-9]|1[0-2])\\\\2))(?:(?:1[6-9]|[2-9]\\\\d)?\\\\d{2})$|^(?:29(\\\/|-|\\\\.)0?2\\\\3(?:(?:(?:1[6-9]|[2-9]\\\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\\\\d|2[0-8])(\\\/|-|\\\\.)(?:(?:0?[1-9])|(?:1[0-2]))\\\\4(?:(?:1[6-9]|[2-9]\\\\d)?\\\\d{2})$\")) {\n    handleDate(dateString);\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nif (dateString.matches(\"^\\\\d{1,2}([-/.])\\\\d{1,2}\\\\1\\\\d{1,4}$\")) {\n    String dateParts[] = dateString.split(\"[-/.]\");\n    int day = Integer.parseInt(dateParts[0]);\n    int month = Integer.parseInt(dateParts[1]);\n    int year = Integer.parseInt(dateParts[2]);\n    // Put logic to validate and process the date based on its integer parts here\n}\n</pre>\n<h3>Exceptions</h3>\n<p>Regular expressions are only analyzed if all parts of the regular expression are either string literals, effectively final local variables or\n<code>static final</code> fields, all of which can be combined using the '<code>+</code>' operator.</p>\n<p>When a regular expression is split among multiple variables or commented lines, each part is only analyzed if it is syntactically valid by\nitself.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S5958",
            "repo": "java",
            "name": "AssertJ \"assertThatThrownBy\" should not be used alone",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "tests",
                "assertj"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "TEST",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5958"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Unlike similar AssertJ methods testing exceptions (<code>assertThatCode()</code>, <code>assertThatExceptionOfType()</code>, …​), the\n<code>assertThatThrownBy()</code> method can be used alone, failing if the code did not raise any exception.</p>\n<p>Still, only testing that an exception was raised is not enough to guarantee that it was the expected one, and you should test the exception type or\ncontent further. In addition, it will make explicit what you are expecting, without relying on side-effects.</p>\n<p>This rule raises an issue when <code>assertThatThrownBy</code> is used, without testing the exception further.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nassertThatThrownBy(() -&gt; shouldThrow()); // Noncompliant, is it really the exception you expected?\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nassertThatThrownBy(() -&gt; shouldThrow()).isInstanceOf(IOException.class);\n//or\nassertThatThrownBy(() -&gt; shouldThrow()).hasMessage(\"My exception\");\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "TESTED",
            "cleanCodeAttributeCategory": "ADAPTABLE",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S6806",
            "repo": "java",
            "name": "Model attributes should follow the Java identifier naming convention",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S6806"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://www.oracle.com/java/technologies/javase/codeconventions-namingconventions.html\">Java SE - naming conventions</a> </li>\n  <li> <a href=\"https://docs.spring.io/spring-framework/reference/core/expressions.html\">Spring Expression Language (SpEL)</a> </li>\n  <li> <a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/ui/Model.html\">Spring IO Docs - Interface\n  Model</a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Spring Expression Language (SpEL) is an expression language used in the Spring Framework for evaluating and manipulating objects, properties, and\nconditions within Spring-based applications.</p>\n<p><code>org.springframework.ui.Model</code> is an interface in the Spring Framework that represents a container for data that can be passed between a\ncontroller and a view in a Spring MVC web application, allowing for data sharing during the request-response cycle.</p>\n<p>Attributes added to the <code>org.springframework.ui.Model</code> should follow the Java identifier naming convention, which means they must start\nwith a letter <code>a-z, A-Z</code>, underscore <code>_</code>, or a dollar sign <code>$</code> and may be followed by letters, digits, underscores,\nor dollar signs.</p>\n<p>Failure to do so may result in SpEL parsing errors when using these attributes in template engines.</p>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>Follow the Java identifier naming convention.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nmodel.addAttribute(\" a\", 100); // Noncompliant (starts with a space)\nmodel.addAttribute(\"a-b\", 7);  // Noncompliant (contains a hyphen)\nmodel.addAttribute(\"1c\", 42);  // Noncompliant (starts with a digit)\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nmodel.addAttribute(\"a\", 100);\nmodel.addAttribute(\"b\", 42);\nmodel.addAttribute(\"_c\", 7);\nmodel.addAttribute(\"$d\", 8);\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                },
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S6810",
            "repo": "java",
            "name": "Async methods should return void or Future",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S6810"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> Spring Framework Documentation - <a\n  href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/scheduling/annotation/Async.html\">Annotation Interface\n  Async</a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>The Spring framework provides the annotation <code>Async</code> to mark a method (or all methods of a type) as a candidate for asynchronous\nexecution.</p>\n<p>Asynchronous methods do not necessarily, by their nature, return the result of their calculation immediately. Hence, it is unexpected and in clear\nbreach of the <code>Async</code> contract for such methods to have a return type that is neither <code>void</code> nor a <code>Future</code> type.</p>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>Use <code>void</code> as the return type if the method is not expected to return a result. Otherwise, a <code>Future</code> should be returned,\nallowing the caller to retrieve the result once it is ready. It is permitted to return more specific subtypes that inherit from\n<code>Future</code>.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@Async\npublic String asyncMethod() {\n  ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@Async\npublic Future&lt;String&gt; asyncMethod() {\n  ...\n}\n</pre>\n<p>Alternatively, if the method does not need to return a result:</p>\n<pre>\n@Async\npublic void asyncMethod() {\n  ...\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S6926",
            "repo": "java",
            "name": "Bluetooth should be configured to use low power",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "android",
                "sustainability"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S6926"
                ]
            },
            "descriptionSections": [
                {
                    "key": "how_to_fix",
                    "content": "<ul>\n  <li> Use <code>CONNECTION_PRIORITY_LOW_POWER</code> for <code>requestConnectionPriority</code> method. </li>\n  <li> Use <code>ADVERTISE_MODE_LOW_POWER</code> for <code>setAdvertiseMode</code> method to promote low power consumption. </li>\n</ul>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class BluetoothExample {\n    private final BluetoothGattCallback gattCallback = new BluetoothGattCallback() {\n        @Override\n        public void onConnectionStateChange(BluetoothGatt gatt, int status, int newState) {\n          // ...\n        }\n\n        @Override\n        public void onServicesDiscovered(BluetoothGatt gatt, int status) {\n            if (status == BluetoothGatt.GATT_SUCCESS) {\n                gatt.requestConnectionPriority(BluetoothGatt.CONNECTION_PRIORITY_HIGH); // Noncompliant\n            }\n        }\n    };\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class BluetoothExample {\n   private final BluetoothGattCallback gattCallback = new BluetoothGattCallback() {\n        @Override\n        public void onConnectionStateChange(BluetoothGatt gatt, int status, int newState) {\n          // ...\n        }\n\n        @Override\n        public void onServicesDiscovered(BluetoothGatt gatt, int status) {\n            if (status == BluetoothGatt.GATT_SUCCESS) {\n                gatt.requestConnectionPriority(BluetoothGatt.CONNECTION_PRIORITY_LOW_POWER); // Compliant\n            }\n        }\n    };\n}\n</pre>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\npublic class BluetoothExample {\n    private void startAdvertising() {\n        AdvertiseSettings.Builder settingsBuilder = new AdvertiseSettings.Builder();\n        settingsBuilder.setAdvertiseMode(AdvertiseSettings.ADVERTISE_MODE_LOW_LATENCY); // Noncompliant\n        // Other settings configuration...\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\npublic class BluetoothExample {\n    private void startAdvertising() {\n        AdvertiseSettings.Builder settingsBuilder = new AdvertiseSettings.Builder();\n        settingsBuilder.setAdvertiseMode(AdvertiseSettings.ADVERTISE_MODE_LOW_POWER); // Compliant\n        // Other settings configuration...\n    }\n}\n</pre>"
                },
                {
                    "key": "introduction",
                    "content": "<p><code>BluetoothGATT</code> is a class to provide a functionality to enable communication with Bluetooth Smart or Smart Ready devices.</p>\n<p>To connect to a remote peripheral device, a <code>BluetoothGattCallback</code> is used and a method <code>BluetoothDevice#connectGatt</code> is\nused to get an instance of this class. GATT-capable devices can be discovered using the Bluetooth device discovery or BLE scan process.</p>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://developer.android.com/reference/android/bluetooth/BluetoothGattCallback\">Android Developers - BluetoothGattCallback</a> </li>\n  <li> <a href=\"https://developer.android.com/reference/android/bluetooth/BluetoothGatt\">Android Developers - BluetoothGatt</a> </li>\n  <li> <a href=\"https://developer.android.com/reference/android/bluetooth/BluetoothDevice\">Android Developers - BluetoothDevice</a> </li>\n  <li> <a href=\"https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.Builder\">Android Developers -\n  AdvertiseSettings.Builder</a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Using high power consumption modes for Bluetooth operations can drain the device battery faster and may not be suitable for scenarios where power\nefficiency is crucial.</p>\n<p>This rule identifies instances where high power consumption Bluetooth operations are used, specifically when <code>requestConnectionPriority</code>\nor <code>setAdvertiseMode</code> methods are invoked with arguments other than those promoting low power consumption.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "EFFICIENT",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S1120",
            "repo": "java",
            "name": "Source code should be indented consistently",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "convention"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "indentationLevel",
                    "htmlDesc": "Number of white-spaces of an indent.",
                    "defaultValue": "2",
                    "type": "INTEGER"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "1min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "1min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:IndentationCheck"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<h3>External coding guidelines</h3>\n<ul>\n  <li> <a href=\"https://google.github.io/styleguide/javaguide.html\">Google Java Style Guide</a> </li>\n</ul>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>Change the indentation so that the text starts at the expected column. The expected column should be the configured indent size multiplied by the\nlevel at which the code block is nested.</p>\n\n<h4>Noncompliant code example</h4>\n<p>With an indent size of 2:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass Foo {\n  public int a;\n   public int b;   // Noncompliant, expected to start at column 4\n\n...\n\n  public void doSomething() {\n    if(something) {\n          doSomethingElse();  // Noncompliant, expected to start at column 6\n  }   // Noncompliant, expected to start at column 4\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass Foo {\n  public int a;\n  public int b;\n\n...\n\n  public void doSomething() {\n    if(something) {\n      doSomethingElse();\n    }\n  }\n}\n</pre>\n<h3>Going the extra mile</h3>\n<p>You can adopt a tool or configure your IDE to take care of code formatting automatically.</p>"
                },
                {
                    "key": "introduction",
                    "content": "<p>Indentation should be consistent to make the code easy to read, review and modify. To fix this issue, change the indentation so that the text\nstarts at the expected column.</p>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Consistent indentation is a simple and effective way to improve the code’s readability. It reduces the differences that are committed to source\ncontrol systems, making code reviews easier.</p>\n<p>This rule raises an issue when the indentation does not match the configured value. Only the first line of a badly indented section is\nreported.</p>\n<p>The rule behaves consistently when the indentation settings of the IDE use <em>spaces</em> instead of <em>tabs</em>. Using <em>tabs</em> can lead\nto inconsistent indentation because the width of a <em>tab</em> can be configured differently in different environments.</p>\n<h3>What is the potential impact?</h3>\n<p>The readability is decreased. It becomes more tedious to review and modify the code.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "FORMATTED",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S1121",
            "repo": "java",
            "name": "Assignments should not be made from within sub-expressions",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "cert",
                "suspicious"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:AssignmentInSubExpressionCheck"
                ]
            },
            "descriptionSections": [
                {
                    "key": "how_to_fix",
                    "content": "<p>Making assignments within sub-expressions can hinder the clarity of source code.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Extracting assignments into separate statements is encouraged to keep the code clear and straightforward.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nString str;\nif (!(str = cont.substring(pos1, pos2)).isEmpty()) {  // Noncompliant\n  // do something with \"str\"\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nString str = cont.substring(pos1, pos2);\nif (!str.isEmpty()) {\n  // do something with \"str\"\n}\n</pre>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>A common code smell that can hinder the clarity of source code is making assignments within sub-expressions. This practice involves assigning a\nvalue to a variable inside a larger expression, such as within a loop or a conditional statement.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<h3>Exceptions</h3>\n<p>This rule ignores assignments in conditions of <code>while</code> statements and assignments enclosed in relational expressions.</p>\n<pre>\nvoid processInput(BufferedReader br) {\n  String line;\n  while ((line = br.readLine()) != null) {\n    processLine(line);\n  }\n}\n\nObject foo;\nif ((foo = bar()) != null) {\n  // do something with \"foo\"\n}\n</pre>\n<p>This rule also ignores chained assignments, including compound assignments.</p>\n<pre>\nint j, i = j = 0;\nint k = (j += 1);\nbyte[] result, bresult;\nresult = (bresult = new byte[len]);\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/481\">CWE-481 - Assigning instead of Comparing</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/ITZGBQ\">CERT, EXP51-J.</a> - Do not perform assignments in conditional expressions </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S1123",
            "repo": "java",
            "name": "Deprecated elements should have both the annotation and the Javadoc tag",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "obsolete",
                "bad-practice"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:MissingDeprecatedCheck"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Deprecation should be marked with both the <code>@Deprecated</code> annotation and @deprecated Javadoc tag. The annotation enables tools such as\nIDEs to warn about referencing deprecated elements, and the tag can be used to explain when it was deprecated, why, and how references should be\nrefactored.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nclass MyClass {\n\n  @Deprecated\n  public void foo1() {    // Noncompliant: Add the missing @deprecated Javadoc tag.\n  }\n\n  /**\n    * @deprecated\n    */\n  public void foo2() {    // Noncompliant: Add the missing @Deprecated annotation.\n  }\n\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nclass MyClass {\n\n  /**\n    * @deprecated (when, why, refactoring advice...)\n    */\n  @Deprecated\n  public void foo1() {\n  }\n\n}\n</pre>\n<h3>Exceptions</h3>\n<p>The members and methods of a deprecated class or interface are ignored by this rule. The classes and interfaces themselves are still subject to\nit.</p>\n<pre>\n/**\n * @deprecated (when, why, etc...)\n */\n@Deprecated\nclass Qix  {\n\n  public void foo() {} // Compliant; class is deprecated\n\n}\n\n/**\n * @deprecated (when, why, etc...)\n */\n@Deprecated\ninterface Plop {\n\n  void bar();\n\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S1124",
            "repo": "java",
            "name": "Modifiers should be declared in the correct order",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "convention"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:ModifiersOrderCheck"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>The Java Language Specification recommends listing modifiers in the following order:</p>\n<ol>\n  <li> Annotations </li>\n  <li> public </li>\n  <li> protected </li>\n  <li> private </li>\n  <li> abstract </li>\n  <li> static </li>\n  <li> final </li>\n  <li> transient </li>\n  <li> volatile </li>\n  <li> synchronized </li>\n  <li> native </li>\n  <li> default </li>\n  <li> strictfp </li>\n</ol>\n<p>Not following this convention has no technical impact, but will reduce the code’s readability because most developers are used to the standard\norder.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nstatic public void main(String[] args) {   // Noncompliant\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic static void main(String[] args) {   // Compliant\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S1244",
            "repo": "java",
            "name": "Floating point numbers should not be tested for equality",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1244"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Floating point math is imprecise because of the challenges of storing such values in a binary representation. Even worse, floating point math is\nnot associative; push a <code>float</code> or a <code>double</code> through a series of simple mathematical operations and the answer will be\ndifferent based on the order of those operation because of the rounding that takes place at each step.</p>\n<p>Even simple floating point assignments are not simple:</p>\n<pre>\nfloat f = 0.1; // 0.100000001490116119384765625\ndouble d = 0.1; // 0.1000000000000000055511151231257827021181583404541015625\n</pre>\n<p>(Results will vary based on compiler and compiler settings);</p>\n<p>Therefore, the use of the equality (<code>==</code>) and inequality (<code>!=</code>) operators on <code>float</code> or <code>double</code> values\nis almost always an error. Instead the best course is to avoid floating point comparisons altogether. When that is not possible, you should consider\nusing one of Java’s float-handling <code>Numbers</code> such as <code>BigDecimal</code> which can properly handle floating point comparisons. A third\noption is to look not for equality but for whether the value is close enough. I.e. compare the absolute value of the difference between the stored\nvalue and the expected value against a margin of acceptable error. Note that this does not cover all cases (<code>NaN</code> and <code>Infinity</code>\nfor instance).</p>\n<p>This rule checks for the use of direct and indirect equality/inequailty tests on floats and doubles.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nfloat myNumber = 3.146;\nif ( myNumber == 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be false\n  // ...\n}\nif ( myNumber != 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be true\n  // ...\n}\n\nif (myNumber &lt; 4 || myNumber &gt; 4) { // Noncompliant; indirect inequality test\n  // ...\n}\n\nfloat zeroFloat = 0.0f;\nif (zeroFloat == 0) {  // Noncompliant. Computations may end up with a value close but not equal to zero.\n}\n</pre>\n<h3>Exceptions</h3>\n<p>Since <code>NaN</code> is not equal to itself, the specific case of testing a floating point value against itself is a valid test for\n<code>NaN</code> and is therefore ignored. Though using <code>Double.isNaN</code> method should be preferred instead, as intent is more explicit.</p>\n<pre>\nfloat f;\ndouble d;\nif(f != f) { // Compliant; test for NaN value\n  System.out.println(\"f is NaN\");\n} else if (f != d) { // Noncompliant\n  // ...\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S2211",
            "repo": "java",
            "name": "Types should be used in lambdas",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "convention",
                "java8"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2211"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Shared coding conventions allow teams to collaborate effectively. While types for lambda arguments are optional, specifying them anyway makes the\ncode clearer and easier to read.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nArrays.sort(rosterAsArray,\n    (a, b) -&gt; {  // Noncompliant\n        return a.getBirthday().compareTo(b.getBirthday());\n    }\n);\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nArrays.sort(rosterAsArray,\n    (Person a, Person b) -&gt; {\n        return a.getBirthday().compareTo(b.getBirthday());\n    }\n);\n</pre>\n<h3>Exceptions</h3>\n<p>When the lambda has one or two parameters and does not have a block this rule will not fire up an issue as things are considered more readable in\nthose cases.</p>\n<pre>\nstream.map((a, b) -&gt; a.length); // compliant\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S2333",
            "repo": "java",
            "name": "Redundant modifiers should not be used",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "finding",
                "clumsy"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2333"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>The methods declared in an <code>interface</code> are <code>public</code> and <code>abstract</code> by default. Any variables are automatically\n<code>public static final</code>. Finally, <code>class</code> and <code>interface</code> are automatically <code>public static</code>. There is no\nneed to explicitly declare them so.</p>\n<p>Since annotations are implicitly interfaces, the same holds true for them as well.</p>\n<p>Similarly, the <code>final</code> modifier is redundant on any method of a <code>final</code> class, <code>private</code> is redundant on the\nconstructor of an <code>Enum</code>, and <code>static</code> is redundant for <code>interface</code> nested into a <code>class</code> or\n<code>enum</code>.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic interface Vehicle {\n\n  public void go(int speed, Direction direction);  // Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic interface Vehicle {\n\n  void go(int speed, Direction direction);\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S2692",
            "repo": "java",
            "name": "\"indexOf\" checks should not be for positive numbers",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "suspicious"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2692"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Most checks against an <code>indexOf</code> value compare it with -1 because 0 is a valid index. Checking against <code>&gt; 0</code> ignores the\nfirst element, which is likely a bug.</p>\n<pre>\nString name = \"ishmael\";\n\nif (name.indexOf(\"ish\") &gt; 0) { // Noncompliant\n  // ...\n}\n</pre>\n<p>Moreover, if the intent is merely to check the inclusion of a value in a <code>String</code> or a <code>List</code>, consider using the\n<code>contains</code> method instead.</p>\n<pre>\nString name = \"ishmael\";\n\nif (name.contains(\"ish\") {\n  // ...\n}\n</pre>\n<p>If the intent is really to skip the first element, comparing it with <code>&gt;=1</code> will make it more straightforward.</p>\n<pre>\nString name = \"ishmael\";\n\nif (name.indexOf(\"ish\") &gt;= 1) {\n  // ...\n}\n</pre>\n<p>This rule raises an issue when an <code>indexOf</code> value retrieved from a <code>String</code> or a <code>List</code> is tested against\n<code>&gt; 0</code>.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "COMPLETE",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S2693",
            "repo": "java",
            "name": "Threads should not be started in constructors",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "multi-threading",
                "cert",
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "30min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "30min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2693"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>The problem with invoking <code>Thread.start()</code> in a constructor is that you’ll have a confusing mess on your hands if the class is ever\nextended because the superclass' constructor will start the thread before the child class has truly been initialized.</p>\n<p>This rule raises an issue any time <code>start</code> is invoked in the constructor of a non-<code>final</code> class.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class MyClass {\n\n  Thread thread = null;\n\n  public MyClass(Runnable runnable) {\n    thread = new Thread(runnable);\n    thread.start(); // Noncompliant\n  }\n}\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/FDdGBQ\">CERT, TSM02-J.</a> - Do not use background threads during class initialization </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "FOCUSED",
            "cleanCodeAttributeCategory": "ADAPTABLE",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "BLOCKER"
                }
            ]
        },
        {
            "key": "java:S2694",
            "repo": "java",
            "name": "Inner classes which do not reference their owning classes should be \"static\"",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "performance"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2694"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>A non-static inner class has a reference to its outer class, and access to the outer class' fields and methods. That class reference makes the\ninner class larger and could cause the outer class instance to live in memory longer than necessary.</p>\n<p>If the reference to the outer class isn’t used, it is more efficient to make the inner class <code>static</code> (also called nested). If the\nreference is used only in the class constructor, then explicitly pass a class reference to the constructor. If the inner class is anonymous, it will\nalso be necessary to name it.</p>\n<p>However, while a nested/<code>static</code> class would be more efficient, it’s worth noting that there are semantic differences between an inner\nclass and a nested one:</p>\n<ul>\n  <li> an inner class can only be instantiated within the context of an instance of the outer class. </li>\n  <li> a nested (<code>static</code>) class can be instantiated independently of the outer class. </li>\n</ul>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/tutorial/java/javaOO/nested.html\">Oracle Java SE - Nested Classes</a> </li>\n  <li> <a href=\"https://docs.oracle.com/javase/tutorial/java/javaOO/localclasses.html\">Oracle Java SE - Local Classes</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://www.geeksforgeeks.org/difference-between-static-and-non-static-nested-class-in-java/\">GeeksforGeeks - Difference between\n  static and non-static nested class in Java</a> </li>\n</ul>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>There are two scenarios in which this rule will raise an issue:</p>\n<ol>\n  <li> On an <em>inner class</em>: make it <code>static</code>. </li>\n  <li> On a <em>local class</em>: extract it as a <code>static</code> <em>inner class</em>. </li>\n</ol>\n\n<h4>Noncompliant code example</h4>\n<p>Inner classes that don’t use the outer class reference should be static.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class Fruit {\n  // ...\n\n  public class Seed {  // Noncompliant; there's no use of the outer class reference so make it static\n    int germinationDays = 0;\n    public Seed(int germinationDays) {\n      this.germinationDays = germinationDays;\n    }\n    public int getGerminationDays() {\n      return germinationDays;\n    }\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class Fruit {\n  // ...\n\n  public static class Seed {\n    int germinationDays = 0;\n    public Seed(int germinationDays) {\n      this.germinationDays = germinationDays;\n    }\n    public int getGerminationDays() {\n      return germinationDays;\n    }\n  }\n}\n</pre>\n<p>Local classes that don’t use the outer class reference should be extracted as a static inner classes.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\npublic class Foo {\n  public Foo() {\n    class Bar { // Noncompliant\n      void doSomething() {\n        // ...\n      }\n    }\n    new Bar().doSomething();\n  }\n\n  public void method() {\n    class Baz { // Noncompliant\n      void doSomething() {\n        // ...\n      }\n    }\n    new Baz().doSomething();\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\npublic class Foo {\n  public Foo() {\n    new Bar().doSomething();\n  }\n\n  public void method()  {\n    new Baz().doSomething();\n  }\n\n  private static class Bar { // Compliant\n    void doSomething() {\n      // ...\n    }\n  }\n\n  private static class Baz { // Compliant\n    void doSomething() {\n      // ...\n    }\n  }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "EFFICIENT",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S2695",
            "repo": "java",
            "name": "\"PreparedStatement\" and \"ResultSet\" methods should be called with valid indices",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "sql"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2695"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p><code>PreparedStatement</code> is an object that represents a precompiled SQL statement, that can be used to execute the statement multiple times\nefficiently.</p>\n<p><code>ResultSet</code> is the Java representation of the result set of a database query obtained from a <code>Statement</code> object. A default\n<code>ResultSet</code> object is not updatable and has a cursor that moves forward only.</p>\n<p>The parameters in <code>PreparedStatement</code> and <code>ResultSet</code> are indexed beginning at 1, not 0. When an invalid index is passed to\nthe <code>PreparedStatement</code> or <code>ResultSet</code> methods, an <code>IndexOutOfBoundsException</code> is thrown. This can cause the program\nto crash or behave unexpectedly, leading to a poor user experience.</p>\n<p>This rule raises an issue for the <code>get</code> methods in <code>PreparedStatement</code> and the <code>set</code> methods in\n<code>ResultSet</code>.</p>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>Ensure the index passed to the <code>PreparedStatement</code> and <code>ResultSet</code> methods is valid.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nPreparedStatement ps = con.prepareStatement(\"SELECT fname, lname FROM employees where hireDate &gt; ? and salary &lt; ?\");\nps.setDate(0, date);  // Noncompliant\nps.setDouble(3, salary);  // Noncompliant\n\nResultSet rs = ps.executeQuery();\nwhile (rs.next()) {\n  String fname = rs.getString(0);  // Noncompliant\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nPreparedStatement ps = con.prepareStatement(\"SELECT fname, lname FROM employees where hireDate &gt; ? and salary &lt; ?\");\nps.setDate(1, date);\nps.setDouble(2, salary);\n\nResultSet rs = ps.executeQuery();\nwhile (rs.next()) {\n  String fname = rs.getString(1);\n  // ...\n}\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/20/docs/api/java.sql/java/sql/PreparedStatement.html\">Oracle SDK 20 - PreparedStatement</a>\n  </li>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/20/docs/api/java.sql/java/sql/ResultSet.html\">Oracle SDK 20 - ResultSet</a> </li>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/20/docs/api/java.sql/java/sql/Connection.html#prepareStatement(java.lang.String)\">Oracle SDK 20\n  - Connection#prepareStatement</a> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "BLOCKER"
                }
            ]
        },
        {
            "key": "java:S5841",
            "repo": "java",
            "name": "AssertJ assertions \"allMatch\" and \"doesNotContains\" should also test for emptiness",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "tests",
                "assertj"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "TEST",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5841"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>AssertJ assertions <code>allMatch</code> and <code>doesNotContains</code> on an empty list always&nbsp;returns true whatever the content of the\npredicate. Despite being correct, you should make explicit if you expect an empty list or not, by adding\n<code>isEmpty()</code>/<code>isNotEmpty()</code> in addition to calling the assertion, or by testing the list’s content further. It will justify the\nuseless predicate to improve clarity or increase the reliability of the test.</p>\n<p>This rule raises an issue when any of the methods listed are used without asserting that the list is empty or not and without testing the\ncontent.</p>\n<p>Targetted methods:</p>\n<ul>\n  <li> <code>allMatch</code> </li>\n  <li> <code>allSatisfy</code> </li>\n  <li> <code>doesNotContain</code> </li>\n  <li> <code>doesNotContainSequence</code> </li>\n  <li> <code>doesNotContainSubsequence</code> </li>\n  <li> <code>doesNotContainAnyElementsOf</code> </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<pre>\nList&lt;String&gt; logs = getLogs();\n\nassertThat(logs).allMatch(e -&gt; e.contains(“error”)); // Noncompliant, this test pass if logs are empty!\nassertThat(logs).doesNotContain(\"error\"); // Noncompliant, do you expect any log?\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nList&lt;String&gt; logs = getLogs();\n\nassertThat(logs).isNotEmpty().allMatch(e -&gt; e.contains(“error”));\n// Or\nassertThat(logs).hasSize(5).allMatch(e -&gt; e.contains(“error”));\n// Or\nassertThat(logs).isEmpty();\n\n// Despite being redundant, this is also acceptable since it explains why you expect an empty list\nassertThat(logs).doesNotContain(\"error\").isEmpty();\n// or test the content of the list further\nassertThat(logs).contains(\"warning\").doesNotContain(\"error\");\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S5845",
            "repo": "java",
            "name": "Assertions comparing incompatible types should not be made",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "tests"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "TEST",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5845"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href='/coding_rules#rule_key=java%3AS2159'>S2159</a> - Silly equality checks should not be made </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Assertions comparing incompatible types always fail, and negative assertions always pass. At best, negative assertions are useless. At worst, the\ndeveloper loses time trying to fix his code logic before noticing wrong assertions.</p>\n<p>Dissimilar types are:</p>\n<ul>\n  <li> comparing a primitive with null </li>\n  <li> comparing an object with an unrelated primitive (E.G. a string with an int) </li>\n  <li> comparing unrelated classes </li>\n  <li> comparing an array to a non-array </li>\n  <li> comparing two arrays of dissimilar types </li>\n</ul>\n<p>This rule also raises issues for unrelated <code>class</code> and <code>interface</code> or unrelated <code>interface</code> types in negative\nassertions. Because except in some corner cases, those types are more likely to be dissimilar. And inside a negative assertion, there is no test\nfailure to inform the developer about this unusual comparison.</p>\n<p>Supported test frameworks:</p>\n<ul>\n  <li> JUnit4 </li>\n  <li> JUnit5 </li>\n  <li> AssertJ </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<pre>\ninterface KitchenTool {}\ninterface Plant {}\nclass Spatula implements KitchenTool {}\nclass Tree implements Plant {}\n\nvoid assertValues(int size,\n                  Spatula spatula, KitchenTool tool,  KitchenTool[] tools,\n                  Tree    tree,    Plant       plant, Tree[]        trees) {\n\n  // Whatever the given values, those negative assertions will always pass due to dissimilar types:\n  assertThat(size).isNotNull();           // Noncompliant; primitives can not be null\n  assertThat(spatula).isNotEqualTo(tree); // Noncompliant; unrelated classes\n  assertThat(tool).isNotSameAs(tools);    // Noncompliant; array &amp; non-array\n  assertThat(trees).isNotEqualTo(tools);  // Noncompliant; incompatible arrays\n\n  // Those assertions will always fail\n  assertThat(size).isNull();                       // Noncompliant\n  assertThat(spatula).isEqualTo(tree);             // Noncompliant\n\n  // Those negative assertions are more likely to always pass\n  assertThat(spatula).isNotEqualTo(plant); // Noncompliant; unrelated class and interface\n  assertThat(tool).isNotEqualTo(plant);    // Noncompliant; unrelated interfaces\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S5960",
            "repo": "java",
            "name": "Assertions should not be used in production code",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5960"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Assertions are intended to be used in <strong>test</strong> code, but not in <strong>production</strong> code. It is confusing, and might lead to\n<code>ClassNotFoundException</code> when the build tools only provide the required dependency in test scope.</p>\n<p>In addition, assertions will throw a sub-class of <code>Error</code>: <code>AssertionError</code>, which should be avoided in production code.</p>\n<p>This rule raises an issue when any assertion intended to be used in test is used in production code.</p>\n<p>Supported frameworks:</p>\n<ul>\n  <li> JUnit </li>\n  <li> FestAssert </li>\n  <li> AssertJ </li>\n</ul>\n<p>Note: this does not apply for <code>assert</code> from Java itself or if the source code package name is related to tests (contains:\n<code>test</code> or <code>assert</code> or <code>junit</code>).</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S5961",
            "repo": "java",
            "name": "Test methods should not contain too many assertions",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "tests"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "MaximumAssertionNumber",
                    "htmlDesc": "The maximum authorized number of assertions in a test method",
                    "defaultValue": "25",
                    "type": "INTEGER"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "TEST",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5961"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>A common good practice is to write test methods targeting only one logical concept, that can only fail for one reason.</p>\n<p>While it might make sense to have more than one assertion to test one concept, having too many is a sign that a test became too complex and should\nbe refactored to multiples ones.</p>\n<p>This rule will report any test method containing more than a given number of assertion.</p>\n<h3>Noncompliant code example</h3>\n<p>With a parameter of 2.</p>\n<pre>\n@Test\nvoid test() { // Refactor this method.\n  assertEquals(1, f(1));\n  assertEquals(2, f(2));\n  assertEquals(3, g(1));\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nvoid test_f() {\n  assertEquals(1, f(1));\n  assertEquals(2, f(2));\n}\nvoid test_g() {\n  assertEquals(3, g(1));\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "FOCUSED",
            "cleanCodeAttributeCategory": "ADAPTABLE",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S5967",
            "repo": "java",
            "name": "Tests method should not be annotated with competing annotations",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "tests"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "TEST",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5967"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Annotating unit tests with more than one test-related annotation is not only useless but could also result in unexpected behavior like failing\ntests or unwanted side-effects.</p>\n<p>This rule reports an issue when a test method is annotated with more than one of the following competing annotation:</p>\n<ul>\n  <li> @Test </li>\n  <li> @RepeatedTest </li>\n  <li> @ParameterizedTest </li>\n  <li> @TestFactory </li>\n  <li> @TestTemplate </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<pre>\n@Test\n@RepeatedTest(2) // Noncompliant, this test will be repeated 3 times\nvoid test() { }\n\n@ParameterizedTest\n@Test\n@MethodSource(\"methodSource\")\nvoid test2(int argument) { } // Noncompliant, this test will fail with ParameterResolutionException\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n@RepeatedTest(2)\nvoid test() { }\n\n@ParameterizedTest\n@MethodSource(\"methodSource\")\nvoid test2(int argument) { }\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S6813",
            "repo": "java",
            "name": "Field dependency injection should be avoided",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S6813"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Dependency injection frameworks such as Spring, Quarkus, and others support dependency injection by using annotations such as <code>@Inject</code>\nand <code>@Autowired</code>. These annotations can be used to inject beans via constructor, setter, and field injection.</p>\n<p>Generally speaking, field injection is discouraged. It allows the creation of objects in an invalid state and makes testing more difficult. The\ndependencies are not explicit when instantiating a class that uses field injection.</p>\n<p>In addition, field injection is not compatible with final fields. Keeping dependencies immutable where possible makes the code easier to\nunderstand, easing development and maintenance.</p>\n<p>Finally, because values are injected into fields after the object has been constructed, they cannot be used to initialize other non-injected fields\ninline.</p>\n<p>This rule raises an issue when the <code>@Autowired</code> or <code>@Inject</code> annotations are used on a field.</p>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> Baeldung - <a href=\"https://www.baeldung.com/java-spring-field-injection-cons\">Why Is Field Injection Not Recommended?</a> </li>\n  <li> Baeldung - <a href=\"https://www.baeldung.com/constructor-injection-in-spring\">Constructor Dependency Injection in Spring</a> </li>\n  <li> Oliver Drotbohm - <a href=\"https://odrotbohm.de/2013/11/why-field-injection-is-evil/\">Why field injection is evil</a> </li>\n  <li> GitHub Discussions - <a href=\"https://github.com/quarkusio/quarkus/discussions/38474\">Field injection in quarkus</a> </li>\n</ul>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>Use constructor injection instead.</p>\n<p>By using constructor injection, the dependencies are explicit and must be passed during an object’s construction. This avoids the possibility of\ninstantiating an object in an invalid state and makes types more testable. Fields can be declared final, which makes the code easier to understand, as\ndependencies don’t change after instantiation.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class SomeService {\n    @Autowired\n    private SomeDependency someDependency; // Noncompliant\n\n    private String name = someDependency.getName(); // Will throw a NullPointerException\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class SomeService {\n    private final SomeDependency someDependency;\n    private final String name;\n\n    @Autowired\n    public SomeService(SomeDependency someDependency) {\n        this.someDependency = someDependency;\n        name = someDependency.getName();\n    }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                },
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S6814",
            "repo": "java",
            "name": "Optional REST parameters should have an object type",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S6814"
                ]
            },
            "descriptionSections": [
                {
                    "key": "how_to_fix",
                    "content": "<p>Replace primitive types, such as <code>boolean</code>, <code>char</code>, <code>int</code>, with the corresponding wrapper type, such as\n<code>Boolean</code>, <code>Character</code>, <code>Integer</code>.</p>\n<p>Alternatively, you might choose to remove <code>required = false</code> from the annotation and use an <code>Optional&lt;T&gt;</code> type for the\nparameter, such as <code>Optional&lt;Boolean&gt;</code> or <code>Optional&lt;String&gt;</code>, which automatically makes the REST parameter optional.\nThis is the preferred approach because it enforces the proper handling of <code>null</code> in the method implementation.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@RequestMapping(value = {\"/article\", \"/article/{id}\"})\npublic Article getArticle(@PathVariable(required = false) int articleId) { // Noncompliant, null cannot be mapped to int\n   //...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@RequestMapping(value = {\"/article\", \"/article/{id}\"})\npublic Article getArticle(@PathVariable(required = false) Integer articleId) { // Compliant\n   //...\n}\n</pre>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\n@RequestMapping(value = {\"/article\", \"/article/{id}\"})\npublic Article getArticle(@PathVariable(required = false) int articleId) { // Noncompliant, null cannot be mapped to int\n   //...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\n@RequestMapping(value = {\"/article\", \"/article/{id}\"})\npublic Article getArticle(@PathVariable Optional&lt;Integer&gt; articleId) { // Compliant and preferred approach\n   //...\n}\n</pre>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Spring provides two options to mark a REST parameter as optional:</p>\n<ol>\n  <li> Use <code>required = false</code> in the <code>@PathVariable</code> or <code>@RequestParam</code> annotation of the respective method parameter\n  or </li>\n  <li> Use type <code>java.util.Optional&lt;T&gt;</code> for the method parameter </li>\n</ol>\n<p>When using 1., the absence of the parameter, when the REST function is called, is encoded by <code>null</code>, which can only be used for object\ntypes. If <code>required = false</code> is used for a parameter with a primitive and the REST function is called without the parameter, a runtime\nexception occurs because the Spring data mapper cannot map the <code>null</code> value to the parameter.</p>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/PathVariable.html\">Spring\n  Framework API - Annotation Interface PathVariable</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://www.baeldung.com/spring-optional-path-variables\">Baeldung - Spring Optional Path Variables</a> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S6818",
            "repo": "java",
            "name": "\"@Autowired\" should only be used on a single constructor",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "spring"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S6818"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.spring.io/spring-framework/reference/core/beans/annotation-config/autowired.html\">Spring Framework - Using @Autowired</a>\n  </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://www.baeldung.com/spring-autowire\">Baeldung - Guide to Spring @Autowired</a> </li>\n</ul>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>To maintain code clarity and ensure that the Spring context can create beans correctly, have only one constructor annotated with\n<code>@Autowired</code> within a Spring component or set <code>required = false</code>.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@Component\npublic class MyComponent {\n  private final MyService myService;\n\n  @Autowired\n  public MyComponent(MyService myService) {\n    this.myService = myService;\n    // ...\n  }\n\n  @Autowired  // Noncompliant\n  public MyComponent(MyService myService, Integer i) {\n    this.myService = myService;\n    // ...\n  }\n\n  @Autowired  // Noncompliant\n  public MyComponent(MyService myService, Integer i, String s) {\n    this.myService = myService;\n    // ...\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@Component\npublic class MyComponent {\n  private final MyService myService;\n\n  @Autowired\n  public MyComponent(MyService myService) {\n    this.myService = myService;\n    // ...\n  }\n\n  public MyComponent(MyService myService, Integer i) {\n    this.myService = myService;\n    // ...\n  }\n\n  public MyComponent(MyService myService, Integer i, String s) {\n    this.myService = myService;\n    // ...\n  }\n}\n</pre>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\n@Component\npublic class MyComponent {\n  private final MyService myService;\n\n  @Autowired\n  public MyComponent(MyService myService) {\n    this.myService = myService;\n    // ...\n  }\n\n  @Autowired  // Noncompliant\n  public MyComponent(MyService myService, Integer i) {\n    this.myService = myService;\n    // ...\n  }\n\n  @Autowired  // Noncompliant\n  public MyComponent(MyService myService, Integer i, String s) {\n    this.myService = myService;\n    // ...\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\n@Component\npublic class MyComponent {\n  private final MyService myService;\n\n  @Autowired\n  public MyComponent(MyService myService) {\n    this.myService = myService;\n    // ...\n  }\n\n  @Autowired(required=false)  // Compliant\n  public MyComponent(MyService myService, Integer i) {\n    this.myService = myService;\n    // ...\n  }\n\n  @Autowired(required=false)  // Compliant\n  public MyComponent(MyService myService, Integer i, String s) {\n    this.myService = myService;\n    // ...\n  }\n}\n</pre>"
                },
                {
                    "key": "root_cause",
                    "content": "<p><code>@Autowired</code> is an annotation in the Spring Framework for automatic dependency injection. It tells Spring to automatically provide the\nrequired dependencies (such as other beans or components) to a class’s fields, methods, or constructors, allowing for easier and more flexible\nmanagement of dependencies in a Spring application. In other words, it’s a way to wire up and inject dependencies into Spring components\nautomatically, reducing the need for manual configuration and enhancing modularity and maintainability.</p>\n<p>In any bean class, only one constructor is permitted to declare <code>@Autowired</code> with the <code>required</code> attribute set to true. This\nsignifies the constructor to be automatically wired when used as a Spring bean. Consequently, when the required attribute remains at its default value\n(true), only a singular constructor can bear the <code>@Autowired</code> annotation. In cases where multiple constructors have this annotation, they\nmust all specify <code>required=false</code> to be eligible as candidates for auto-wiring.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                },
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S1128",
            "repo": "java",
            "name": "Unnecessary imports should be removed",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "unused"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "1min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "1min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:UselessImportCheck"
                ]
            },
            "descriptionSections": [
                {
                    "key": "how_to_fix",
                    "content": "<p>While it’s not difficult to remove these unneeded lines manually, modern code editors support the removal of every unnecessary import with a single\nclick from every file of the project.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npackage myapp.helpers;\n\nimport java.io.IOException;\nimport java.nio.file.*;\nimport java.nio.file.*;     // Noncompliant - package is imported twice\nimport java.lang.Runnable;  // Noncompliant - java.lang is imported by default\n\npublic class FileHelper {\n    public static String readFirstLine(String filePath) throws IOException {\n        return Files.readAllLines(Paths.get(filePath)).get(0);\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npackage myapp.helpers;\n\nimport java.io.IOException;\nimport java.nio.file.*;\n\npublic class FileHelper {\n    public static String readFirstLine(String filePath) throws IOException {\n        return Files.readAllLines(Paths.get(filePath)).get(0);\n    }\n}\n</pre>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Unnecessary imports refer to importing types that are not used or referenced anywhere in the code.</p>\n<p>Although they don’t affect the runtime behavior of the application after compilation, removing them will:</p>\n<ul>\n  <li> Improve the readability and maintainability of the code. </li>\n  <li> Help avoid potential naming conflicts. </li>\n  <li> Improve the build time, as the compiler has fewer lines to read and fewer types to resolve. </li>\n  <li> Reduce the number of items the code editor will show for auto-completion, thereby showing fewer irrelevant suggestions. </li>\n</ul>\n<h3>Exceptions</h3>\n<p>Imports for types mentioned in Javadocs are ignored.</p>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/tutorial/java/package/usepkgs.html\">Java packages</a> </li>\n</ul>\n<h3>Related rules</h3>\n<ul>\n  <li> <a href='/coding_rules#rule_key=java%3AS1144'>S1144</a> - Unused \"private\" methods should be removed </li>\n  <li> <a href='/coding_rules#rule_key=java%3AS1481'>S1481</a> - Unused local variables should be removed </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S1175",
            "repo": "java",
            "name": "The signature of \"finalize()\" should match that of \"Object.finalize()\"",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1175"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p><code>Object.finalize()</code> is called by the Garbage Collector at some point after the object becomes unreferenced.</p>\n<p>In general, overloading <code>Object.finalize()</code> is a bad idea because:</p>\n<ul>\n  <li> The overload may not be called by the Garbage Collector. </li>\n  <li> Users are not expected to call <code>Object.finalize()</code> and will get confused. </li>\n</ul>\n<p>But beyond that it’s a terrible idea to name a method \"finalize\" if it doesn’t actually override <code>Object.finalize()</code>.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic int finalize(int someParameter) {        // Noncompliant\n  /* ... */\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic int someBetterName(int someParameter) {  // Compliant\n  /* ... */\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S1176",
            "repo": "java",
            "name": "Public types, methods and fields (API) should be documented with Javadoc",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "convention"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "forClasses",
                    "htmlDesc": "Pattern of classes which should adhere to this constraint. Ex : *<strong>.api.</strong>*",
                    "defaultValue": "**.api.**",
                    "type": "STRING"
                },
                {
                    "key": "exclusion",
                    "htmlDesc": "Pattern of classes which are excluded from adhering to this constraint.",
                    "defaultValue": "**.internal.**",
                    "type": "STRING"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:UndocumentedApi"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Undocumented APIs pose significant challenges in software development for several reasons:</p>\n<ul>\n  <li> <strong>Lack of Clarity:</strong> developers struggling to understand how to use the API correctly. This can lead to misuse and unexpected\n  results. </li>\n  <li> <strong>Increased Development Time:</strong> developers spending extra time reading and understanding the source code, which slows down the\n  development process. </li>\n  <li> <strong>Error Prone:</strong> developers are more likely to make mistakes that lead to bugs or system crashes when the intent or the error\n  handling of an API is not clear. </li>\n  <li> <strong>Difficult Maintenance and Updates:</strong> developers may not understand the existing functionality well enough to add new features\n  without breaking the existing ones. </li>\n  <li> <strong>Poor Collaboration:</strong> collaboration, when there is lack of documentation, leads to confusion and inconsistencies. </li>\n</ul>\n<p>It is recommended to document the API using <strong>JavaDoc</strong> to clarify what is the contract of the API. This is especially important for\npublic APIs, as they are used by other developers.</p>\n<h3>Exceptions</h3>\n<p>The following public methods and constructors are not taken into account by this rule:</p>\n<ul>\n  <li> Getters and setters. </li>\n  <li> Methods overriding another method (usually annotated with <code>@Override</code>). </li>\n  <li> Empty constructors. </li>\n  <li> Static constants. </li>\n</ul>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>On top of a main description for each member of a public API, the following <strong>Javadoc</strong> elements are required to be described:</p>\n<ul>\n  <li> Parameters, using <code>@param parameterName</code>. </li>\n  <li> Thrown exceptions, using <code>@throws exceptionName</code>. </li>\n  <li> Method return values, using <code>@return</code>. </li>\n  <li> Generic types, using <code>@param &lt;T&gt;</code>. </li>\n</ul>\n<p>Furthermore, the following guidelines should be followed:</p>\n<ul>\n  <li> At least 1 line of description. </li>\n  <li> All parameters documented with <code>@param</code>, and names should match. </li>\n  <li> All checked exceptions should be documented with <code>@throws</code> </li>\n  <li> <code>@return</code> present and documented when method return type is not <code>void</code>. </li>\n  <li> Placeholders like <code>\"TODO\"</code>, <code>\"FIXME\"</code>, <code>\"…​\"</code> should be avoided. </li>\n</ul>\n<p>For the parameters of the rule, the following rules are applied:</p>\n<ul>\n  <li> <code>?</code> matches a single character </li>\n  <li> <code>*</code> matches zero or more characters </li>\n  <li> <code>**</code> matches zero or more packages </li>\n</ul>\n<p>Examples:</p>\n<ul>\n  <li> <code>java.internal.InternalClass</code> will match only <code>InternalClass</code> class. </li>\n  <li> <code>java.internal.*</code> will match any member of <code>java.internal</code> package. </li>\n  <li> <code>java.internal.**</code> same as above, but including sub-packages. </li>\n</ul>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n/**\n  * This is a Javadoc comment\n  */\npublic class MyClass&lt;T&gt; implements Runnable {   // Noncompliant - missing '@param &lt;T&gt;'\n\n  public static final int DEFAULT_STATUS = 0;   // Compliant - static constant\n  private int status;                           // Compliant - not public\n\n  public String message;                        // Noncompliant\n\n  public MyClass() {                            // Noncompliant - missing documentation\n    this.status = DEFAULT_STATUS;\n  }\n\n  public void setStatus(int status) {           // Compliant - setter\n    this.status = status;\n  }\n\n  @Override\n  public void run() {                           // Compliant - has @Override annotation\n  }\n\n  protected void doSomething() {                // Compliant - not public\n  }\n\n  public void doSomething2(int value) {         // Noncompliant\n  }\n\n  public int doSomething3(int value) {          // Noncompliant\n    return value;\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n/**\n  * This is a Javadoc comment\n  * @param &lt;T&gt; the parameter of the class\n  */\npublic class MyClass&lt;T&gt; implements Runnable {\n\n  public static final int DEFAULT_STATUS = 0;\n  private int status;\n\n  /**\n    * This is a Javadoc comment\n    */\n  public String message;\n\n  /**\n   * Class comment...\n   */\n  public MyClass() {\n    this.status = DEFAULT_STATUS;\n  }\n\n  public void setStatus(int status) {\n    this.status = status;\n  }\n\n  @Override\n  public void run() {\n  }\n\n  protected void doSomething() {\n  }\n\n  /**\n    * Will do something.\n    * @param value the value to be used\n    */\n  public void doSomething(int value) {\n  }\n\n  /**\n    *  {@inheritDoc}\n    */\n  public int doSomething(int value) {\n    return value;\n  }\n}\n</pre>"
                },
                {
                    "key": "introduction",
                    "content": "<p>A good API documentation is a key factor in the usability and success of a software API. It ensures that developers can effectively use, maintain,\nand collaborate on the API.</p>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> Oracle - <a href=\"https://docs.oracle.com/javase/8/docs/technotes/tools/windows/javadoc.html\">JavaDoc</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> Technical Writer HQ - <a href=\"https://technicalwriterhq.com/documentation/api-documentation/how-to-write-api-documentation/\">How to write API\n  documentation</a> </li>\n  <li> FreeCodeCamp - <a href=\"https://www.freecodecamp.org/news/how-to-write-api-documentation-like-a-pro/\">How to write API documentation like a\n  pro</a> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S1481",
            "repo": "java",
            "name": "Unused local variables should be removed",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "unused"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1481"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>An unused local variable is a variable that has been declared but is not used anywhere in the block of code where it is defined. It is dead code,\ncontributing to unnecessary complexity and leading to confusion when reading the code. Therefore, it should be removed from your code to maintain\nclarity and efficiency.</p>\n<h3>What is the potential impact?</h3>\n<p>Having unused local variables in your code can lead to several issues:</p>\n<ul>\n  <li> <strong>Decreased Readability</strong>: Unused variables can make your code more difficult to read. They add extra lines and complexity, which\n  can distract from the main logic of the code. </li>\n  <li> <strong>Misunderstanding</strong>: When other developers read your code, they may wonder why a variable is declared but not used. This can lead\n  to confusion and misinterpretation of the code’s intent. </li>\n  <li> <strong>Potential for Bugs</strong>: If a variable is declared but not used, it might indicate a bug or incomplete code. For example, if you\n  declared a variable intending to use it in a calculation, but then forgot to do so, your program might not work as expected. </li>\n  <li> <strong>Maintenance Issues</strong>: Unused variables can make code maintenance more difficult. If a programmer sees an unused variable, they\n  might think it is a mistake and try to 'fix' the code, potentially introducing new bugs. </li>\n  <li> <strong>Memory Usage</strong>: Although modern compilers are smart enough to ignore unused variables, not all compilers do this. In such cases,\n  unused variables take up memory space, leading to inefficient use of resources. </li>\n</ul>\n<p>In summary, unused local variables can make your code less readable, more confusing, and harder to maintain, and they can potentially lead to bugs\nor inefficient memory use. Therefore, it is best to remove them.</p>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>The fix for this issue is straightforward. Once you ensure the unused variable is not part of an incomplete implementation leading to bugs, you\njust need to remove it.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic int numberOfMinutes(int hours) {\n  int seconds = 0;   // Noncompliant - seconds is unused\n  return hours * 60;\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic int numberOfMinutes(int hours) {\n  return hours * 60;\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S2147",
            "repo": "java",
            "name": "Catches should be combined",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "clumsy"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2147"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Since Java 7 it has been possible to catch multiple exceptions at once. Therefore, when multiple <code>catch</code> blocks have the same code, they\nshould be combined for better readability.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project’s <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h3>Noncompliant code example</h3>\n<pre>\ncatch (IOException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (SQLException e) {  // Noncompliant\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {  // Compliant; block contents are different\n  doCleanup();\n  throw e;\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\ncatch (IOException|SQLException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {\n  doCleanup();\n  throw e;\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "DISTINCT",
            "cleanCodeAttributeCategory": "ADAPTABLE",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S2148",
            "repo": "java",
            "name": "Underscores should be used to make large numbers readable",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "convention"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2148"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Beginning with Java 7, it is possible to add underscores ('_') to numeric literals to enhance readability. The addition of underscores in this\nmanner has no semantic meaning, but makes it easier for maintainers to understand the code.</p>\n<p>The number of digits to the left of a decimal point needed to trigger this rule varies by base.</p>\n<table>\n  <colgroup>\n    <col style=\"width: 50%;\">\n    <col style=\"width: 50%;\">\n  </colgroup>\n  <thead>\n    <tr>\n      <th>Base</th>\n      <th>Minimum digits</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><p>binary</p></td>\n      <td><p>9</p></td>\n    </tr>\n    <tr>\n      <td><p>octal</p></td>\n      <td><p>9</p></td>\n    </tr>\n    <tr>\n      <td><p>decimal</p></td>\n      <td><p>6</p></td>\n    </tr>\n    <tr>\n      <td><p>hexadecimal</p></td>\n      <td><p>9</p></td>\n    </tr>\n  </tbody>\n</table>\n<p>It is only the presence of underscores, not their spacing that is scrutinized by this rule.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project’s <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nint i = 10000000;  // Noncompliant; is this 10 million or 100 million?\nint  j = 0b01101001010011011110010101011110;  // Noncompliant\nlong l = 0x7fffffffffffffffL;  // Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nint i = 10_000_000;\nint  j = 0b01101001_01001101_11100101_01011110;\nlong l = 0x7fff_ffff_ffff_ffffL;\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "FORMATTED",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S2384",
            "repo": "java",
            "name": "Private mutable members should not be stored or returned directly",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "unpredictable",
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2384"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/374\">CWE-374 - Passing Mutable Objects to an Untrusted Method</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/375\">CWE-375 - Returning a Mutable Object to an Untrusted Caller</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/OTdGBQ\">CERT, OBJ05-J.</a> - Do not return references to private mutable class members </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/HTdGBQ\">CERT, OBJ06-J.</a> - Defensively copy mutable inputs and mutable internal components\n  </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/VzZGBQ\">CERT, OBJ13-J.</a> - Ensure that references to mutable objects are not exposed </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Mutable objects are those whose state can be changed. For instance, an array is mutable, but a String is not. Private mutable class members should\nnever be returned to a caller or accepted and stored directly. Doing so leaves you vulnerable to unexpected changes in your class state.</p>\n<p>Instead use an unmodifiable <code>Collection</code> (via <code>Collections.unmodifiableCollection</code>,\n<code>Collections.unmodifiableList</code>, …​) or make a copy of the mutable object, and store or return the copy instead.</p>\n<p>This rule checks that private arrays, collections and Dates are not stored or returned directly.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nclass A {\n  private String [] strings;\n\n  public A () {\n    strings = new String[]{\"first\", \"second\"};\n  }\n\n  public String [] getStrings() {\n    return strings; // Noncompliant\n  }\n\n  public void setStrings(String [] strings) {\n    this.strings = strings;  // Noncompliant\n  }\n}\n\npublic class B {\n\n  private A a = new A();  // At this point a.strings = {\"first\", \"second\"};\n\n  public void wreakHavoc() {\n    a.getStrings()[0] = \"yellow\";  // a.strings = {\"yellow\", \"second\"};\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nclass A {\n  private String [] strings;\n\n  public A () {\n    strings = new String[]{\"first\", \"second\"};\n  }\n\n  public String [] getStrings() {\n    return strings.clone();\n  }\n\n  public void setStrings(String [] strings) {\n    this.strings = strings.clone();\n  }\n}\n\npublic class B {\n\n  private A a = new A();  // At this point a.strings = {\"first\", \"second\"};\n\n  public void wreakHavoc() {\n    a.getStrings()[0] = \"yellow\";  // a.strings = {\"first\", \"second\"};\n  }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "COMPLETE",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S2386",
            "repo": "java",
            "name": "Mutable fields should not be \"public static\"",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "unpredictable",
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2386"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/582\">CWE-582 - Array Declared Public, Final, and Static</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/607\">CWE-607 - Public Static Final Field References Mutable Object</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/LjdGBQ\">CERT, OBJ01-J.</a> - Limit accessibility of fields </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/VzZGBQ\">CERT, OBJ13-J.</a> - Ensure that references to mutable objects are not exposed </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>There is no good reason to have a mutable object as the <code>public</code> (by default), <code>static</code> member of an <code>interface</code>.\nSuch variables should be moved into classes and their visibility lowered.</p>\n<p>Similarly, mutable <code>static</code> members of classes and enumerations which are accessed directly, rather than through getters and setters,\nshould be protected to the degree possible. That can be done by reducing visibility or making the field <code>final</code> if appropriate.</p>\n<p>Note that making a mutable field, such as an array, <code>final</code> will keep the variable from being reassigned, but doing so has no effect on\nthe mutability of the internal state of the array (i.e. it doesn’t accomplish the goal).</p>\n<p>This rule raises issues for <code>public static</code> array, <code>Collection</code>, <code>Date</code>, and <code>awt.Point</code> members.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic interface MyInterface {\n  public static String [] strings; // Noncompliant\n}\n\npublic class A {\n  public static String [] strings1 = {\"first\",\"second\"};  // Noncompliant\n  public static String [] strings2 = {\"first\",\"second\"};  // Noncompliant\n  public static List&lt;String&gt; strings3 = new ArrayList&lt;&gt;();  // Noncompliant\n  // ...\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S2387",
            "repo": "java",
            "name": "Child class fields should not shadow parent class fields",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "confusing"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2387"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Having a variable with the same name in two unrelated classes is fine, but do the same thing within a class hierarchy and you’ll get confusion at\nbest, chaos at worst.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class Fruit {\n  protected Season ripe;\n  protected Color flesh;\n\n  // ...\n}\n\npublic class Raspberry extends Fruit {\n  private boolean ripe;  // Noncompliant\n  private static Color FLESH; // Noncompliant\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic class Fruit {\n  protected Season ripe;\n  protected Color flesh;\n\n  // ...\n}\n\npublic class Raspberry extends Fruit {\n  private boolean ripened;\n  private static Color FLESH_COLOR;\n\n}\n</pre>\n<h3>Exceptions</h3>\n<p>This rule ignores same-name fields that are <code>static</code> in both the parent and child classes. This rule ignores <code>private</code> parent\nclass fields, but in all other such cases, the child class field should be renamed.</p>\n<pre>\npublic class Fruit {\n  private Season ripe;\n  // ...\n}\n\npublic class Raspberry extends Fruit {\n  private Season ripe;  // Compliant as parent field 'ripe' is anyway not visible from Raspberry\n  // ...\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "BLOCKER"
                }
            ]
        },
        {
            "key": "java:S2388",
            "repo": "java",
            "name": "Inner class calls to super class methods should be unambiguous",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2388"
                ]
            },
            "descriptionSections": [
                {
                    "key": "how_to_fix",
                    "content": "<p>Explicitly call the super type’s method by prepending <code>super.</code> to the method call. If the intention was to call the outer class’s\nimplementation, prepend <code>Outer.this.</code> instead.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class Parent {\n  public void foo() { ... }\n}\n\npublic class Outer {\n  public void foo() { ... }\n\n  public class Inner extends Parent {\n    public void doSomething() {\n      foo();  // Noncompliant, it is not explicit if Outer#foo or Parent#foo is the intended implementation to be called.\n      // ...\n    }\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class Parent {\n  public void foo() { ... }\n}\n\npublic class Outer {\n  public void foo() { ... }\n\n  public class Inner extends Parent {\n    public void doSomething() {\n      super.foo(); // Compliant, it is explicit that Parent#foo is the desired implementation to be called.\n      // ...\n    }\n  }\n}\n</pre>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>An inner class that extends another type can call methods from both the outer class and parent type directly, without prepending\n<code>super.</code> or <code>Outer.this.</code>.</p>\n<p>When both the outer and parent classes contain a method with the same name, the compiler will resolve an unqualified call to the parent type’s\nimplementation. The maintainer or a future reader may confuse the method call as calling the outer class’s implementation, even though it really calls\nthe super type’s.</p>\n<p>To make matters worse, the maintainer sees the outer class’s implementation in the same file as the call in the inner class, while the parent type\nis often declared in another file. The maintainer may not even be aware of the ambiguity present, as they do not see the parent’s implementation.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S3305",
            "repo": "java",
            "name": "Factory method injection should be used in \"@Configuration\" classes",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "spring",
                "performance"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S3305"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>When <code>@Autowired</code> is used, dependencies need to be resolved when the class is instantiated, which may cause early initialization of\nbeans or lead the context to look in places it shouldn’t to find the bean. To avoid this tricky issue and optimize the way the context loads,\ndependencies should be requested as late as possible. That means using parameter injection instead of field injection for dependencies that are only\nused in a single <code>@Bean</code> method.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n@Configuration\npublic class ​FooConfiguration {\n\n  @Autowired private ​DataSource dataSource​;  // Noncompliant\n\n  @Bean\n  public ​MyService myService() {\n    return new ​MyService(this​.dataSource​);\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n@Configuration\npublic class ​FooConfiguration {\n\n @Bean\n  public ​MyService myService(DataSource dataSource) {\n    return new ​MyService(dataSource);\n  }\n}\n</pre>\n<h3>Exceptions</h3>\n<p>Fields used in methods that are called directly by other methods in the application (as opposed to being invoked automatically by the Spring\nframework) are ignored by this rule so that direct callers don’t have to provide the dependencies themselves.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S3306",
            "repo": "java",
            "name": "Constructor injection should be used instead of field injection",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "spring",
                "design",
                "jee",
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S3306"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Field injection seems like a tidy way to get your classes what they need to do their jobs, but it’s really a <code>NullPointerException</code>\nwaiting to happen unless all your class constructors are <code>private</code>. That’s because any class instances that are constructed by callers,\nrather than instantiated by a Dependency Injection framework compliant with the JSR-330 (Spring, Guice, …​), won’t have the ability to perform the\nfield injection.</p>\n<p>Instead <code>@Inject</code> should be moved to the constructor and the fields required as constructor parameters.</p>\n<p>This rule raises an issue when classes with non-<code>private</code> constructors (including the default constructor) use field injection.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nclass MyComponent {  // Anyone can call the default constructor\n\n  @Inject MyCollaborator collaborator;  // Noncompliant\n\n  public void myBusinessMethod() {\n    collaborator.doSomething();  // this will fail in classes new-ed by a caller\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nclass MyComponent {\n\n  private final MyCollaborator collaborator;\n\n  @Inject\n  public MyComponent(MyCollaborator collaborator) {\n    Assert.notNull(collaborator, \"MyCollaborator must not be null!\");\n    this.collaborator = collaborator;\n  }\n\n  public void myBusinessMethod() {\n    collaborator.doSomething();\n  }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "COMPLETE",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S3358",
            "repo": "java",
            "name": "Ternary operators should not be nested",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "confusing"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S3358"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Nested ternaries are hard to read and can make the order of operations complex to understand.</p>\n<pre>\npublic String getReadableStatus(Job j) {\n  return j.isRunning() ? \"Running\" : j.hasErrors() ? \"Failed\" : \"Succeeded\";  // Noncompliant\n}\n</pre>\n<p>Instead, use another line to express the nested operation in a separate statement.</p>\n<pre>\npublic String getReadableStatus(Job j) {\n  if (j.isRunning()) {\n    return \"Running\";\n  }\n  return j.hasErrors() ? \"Failed\" : \"Succeeded\";\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S3599",
            "repo": "java",
            "name": "Double Brace Initialization should not be used",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "leak"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S3599"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Because Double Brace Initialization (DBI) creates an anonymous class with a reference to the instance of the owning object, its use can lead to\nmemory leaks if the anonymous inner class is returned and held by other objects. Even when there’s no leak, DBI is so obscure that it’s bound to\nconfuse most maintainers.</p>\n<p>For collections, use <code>Arrays.asList</code> instead, or explicitly add each item directly to the collection.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nMap source = new HashMap(){{ // Noncompliant\n    put(\"firstName\", \"John\");\n    put(\"lastName\", \"Smith\");\n}};\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nMap source = new HashMap();\n// ...\nsource.put(\"firstName\", \"John\");\nsource.put(\"lastName\", \"Smith\");\n// ...\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S4517",
            "repo": "java",
            "name": "InputSteam.read() implementation should not return a signed byte",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S4517"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>According to the Java documentation, any implementation of the <code>InputSteam.read()</code> method is supposed to read the next byte of data from\nthe input stream. The value byte must be an <code>int</code> in the range 0 to 255. If no byte is available because the end of the stream has been\nreached, the value -1 is returned.</p>\n<p>But in Java, the <code>byte</code> primitive data type is an 8-bit signed two’s complement integer. It has a minimum value of -128 and a maximum\nvalue of 127. So by contract, the implementation of an <code>InputSteam.read()</code> method should never directly return a <code>byte</code>\nprimitive data type. A conversion into an unsigned byte must be done before by applying a bitmask.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n@Override\npublic int read() throws IOException {\n  if (pos == buffer.length()) {\n    return -1;\n  }\n  return buffer.getByte(pos++); // Noncompliant, a signed byte value is returned\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n@Override\npublic int read() throws IOException {\n  if (pos == buffer.length()) {\n    return -1;\n  }\n  return buffer.getByte(pos++) &amp; 0xFF; // The 0xFF bitmask is applied\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S4684",
            "repo": "java",
            "name": "Persistent entities should not be used as arguments of \"@RequestMapping\" methods",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "spring"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "VULNERABILITY",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S4684"
                ]
            },
            "descriptionSections": [
                {
                    "key": "how_to_fix",
                    "content": "<p>The following code is vulnerable to a mass assignment attack because it allows modifying the <code>User</code> persistent entities thanks to\nmaliciously forged <code>Wish</code> object properties.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport javax.persistence.Entity;\n\n@Entity\npublic class Wish {\n  Long productId;\n  Long quantity;\n  Client client;\n}\n\n@Entity\npublic class Client {\n  String clientId;\n  String name;\n  String password;\n}\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n@Controller\npublic class PurchaseOrderController {\n\n  @RequestMapping(path = \"/saveForLater\", method = RequestMethod.POST)\n  public String saveForLater(Wish wish) { // Noncompliant\n    session.save(wish);\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class WishDTO {\n  Long productId;\n  Long quantity;\n  Long clientId;\n}\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n@Controller\npublic class PurchaseOrderController {\n\n  @RequestMapping(path = \"/saveForLater\", method = RequestMethod.POST)\n  public String saveForLater(WishDTO wish) {\n    Wish persistentWish = new Wish();\n    persistentWish.productId = wish.productId\n    persistentWish.quantity = wish.quantity\n    persistentWish.client = getClientById(with.clientId)\n    session.save(persistentWish);\n  }\n}\n</pre>\n<h3>How does this work?</h3>\n<p>The compliant code implements a Data Transfer Object (DTO) layer. Instead of accepting a persistent <code>Wish</code> entity as a parameter, the\nvulnerable method accepts a <code>WishDTO</code> object with a safe, minimal set of properties. It then instantiates a persistent entity and\ninitializes it based on the DTO properties' values. The resulting object can safely be persisted in the database.</p>",
                    "context": {
                        "displayName": "Java EE",
                        "key": "java_ee"
                    }
                },
                {
                    "key": "root_cause",
                    "content": "<p>By accepting persistent entities as method arguments, the application allows clients to manipulate the object’s properties directly.</p>\n<h3>What is the potential impact?</h3>\n<p>Attackers could forge malicious HTTP requests that will alter unexpected properties of persistent objects. This can lead to unauthorized\nmodifications of the entity’s state. This is known as a <strong>mass assignment</strong> attack.</p>\n<p>Depending on the affected objects and properties, the consequences can vary.</p>\n<h4>Privilege escalation</h4>\n<p>If the affected object is used to store the client’s identity or permissions, the attacker could alter it to change their entitlement on the\napplication. This can lead to horizontal or vertical privilege escalation.</p>\n<h4>Security checks bypass</h4>\n<p>Because persistent objects are modified directly without prior logic, attackers could exploit this issue to bypass security measures otherwise\nenforced by the application. For example, an attacker might be able to change their e-mail address to an invalid one by directly setting it without\ngoing through the application’s email validation process.</p>\n<p>The same could also apply to passwords that attackers could change without complexity validation or knowledge of their current value.</p>"
                },
                {
                    "key": "introduction",
                    "content": "<p>With Spring, when a request mapping method is configured to accept bean objects as arguments, the framework will automatically bind HTTP parameters\nto those objects' properties. If the targeted beans are also persistent entities, the framework will also store those properties in the storage\nbackend, usually the application’s database.</p>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> OWASP - <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html\">Mass Assignment Cheat Sheet</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/\">Top 10 2021 - Category A8 - Software and Data\n  Integrity Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\">Top 10 2017 - Category A5 - Broken Access\n  Control</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/915\">CWE-915 - Improperly Controlled Modification of Dynamically-Determined Object\n  Attributes</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<p>OWASP O2 Platform Blog - <a href=\"https://o2platform.files.wordpress.com/2011/07/ounce_springframework_vulnerabilities.pdf\">Two Security\nVulnerabilities in the Spring Framework’s MVC</a></p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "SECURITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S5413",
            "repo": "java",
            "name": "'List.remove()' should not be used in ascending 'for' loops",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5413"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/7/docs/api/java/util/Collection.html#remove(java.lang.Object)\">Java SE 7 API Specification:\n  Collection.remove</a> </li>\n  <li> <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Collection.html#removeIf-java.util.function.Predicate-\">Java SE 8 API\n  Specification: Collection.removeIf</a> </li>\n  <li> <a href=\"https://sonarsource.github.io/rspec/#/rspec/<a href='/coding_rules#rule_key=java%3AS6068'>S6068</a>/java\"><a href='/coding_rules#rule_key=java%3AS127'>S127</a> - \"for\" loop stop conditions should be\n  invariant</a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>When <code>List.remove()</code> is called, the list shrinks, and the indices of all elements following the removed element are decremented by one.\nIf this operation is performed within a loop that iterates through the elements in ascending order, it will cause the loop to skip the element\nimmediately following the removed element.</p>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>There are three ways how to fix this issue:</p>\n<ol>\n  <li> Replace the loop with a call to <code>Collection.removeIf()</code>. This is the preferred solution. </li>\n  <li> Replace the ascending loop with a descending loop. Use this approach if the preferred solution is not possible due to side effects of the loop.\n  </li>\n  <li> Adjust the loop counter within the loop body after the call to <code>Collection.remove()</code>. <strong>This approach is not\n  recommended</strong>, because it will raise an issue with rule <em><a href='/coding_rules#rule_key=java%3AS127'>S127</a> - \"for\" loop stop conditions should be invariant</em> </li>\n</ol>\n\n<h4>Noncompliant code example</h4>\n<p>If the loop can be replaced with Java 8’s <code>Collection.removeIf</code> method, depending on the side effects of the loop and your Java target\nversion, then this is the preferred solution for this issue.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nvoid removeFrom(List&lt;String&gt; list) {\n  // expected: iterate over all list elements\n  for (int i = 0; i &lt; list.size(); i++) {\n    if (list.get(i).isEmpty()) {\n      list.remove(i); // Noncompliant, next element is skipped\n    }\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nvoid removeFrom(List&lt;String&gt; list) {\n  list.removeIf(String::isEmpty); // Compliant\n}\n</pre>\n<h4>Noncompliant code example</h4>\n<p>If this is not possible due to side effects of the loop, replace the ascending loop with a descending loop. Descending loops are not affected by\ndecrementing the element indices after the removed element, because they have already been iterated.</p>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nvoid removeFrom(List&lt;String&gt; list) {\n  // expected: iterate over all list elements\n  for (int i = 0; i &lt; list.size(); i++) {\n    if (list.get(i).isEmpty()) {\n      list.remove(i); // Noncompliant, next element is skipped\n    }\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nvoid removeFrom(List&lt;String&gt; list) {\n    // expected: iterate over all list elements\n    for (int i = list.size() - 1; i &gt;= 0; i--) {\n    if (list.get(i).isEmpty()) {\n      list.remove(i); // Compliant, elements after removed one have already been iterated\n    }\n  }\n}\n</pre>\n<h4>Noncompliant code example</h4>\n<p>Another way to solve this issue is to adjust the loop counter after the call to <code>Collection.remove</code> to account for the index\ndecrement.</p>\n<pre data-diff-id=\"3\" data-diff-type=\"noncompliant\">\nvoid removeFrom(List&lt;String&gt; list) {\n  // expected: iterate over all list elements\n  for (int i = 0; i &lt; list.size(); i++) {\n    if (list.get(i).isEmpty()) {\n      list.remove(i); // Noncompliant, next element is skipped\n    }\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<p><strong>This is not recommanded</strong> because it raises an issue with rule <a href='/coding_rules#rule_key=java%3AS127'>S127</a>.</p>\n<pre data-diff-id=\"3\" data-diff-type=\"compliant\">\nvoid removeFrom(List&lt;String&gt; list) {\n  // expected: iterate over all list elements\n  for (int i = 0; i &lt; list.size(); i++) {\n    if (list.get(i).isEmpty()) {\n      list.remove(i); // Compliant due to counter adjust in next line\n      i--; // Noncompliant with S127!\n    }\n  }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S5776",
            "repo": "java",
            "name": "Exception testing via JUnit ExpectedException rule should not be mixed with other assertions",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "junit",
                "tests"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "TEST",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5776"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://github.com/junit-team/junit4/wiki/Exception-testing\">JUnit exception testing documentation</a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>When testing exception via <code>org.junit.rules.ExpectedException</code> any code after the raised exception will not be executed, so adding\nsubsequent assertions is wrong and misleading. This rule raises an issue when an assertion is done after the \"expect(…​)\" invocation, only the code\nthrowing the expected exception should be after \"expect(…​)\".</p>\n<p>You should consider using <a\nhref=\"https://github.com/junit-team/junit4/wiki/Exception-testing#using-assertthrows-method\">org.junit.Assert.assertThrows</a> instead, it’s available\nsince JUnit 4.13 and it allows additional subsequent assertions.</p>\n<p>Alternatively, you could use <a href=\"https://github.com/junit-team/junit4/wiki/Exception-testing#trycatch-idiom\">try-catch idiom</a> for JUnit\nversion &lt; 4.13 or if your project does not support lambdas.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n@Rule\npublic ExpectedException thrown = ExpectedException.none();\n\n@Test\npublic void test() throws IndexOutOfBoundsException {\n  thrown.expect(IndexOutOfBoundsException.class); // Noncompliant\n  Object o = get();\n  // This test pass since execution will never get past this line.\n  Assert.assertEquals(0, 1);\n}\n\nprivate Object get() {\n  throw new IndexOutOfBoundsException();\n}\n</pre>\n<h3>Compliant solution</h3>\n<ul>\n  <li> For JUnit &gt;= 4.13, use <a\n  href=\"https://github.com/junit-team/junit4/wiki/Exception-testing#using-assertthrows-method\">org.junit.Assert.assertThrows</a>: </li>\n</ul>\n<pre>\nAssert.assertThrows(IndexOutOfBoundsException.class, () -&gt; get());\n// This test correctly fails.\nAssert.assertEquals(0, 1);\n</pre>\n<ul>\n  <li> For JUnit &lt; 4.13, use the <a href=\"https://github.com/junit-team/junit4/wiki/Exception-testing#trycatch-idiom\">try-catch idiom</a>: </li>\n</ul>\n<pre>\ntry {\n  get();\n  Assert.fail(\"Expected an IndexOutOfBoundsException to be thrown\");\n} catch (IndexOutOfBoundsException e) {}\nAssert.assertEquals(0, 1); // Correctly fails.\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S5777",
            "repo": "java",
            "name": "Exception testing via JUnit @Test annotation should be avoided",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "junit",
                "tests"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "TEST",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5777"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://github.com/junit-team/junit4/wiki/Exception-testing\">JUnit exception testing documentation</a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>When testing exception via <code>@Test</code> annotation, having additional assertions inside that test method can be problematic because any code\nafter the raised exception will not be executed. It will prevent you to test the state of the program after the raised exception and, at worst, make\nyou&nbsp;misleadingly think that it is executed.</p>\n<p>You should consider moving any assertions into a separate test method where possible, or using <a\nhref=\"https://github.com/junit-team/junit4/wiki/Exception-testing#using-assertthrows-method\">org.junit.Assert.assertThrows</a> instead.</p>\n<p>Alternatively, you could use <a href=\"https://github.com/junit-team/junit4/wiki/Exception-testing#trycatch-idiom\">try-catch idiom</a> for JUnit\nversion &lt; 4.13 or if your project does not support lambdas.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n@Test(expected = IndexOutOfBoundsException.class)\npublic void testShouldFail() {\n  get();\n  // This test pass since execution will never get past this line.\n  Assert.assertEquals(0, 1);\n}\n\nprivate Object get() {\n  throw new IndexOutOfBoundsException();\n}\n</pre>\n<h3>Compliant solution</h3>\n<ul>\n  <li> For JUnit &gt;= 4.13, use <a\n  href=\"https://github.com/junit-team/junit4/wiki/Exception-testing#using-assertthrows-method\">org.junit.Assert.assertThrows</a>: </li>\n</ul>\n<pre>\n// This test correctly fails.\n@Test\npublic void testToString() {\n    Object obj = get();\n    Assert.assertThrows(IndexOutOfBoundsException.class, () -&gt; obj.toString());\n    Assert.assertEquals(0, 1);\n}\n</pre>\n<ul>\n  <li> For JUnit &lt; 4.13, use the <a href=\"https://github.com/junit-team/junit4/wiki/Exception-testing#trycatch-idiom\">try-catch idiom</a>: </li>\n</ul>\n<pre>\n@Test\npublic void testShouldFail() {\n    Object obj = get();\n    try {\n        obj.toString();\n        Assert.fail(\"Expected an IndexOutOfBoundsException to be thrown\");\n    } catch (IndexOutOfBoundsException e) {}\n    Assert.assertEquals(0, 1); // Correctly fails.\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S5778",
            "repo": "java",
            "name": "Only one method invocation is expected when testing runtime exceptions",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "junit",
                "tests"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "TEST",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5778"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://github.com/junit-team/junit4/wiki/Exception-testing\">JUnit exception testing documentation</a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>When verifying that code raises a runtime exception, a good practice is to avoid having multiple method calls inside the tested code, to be\nexplicit about which method call is expected to raise the exception.</p>\n<p>It increases the clarity of the test, and avoid incorrect testing when another method is actually raising the exception.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n@Test\npublic void testToString() {\n  // Do you expect get() or toString() throwing the exception?\n  org.junit.Assert.assertThrows(IndexOutOfBoundsException.class, () -&gt; get().toString());\n}\n\n@Test\npublic void testToStringTryCatchIdiom() {\n  try {\n    // Do you expect get() or toString() throwing the exception?\n    get().toString();\n    Assert.fail(\"Expected an IndexOutOfBoundsException to be thrown\");\n  } catch (IndexOutOfBoundsException e) {\n    // Test exception message...\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n@Test\npublic void testToString() {\n   Object obj = get();\n   Assert.assertThrows(IndexOutOfBoundsException.class, () -&gt; obj.toString());\n}\n\n@Test\npublic void testToStringTryCatchIdiom() {\n  Object obj = get();\n  try {\n    obj.toString();\n    Assert.fail(\"Expected an IndexOutOfBoundsException to be thrown\");\n  } catch (IndexOutOfBoundsException e) {\n    // Test exception message...\n  }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S5779",
            "repo": "java",
            "name": "Assertion methods should not be used within the try block of a try-catch catching an Error",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "junit",
                "tests"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "TEST",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5779"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Assertion methods&nbsp;are throwing a \"<code>java.lang.AssertionError</code>\". If this call is done within the try block of a try-catch cathing a\nsimilar error, you should make sure to test some properties of the exception. Otherwise, the assertion will never fail.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n@Test\npublic void should_throw_assertion_error() {\n  try {\n    throwAssertionError();\n    Assert.fail(\"Expected an AssertionError!\"); // Noncompliant, the AssertionError will be caught and the test will never fail.\n  } catch (AssertionError e) {}\n}\n\nprivate void throwAssertionError() {\n  throw new AssertionError(\"My assertion error\");\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nassertThrows(AssertionError.class, () -&gt; throwAssertionError());\n</pre>\n<pre>\ntry {\n   throwAssertionError();\n   Assert.fail(\"Expected an AssertionError!\"); // Compliant, we made sure to test that the correct error is raised\n } catch (AssertionError e) {\n   Assert.assertThat(e.getMessage(), is(\"My assertion error\"));\n }\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://github.com/junit-team/junit4/wiki/Exception-testing\">JUnit 4 exception testing documentation</a> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S5846",
            "repo": "java",
            "name": "Empty lines should not be tested with regex MULTILINE flag",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "regex"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5846"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>One way to test for empty lines is to use the regex <code>\"^$\"</code>, which can be extremely handy when filtering out empty lines from collections\nof Strings, for instance. With regard to this, the Javadoc for <a\nhref=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/regex/Pattern.html\">Pattern (Line Terminators)</a> states the\nfollowing:</p>\n<blockquote>\n  <p>By default, the regular expressions ^ and <code>$</code> ignore line terminators and only match at the beginning and the end, respectively, of\n  the entire input sequence. If <code>MULTILINE</code> mode is activated then ^ matches at the beginning of input and after any line terminator\n  <strong>except at the end of input</strong>. When in <code>MULTILINE</code> mode <code>$</code> matches just before a line terminator or the end of\n  the input sequence.</p>\n</blockquote>\n<p>As emphasized, ^ is not going to match at the end of an input, and the end of the input is necessarily included in the empty string, which might\nlead to completely missing empty lines, while it would be the initial reason for using such regex.</p>\n<p>Therefore, when searching for empty lines using a multi-line regular expression, you should also check whether the string is empty.</p>\n<p>This rule is raising an issue every time a pattern that can match the empty string is used with <code>MULTILINE</code> flag and without calling\n<code>isEmpty()</code> on the string.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nstatic final Pattern p = Pattern.compile(\"^$\", Pattern.MULTILINE); // Noncompliant\n\n// Alternatively\nstatic final Pattern p = Pattern.compile(\"(?m)^$\"); // Noncompliant\n\n\nboolean containsEmptyLines(String str) {\n    return p.matcher(str).find();\n}\n\n// ...\nSystem.out.println(containsEmptyLines(\"a\\n\\nb\")); // correctly prints 'true'\nSystem.out.println(containsEmptyLines(\"\")); // incorrectly prints 'false'\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nstatic final Pattern p = Pattern.compile(\"^$\", Pattern.MULTILINE);\n\nboolean containsEmptyLines(String str) {\n    return p.matcher(str).find() || str.isEmpty();\n}\n\n// ...\nSystem.out.println(containsEmptyLines(\"a\\n\\nb\")); // correctly prints 'true'\nSystem.out.println(containsEmptyLines(\"\")); // also correctly prints 'true'\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S5969",
            "repo": "java",
            "name": "Mocking all non-private methods of a class should be avoided",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "tests",
                "mockito"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "TEST",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5969"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>If you end up mocking every non-private method of a class in order to write tests, it is a strong sign that your test became too complex, or that\nyou misunderstood the way you are supposed to use the mocking mechanism.</p>\n<p>You should either refactor the test code into multiple units, or consider using the class itself, by either directly instantiating it, or creating\na new one inheriting from it, with the expected behavior.</p>\n<p>This rule reports an issue when every member of a given class are mocked.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n@Test\nvoid test_requiring_MyClass() {\n  MyClass myClassMock = mock(MyClass.class); // Noncompliant\n  when(myClassMock.f()).thenReturn(1);\n  when(myClassMock.g()).thenReturn(2);\n  //...\n}\n\nabstract class MyClass {\n  abstract int f();\n  abstract int g();\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n@Test\nvoid test_requiring_MyClass() {\n  MyClass myClass = new MyClassForTest();\n  //...\n}\n\nclass MyClassForTest extends MyClass {\n\n  @Override\n  int f() {\n    return 1;\n  }\n\n  @Override\n  int g() {\n    return 2;\n  }\n}\n</pre>\n<p>or</p>\n<pre>\n@Test\nvoid test_requiring_f() {\n  MyClass myClassMock = mock(MyClass.class);\n  when(myClassMock.f()).thenReturn(1);\n  //...\n}\n\n@Test\nvoid test_requiring_g() {\n  MyClass myClassMock = mock(MyClass.class);\n  when(myClassMock.g()).thenReturn(2);\n  //...\n}\n\nabstract class MyClass {\n  abstract int f();\n  abstract int g();\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "FOCUSED",
            "cleanCodeAttributeCategory": "ADAPTABLE",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S6816",
            "repo": "java",
            "name": "Nullable injected fields and parameters should provide a default value",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "spring"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S6816"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>The <code>@Value</code> annotation does not guarantee that the property is defined. Particularly if a field or parameter is annotated as nullable,\nit indicates that the developer assumes that the property may be undefined.</p>\n<p>An undefined property may lead to runtime exceptions when the Spring framework tries to inject the autowired dependency during bean creation.</p>\n<p>This rule raises an issue when a nullable field or parameter is annotated with <code>@Value</code> and no default value is provided.</p>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>Add a default value to the <code>@Value</code> annotation. A default value can be supplied by using the colon (<code>:</code>) operator. As the\nfield is nullable, the default value should most likely be <code>#{null}</code>.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@Nullable\n@Value(\"${my.property}\") // Noncompliant, no default value is provided, even though the field is nullable\nprivate String myProperty;\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@Nullable\n@Value(\"${my.property:#{null}}\") // Compliant, a default value is provided\nprivate String myProperty;\n</pre>"
                },
                {
                    "key": "introduction",
                    "content": "<p>SpEL, the Spring Expression Languages allows developers fine-grained control over the values injected into fields and parameters. Using the\n<code>@Value</code> annotation, it is possible to inject values from sources such as system properties.</p>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> Baeldung - <a href=\"https://www.baeldung.com/spring-value-defaults\">Using Spring @Value With Defaults</a> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "COMPLETE",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S6817",
            "repo": "java",
            "name": "Use of the \"@Async\" annotation on methods declared within a \"@Configuration\" class in Spring Boot",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "spring"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S6817"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p><code>@Configuration</code> is a class-level annotation indicating that an object is a source of bean definitions. <code>@Configuration</code>\nclasses declare beans through <code>@Bean</code>-annotated methods. Calls to <code>@Bean</code> methods on <code>@Configuration</code> classes can\nalso be used to define inter-bean dependencies. The <code>@Bean</code> annotation indicates that a method instantiates, configures, and initializes a\nnew object to be managed by the Spring IoC container.</p>\n<p>Annotating a method of a bean with <code>@Async</code> will make it execute in a separate thread. In other words, the caller will not wait for the\ncompletion of the called method.</p>\n<p>The <code>@Async</code> annotation is not supported on methods declared within a <code>@Configuration</code> class. This is because\n<code>@Async</code> methods are typically used for asynchronous processing, and they require certain infrastructure to be set up, which may not be\navailable or appropriate in a <code>@Configuration</code> class.</p>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>Don’t use <code>@Async</code> annotations on methods of <code>@Configuration</code> classes.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@EnableAsync\n@Configuration\npublic class MyConfiguration {\n\n  @Async // Noncompliant - This is not allowed\n  public void asyncMethod() {\n    // ...\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@EnableAsync\n@Configuration\npublic class MyConfiguration {\n\n  public void method() {\n    // ...\n  }\n}\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/scheduling/annotation/Async.html\">Spring\n  Framework - @Async</a> </li>\n  <li> <a href=\"https://docs.spring.io/spring-framework/reference/core/beans/java/configuration-annotation.html\">Spring Framework - Using the\n  @Configuration annotation</a> </li>\n  <li> <a href=\"https://docs.spring.io/spring-framework/reference/core/beans/java/basic-concepts.html\">Spring Framework - Basic Concepts: @Bean and\n  @Configuration</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://www.baeldung.com/spring-async\">Baeldung - How To Do @Async in Spring</a> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S6862",
            "repo": "java",
            "name": "Beans in \"@Configuration\" class should have different names",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "spring"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S6862"
                ]
            },
            "descriptionSections": [
                {
                    "key": "how_to_fix",
                    "content": "<p>To address this issue, ensure each bean within a configuration has a distinct and meaningful name. Choose names that accurately represent the\npurpose or functionality of the bean.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@Configuration\nclass Config {\n  @Bean\n  public User user() {\n    return currentUser();\n  }\n  @Bean\n  public User user(AuthService auth) { // Noncompliant\n    return auth.user();\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@Configuration\nclass Config {\n  @Bean\n  public User user() {\n    return currentUser();\n  }\n  @Bean\n  public User userFromAuth(AuthService auth) {\n    return auth.user();\n  }\n}\n</pre>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Naming conventions play a crucial role in maintaining code clarity and readability. The uniqueness of bean names in Spring configurations is vital\nto the clarity and readability of the code. When two beans share the same name within a configuration, it is not obvious to the reader which bean is\nbeing referred to. This leads to potential misunderstandings and errors.</p>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.spring.io/spring-framework/reference/core/beans/java/basic-concepts.html\">Spring IO - Basic concepts: @Bean and\n  @Configuration</a> </li>\n  <li> <a href=\"https://docs.spring.io/spring-framework/reference/core/beans/java/configuration-annotation.html\">Spring IO - Using the @Configuration\n  annotation</a> </li>\n  <li> <a href=\"https://docs.spring.io/spring-framework/reference/core/beans/java/bean-annotation.html\">Spring IO - Using the @Bean annotation</a>\n  </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S6863",
            "repo": "java",
            "name": "Set appropriate Status Codes on HTTP responses",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "spring",
                "best-practice"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S6863"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>The request handler function in a <code>Controller</code> should set the appropriate HTTP status code based on the operation’s success or failure.\nThis is done by returning a <code>Response</code> object with the appropriate status code.</p>\n<p>If an exception is thrown during the execution of the handler, the status code should be in the range of 4xx or 5xx. Examples of such codes are\n<code>BAD_REQUEST</code>, <code>UNAUTHORIZED</code>, <code>FORBIDDEN</code>, <code>NOT_FOUND</code>, <code>INTERNAL_SERVER_ERROR</code>,\n<code>BAD_GATEWAY</code>, <code>SERVICE_UNAVAILABLE</code>, etc.</p>\n<p>The status code should be 1xx, 2xx, or 3xx if no exception is thrown and the operation is considered successful. Such codes include\n<code>OK</code>, <code>CREATED</code>, <code>MOVED_PERMANENTLY</code>, <code>FOUND</code>, etc.</p>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/http/HttpStatus.html\">Spring Java Documentation -\n  HttpStatus</a> </li>\n  <li> <a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/http/ResponseEntity.html\">Spring Java\n  Documentation - ResponseEntity</a> </li>\n  <li> <a href=\"https://docs.spring.io/spring-framework/reference/web/webmvc/mvc-controller/ann-methods/responseentity.html\">Spring Framework\n  Documentation - ResponseEntity</a> </li>\n  <li> <a href=\"https://docs.spring.io/spring-framework/reference/web/webmvc/mvc-ann-rest-exceptions.html\">Spring Framework Documentation - Exception\n  Handling</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> <a href=\"https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml\">IANA - Hypertext Transfer Protocol (HTTP) Status Code\n  Registry</a> </li>\n</ul>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@Controller\npublic class UserController {\n    public ResponseEntity&lt;User&gt; getUserById(Long userId) {\n        try {\n            User user = userService.getUserById(userId);\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(user); // Noncompliant: Setting 500 for a successful operation\n        } catch (Exception e) {\n            return ResponseEntity.status(HttpStatus.OK).build(); // Noncompliant: Setting 200 for exception\n        }\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@Controller\npublic class UserController {\n    public ResponseEntity&lt;User&gt; getUserById(Long userId) {\n        try {\n            User user = userService.getUserById(userId);\n            return ResponseEntity.ok(user); // Compliant: Setting 200 for a successful operation\n        } catch (Exception e) {\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build(); // Compliant: Setting 500 for exception\n        }\n    }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "DISTINCT",
            "cleanCodeAttributeCategory": "ADAPTABLE",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S1170",
            "repo": "java",
            "name": "Public constants and fields initialized at declaration should be \"static final\" rather than merely \"final\"",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "convention"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1170"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Making a <code>public</code> constant just <code>final</code> as opposed to <code>static final</code> leads to duplicating its value for every\ninstance of the class, uselessly increasing the amount of memory required to execute the application.</p>\n<p>Further, when a non-<code>public</code>, <code>final</code> field isn’t also <code>static</code>, it implies that different instances can have\ndifferent values. However, initializing a non-<code>static final</code> field in its declaration forces every instance to have the same value. So such\nfields should either be made <code>static</code> or initialized in the constructor.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class Myclass {\n  public final int THRESHOLD = 3;\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic class Myclass {\n  public static final int THRESHOLD = 3;    // Compliant\n}\n</pre>\n<h3>Exceptions</h3>\n<p>No issues are reported on final fields of inner classes whose type is not a primitive or a String. Indeed according to the Java specification:</p>\n<blockquote>\n  <p>An inner class is a nested class that is not explicitly or implicitly declared static. Inner classes may not declare static initializers (§8.7)\n  or member interfaces. Inner classes may not declare static members, unless they are compile-time constant fields (§15.28).</p>\n</blockquote>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "EFFICIENT",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S1171",
            "repo": "java",
            "name": "Only static class initializers should be used",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "30min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "30min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1171"
                ]
            },
            "descriptionSections": [
                {
                    "key": "how_to_fix",
                    "content": "<p>Non-static initializers should be refactored into standard constructors or field initializers when possible.</p>\n<p>In most cases, the use of constructors, overloaded constructors, or factory methods is preferable for initializing instance variables. These\napproaches provide more explicit and controlled initialization, separate concerns, allow for better error handling, and make the code easier to\nunderstand and maintain.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass MyClass {\n  private static final Map&lt;String, String&gt; MY_MAP = new HashMap&lt;String, String&gt;() {\n    {\n      put(\"a\", \"b\");\n    }\n  }; // Noncompliant - HashMap should be extended only to add behavior, not for initialization\n}\n</pre>\n<h4>Compliant solution</h4>\n<p>Using static initialization block:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass MyClass {\n  private static final Map&lt;String, String&gt; MY_MAP = new HashMap&lt;&gt;();\n\n  static {\n    MY_MAP.put(\"a\", \"b\");  // Compliant\n  }\n}\n</pre>\n<p>or using constructor:</p>\n<pre>\nclass MyClass {\n  private static final Map&lt;String, String&gt; MY_MAP = new HashMap&lt;&gt;();\n\n  public MyClass() {\n    MY_MAP.put(\"a\", \"b\");  // Compliant\n  }\n}\n</pre>\n<p>or using Java 9 <code>Map.of</code>:</p>\n<pre>\nclass MyClass {\n  private static final Map&lt;String, String&gt; MY_MAP = java.util.Map.of(\"a\", \"b\");   // Compliant\n}\n</pre>\n<p>or using Guava <code>ImmutableMap.of</code>:</p>\n<pre>\nclass MyClass {\n  private static final Map&lt;String, String&gt; MY_MAP = com.google.common.collect.ImmutableMap.of(\"a\", \"b\");   // Compliant\n}\n</pre>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Non-static initializers, also known as instance initializers, are blocks of code within a class that are executed when an instance of the class is\ncreated. They are executed when an object of the class is created just before the constructor is called. Non-static initializers are useful when you\nwant to perform some common initialization logic for all objects of a class. They allow you to initialize instance variables in a concise and\ncentralized manner, without having to repeat the same initialization code in each constructor.</p>\n<p>While non-static initializers may have some limited use cases, they are rarely used and can be confusing for most developers because they only run\nwhen new class instances are created.</p>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://www.baeldung.com/java-static-instance-initializer-blocks\">Static vs. Instance Initializer Block in Java</a> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S1172",
            "repo": "java",
            "name": "Unused method parameters should be removed",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "unused"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1172"
                ]
            },
            "descriptionSections": [
                {
                    "key": "how_to_fix",
                    "content": "<p>Having unused function parameters in your code can lead to confusion and misunderstanding of a developer’s intention. They reduce code readability\nand introduce the potential for errors. To avoid these problems, developers should remove unused parameters from function declarations.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nvoid doSomething(int a, int b) { // Noncompliant, \"b\" is unused\n  compute(a);\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nvoid doSomething(int a) {\n  compute(a);\n}\n</pre>\n<p>Examples of exceptions:</p>\n<pre>\n@Override\nvoid doSomething(int a, int b) {     // no issue reported on b\n  compute(a);\n}\n\npublic void foo(String s) {\n  // designed to be extended but noop in standard case\n}\n\nprotected void bar(String s) {\n  //open-closed principle\n}\n\npublic void qix(String s) {\n  throw new UnsupportedOperationException(\"This method should be implemented in subclasses\");\n}\n\n/**\n * @param s This string may be used for further computation in overriding classes\n */\nprotected void foobar(int a, String s) { // no issue, method is overridable and unused parameter has proper javadoc\n  compute(a);\n}\n</pre>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>A typical code smell known as unused function parameters refers to parameters declared in a function but not used anywhere within the function’s\nbody. While this might seem harmless at first glance, it can lead to confusion and potential errors in your code. Disregarding the values passed to\nsuch parameters, the function’s behavior will be the same, but the programmer’s intention won’t be clearly expressed anymore. Therefore, removing\nfunction parameters that are not being utilized is considered best practice.</p>\n<h3>Exceptions</h3>\n<p>The rule will not raise issues for unused parameters:</p>\n<ul>\n  <li> that are annotated with <code>@javax.enterprise.event.Observes</code> </li>\n  <li> in overrides and implementation methods </li>\n  <li> in interface <code>default</code> methods </li>\n  <li> in non-private methods that only <code>throw</code> or that have empty bodies </li>\n  <li> in annotated methods, unless the annotation is <code>@SuppressWarning(\"unchecked\")</code> or <code>@SuppressWarning(\"rawtypes\")</code>, in\n  which case the annotation will be ignored </li>\n  <li> in overridable methods (non-final, or not member of a final class, non-static, non-private), if the parameter is documented with a proper\n  javadoc. </li>\n</ul>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/5dUxBQ\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed\n  </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S1174",
            "repo": "java",
            "name": "\"Object.finalize()\" should remain protected (versus public) when overriding",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1174"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>The contract of the <code>Object.finalize()</code> method is clear: only the Garbage Collector is supposed to call this method.</p>\n<p>Making this method public is misleading, because it implies that any caller can use it.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class MyClass {\n\n  @Override\n  public void finalize() {    // Noncompliant\n    /* ... */\n  }\n}\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/583\">CWE-583 - finalize() Method Declared Public</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/4jZGBQ\">CERT, MET12-J.</a> - Do not use finalizers </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "MODULAR",
            "cleanCodeAttributeCategory": "ADAPTABLE",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S2039",
            "repo": "java",
            "name": "Member variable visibility should be specified",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2039"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Failing to explicitly declare the visibility of a member variable could result it in having a visibility you don’t expect, and potentially leave it\nopen to unexpected modification by other classes.</p>\n<p>The default access level modifier may be intentional; in that case, this rule can report false positives.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass Ball {\n  String color = \"red\";  // Noncompliant\n}\nenum A {\n  B;\n  int a;  // Noncompliant\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass Ball {\n  private String color = \"red\";  // Compliant\n}\nenum A {\n  B;\n  private int a;  // Compliant\n}\n</pre>\n<h3>Exceptions</h3>\n<ul>\n  <li> Members with comments containing the word <code>modifier</code> are ignored, as it indicates the modifier is intentionally omitted. </li>\n  <li> Members annotated with the <code>@VisibleForTesting</code> annotation are ignored, as it indicates that visibility has been purposely relaxed\n  to make the code testable. </li>\n</ul>\n<pre>\nclass Cone {\n  @VisibleForTesting\n  Logger logger; // Compliant\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S2140",
            "repo": "java",
            "name": "Methods of \"Random\" that return floating point values should not be used in random integer generation",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "performance",
                "clumsy"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2140"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Generating random floating point values to cast them into integers is inefficient. A random bounded integer value can be generated with a single\nproper method call. Use <code>nextInt</code> to make the code more efficient and the intent clearer.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nRandom r = new Random();\nint rand = (int) (r.nextDouble() * 50);  // Noncompliant way to get a pseudo-random value between 0 and 50\nint rand2 = (int) r.nextFloat(); // Noncompliant; will always be 0;\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nRandom r = new Random();\nint rand = r.nextInt(50);  // returns pseudo-random value between 0 and 50\nint rand2 = 0;\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S2141",
            "repo": "java",
            "name": "Classes that don't define \"hashCode()\" should not be used in hashes",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2141"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Because <code>Object</code> implements <code>hashCode</code>, any Java class can be put into a hash structure. However, classes that define\n<code>equals(Object)</code> but not <code>hashCode()</code> aren’t truly hash-able because instances that are equivalent according to the\n<code>equals</code> method can return different hashes.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class Student {  // no hashCode() method; not hash-able\n  // ...\n\n  public boolean equals(Object o) {\n    // ...\n  }\n}\n\npublic class School {\n  private Map&lt;Student, Integer&gt; studentBody = // okay so far\n          new HashTable&lt;Student, Integer&gt;(); // Noncompliant\n\n  // ...\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic class Student {  // has hashCode() method; hash-able\n  // ...\n\n  public boolean equals(Object o) {\n    // ...\n  }\n  public int hashCode() {\n    // ...\n  }\n}\n\npublic class School {\n  private Map&lt;Student, Integer&gt; studentBody = new HashTable&lt;Student, Integer&gt;();\n\n  // ...\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S2142",
            "repo": "java",
            "name": "\"InterruptedException\" and \"ThreadDeath\" should not be ignored",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "error-handling",
                "multi-threading"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2142"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/391\">CWE-391 - Unchecked Error Condition</a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>If an <code>InterruptedException</code> or a <code>ThreadDeath</code> error is not handled properly, the information that the thread was\ninterrupted will be lost. Handling this exception means either to re-throw it or manually re-interrupt the current thread by calling\n<code>Thread.interrupt()</code>. Simply logging the exception is not sufficient and counts as ignoring it. Between the moment the exception is caught\nand handled, is the right time to perform cleanup operations on the method’s state, if needed.</p>\n<h3>What is the potential impact?</h3>\n<p>Failing to interrupt the thread (or to re-throw) risks delaying the thread shutdown and losing the information that the thread was interrupted -\nprobably without finishing its task.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic void run () {\n  try {\n    /*...*/\n  } catch (InterruptedException e) { // Noncompliant; logging is not enough\n    LOGGER.log(Level.WARN, \"Interrupted!\", e);\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic void run () {\n  try {\n    /* ... */\n  } catch (InterruptedException e) { // Compliant; the interrupted state is restored\n    LOGGER.log(Level.WARN, \"Interrupted!\", e);\n    /* Clean up whatever needs to be handled before interrupting  */\n    Thread.currentThread().interrupt();\n  }\n}\n\npublic void run () {\n  try {\n    /* ... */\n  } catch (ThreadDeath e) { // Compliant; the error is being re-thrown\n    LOGGER.log(Level.WARN, \"Interrupted!\", e);\n    /* Clean up whatever needs to be handled before re-throwing  */\n    throw e;\n  }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "COMPLETE",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S2143",
            "repo": "java",
            "name": "\"java.time\" classes should be used for dates and times",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "java8",
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2143"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>The old, much-derided <code>Date</code> and <code>Calendar</code> classes have always been confusing and difficult to use properly, particularly in\na multi-threaded context. <code>JodaTime</code> has long been a popular alternative, but now an even better option is built-in. Java 8’s JSR 310\nimplementation offers specific classes for:</p>\n<table>\n  <colgroup>\n    <col style=\"width: 50%;\">\n    <col style=\"width: 50%;\">\n  </colgroup>\n  <thead>\n    <tr>\n      <th>Class</th>\n      <th>Use for</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><p>LocalDate</p></td>\n      <td><p>a date, without time of day, offset, or zone</p></td>\n    </tr>\n    <tr>\n      <td><p>LocalTime</p></td>\n      <td><p>the time of day, without date, offset, or zone</p></td>\n    </tr>\n    <tr>\n      <td><p>LocalDateTime</p></td>\n      <td><p>the date and time, without offset, or zone</p></td>\n    </tr>\n    <tr>\n      <td><p>OffsetDate</p></td>\n      <td><p>a date with an offset such as +02:00, without time of day, or zone</p></td>\n    </tr>\n    <tr>\n      <td><p>OffsetTime</p></td>\n      <td><p>the time of day with an offset such as +02:00, without date, or zone</p></td>\n    </tr>\n    <tr>\n      <td><p>OffsetDateTime</p></td>\n      <td><p>the date and time with an offset such as +02:00, without a zone</p></td>\n    </tr>\n    <tr>\n      <td><p>ZonedDateTime</p></td>\n      <td><p>the date and time with a time zone and offset</p></td>\n    </tr>\n    <tr>\n      <td><p>YearMonth</p></td>\n      <td><p>a year and month</p></td>\n    </tr>\n    <tr>\n      <td><p>MonthDay</p></td>\n      <td><p>month and day</p></td>\n    </tr>\n    <tr>\n      <td><p>Year/MonthOfDay/DayOfWeek/…​</p></td>\n      <td><p>classes for the important fields</p></td>\n    </tr>\n    <tr>\n      <td><p>DateTimeFields</p></td>\n      <td><p>stores a map of field-value pairs which may be invalid</p></td>\n    </tr>\n    <tr>\n      <td><p>Calendrical</p></td>\n      <td><p>access to the low-level API</p></td>\n    </tr>\n    <tr>\n      <td><p>Period</p></td>\n      <td><p>a descriptive amount of time, such as \"2 months and 3 days\"</p></td>\n    </tr>\n  </tbody>\n</table>\n<h3>Noncompliant code example</h3>\n<pre>\nDate now = new Date();  // Noncompliant\nDateFormat df = new SimpleDateFormat(\"dd.MM.yyyy\");\nCalendar christmas  = Calendar.getInstance();  // Noncompliant\nchristmas.setTime(df.parse(\"25.12.2020\"));\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nLocalDate now = LocalDate.now();  // gets calendar date. no time component\nLocalTime now2 = LocalTime.now(); // gets current time. no date component\nLocalDate christmas = LocalDate.of(2020,12,25);\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S2159",
            "repo": "java",
            "name": "Unnecessary equality checks should not be made",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "unused"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2159"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Comparisons of dissimilar types will always return false. The comparison and all its dependent code can simply be removed. This includes:</p>\n<ul>\n  <li> comparing an object with null </li>\n  <li> comparing an object with an unrelated primitive (E.G. a string with an int) </li>\n  <li> comparing unrelated classes </li>\n  <li> comparing an unrelated <code>class</code> and <code>interface</code> </li>\n  <li> comparing unrelated <code>interface</code> types </li>\n  <li> comparing an array to a non-array </li>\n  <li> comparing two arrays </li>\n</ul>\n<p>Specifically in the case of arrays, since arrays don’t override <code>Object.equals()</code>, calling <code>equals</code> on two arrays is the same\nas comparing their addresses. This means that <code>array1.equals(array2)</code> is equivalent to <code>array1==array2</code>.</p>\n<p>However, some developers might expect <code>Array.equals(Object obj)</code> to do more than a simple memory address comparison, comparing for\ninstance the size and content of the two arrays. Instead, the <code>==</code> operator or <code>Arrays.equals(array1, array2)</code> should always be\nused with arrays.</p>\n<h3>Noncompliant code example</h3>\n<pre>\ninterface KitchenTool { ... };\ninterface Plant {...}\n\npublic class Spatula implements KitchenTool { ... }\npublic class Tree implements Plant { ...}\n//...\n\nSpatula spatula = new Spatula();\nKitchenTool tool = spatula;\nKitchenTool [] tools = {tool};\n\nTree tree = new Tree();\nPlant plant = tree;\nTree [] trees = {tree};\n\n\nif (spatula.equals(tree)) { // Noncompliant; unrelated classes\n  // ...\n}\nelse if (spatula.equals(plant)) { // Noncompliant; unrelated class and interface\n  // ...\n}\nelse if (tool.equals(plant)) { // Noncompliant; unrelated interfaces\n  // ...\n}\nelse if (tool.equals(tools)) { // Noncompliant; array &amp; non-array\n  // ...\n}\nelse if (trees.equals(tools)) { // Noncompliant; incompatible arrays\n  // ...\n}\nelse if (tree.equals(null)) { // Noncompliant\n  // ...\n}\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/5zdGBQ\">CERT, EXP02-J.</a> - Do not use the Object.equals() method to compare two arrays </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S2260",
            "repo": "java",
            "name": "Java parser failure",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "suspicious"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "30min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "30min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:ParsingError"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>When the Java parser fails, it is possible to record the failure as a violation on the file. This way, not only it is possible to track the number\nof files that do not parse but also to easily find out why they do not parse.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S4201",
            "repo": "java",
            "name": "Null checks should not be used with \"instanceof\"",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "redundant"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S4201"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>There’s no need to null test in conjunction with an <code>instanceof</code> test. <code>null</code> is not an <code>instanceof</code> anything, so\na null check is redundant.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nif (x != null &amp;&amp; x instanceof MyClass) { ... }  // Noncompliant\n\nif (x == null || ! x instanceof MyClass) { ... } // Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nif (x instanceof MyClass) { ... }\n\nif (! x instanceof MyClass) { ... }\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S4449",
            "repo": "java",
            "name": "Nullness of parameters should be guaranteed",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "symbolic-execution"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>When using null-related annotations at global scope level, for instance using <code>javax.annotation.ParametersAreNonnullByDefault</code> (from\nJSR-305) at package level, it means that all the parameters to all the methods included in the package will, or should, be considered\nNon-<code>null</code>. It is equivalent to annotating every parameter in every method with non-null annotations (such as <code>@Nonnull</code>).</p>\n<p>The rule raises an issue every time a parameter could be <code>null</code> for a method invocation, where the method is annotated as forbidding\nnull parameters.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n@javax.annotation.ParametersAreNonnullByDefault\nclass A {\n\n  void foo() {\n    bar(getValue()); // Noncompliant - method 'bar' do not expect 'null' values as parameter\n  }\n\n  void bar(Object o) { // 'o' is by contract expected never to be null\n    // ...\n  }\n\n  @javax.annotation.CheckForNull\n  abstract Object getValue();\n}\n</pre>\n<h3>Compliant solution</h3>\n<p>Two solutions are possible:</p>\n<ul>\n  <li> The signature of the method is correct, and null check should be done prior to the call. </li>\n  <li> The signature of the method is not coherent and should be annotated to allow null values being passed as parameter </li>\n</ul>\n<pre>\n@javax.annotation.ParametersAreNonnullByDefault\nabstract class A {\n\n  void foo() {\n      Object o = getValue();\n      if (o != null) {\n        bar(o); // Compliant - 'o' can not be null\n      }\n  }\n\n  void bar(Object o) {\n    // ...\n  }\n\n  @javax.annotation.CheckForNull\n  abstract Object getValue();\n}\n</pre>\n<p>or</p>\n<pre>\n@javax.annotation.ParametersAreNonnullByDefault\nabstract class A {\n\n  void foo() {\n    bar(getValue());\n  }\n\n  void bar(@javax.annotation.Nullable Object o) { // annotation was missing\n    // ...\n  }\n\n  @javax.annotation.CheckForNull\n  abstract Object getValue();\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S4682",
            "repo": "java",
            "name": "\"@CheckForNull\" or \"@Nullable\" should not be used on primitive types",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "1min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "1min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S4682"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>By definition, primitive types are not Objects and so they can’t be <code>null</code>. Adding <code>@CheckForNull</code> or <code>@Nullable</code>\non primitive types adds confusion and is useless.</p>\n<p>This rule raises an issue when <code>@CheckForNull</code> or <code>@Nullable</code> is set on a method returning a primitive type: byte, short,\nint, long, float, double, boolean, char.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n@CheckForNull\nboolean isFoo() {\n ...\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nboolean isFoo() {\n ...\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S5411",
            "repo": "java",
            "name": "Avoid using boxed \"Boolean\" types directly in boolean expressions",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5411"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>When boxed type <code>java.lang.Boolean</code> is used as an expression to determine the control flow (as described in <a\nhref=\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.2.5\">Java Language Specification §4.2.5 The <code>boolean</code> Type and\nboolean Values</a>) it will throw a <code>NullPointerException</code> if the value is <code>null</code> (as defined in <a\nhref=\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-5.html#jls-5.1.8\">Java Language Specification §5.1.8 Unboxing Conversion</a>).</p>\n<p>It is safer to avoid such conversion altogether and handle the <code>null</code> value explicitly.</p>\n<p>Note, however, that no issues will be raised for Booleans that have already been null-checked or are marked <code>@NonNull/@NotNull</code>.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nBoolean b = getBoolean();\nif (b) {  // Noncompliant, it will throw NPE when b == null\n  foo();\n} else {\n  bar();\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nBoolean b = getBoolean();\nif (Boolean.TRUE.equals(b)) {\n  foo();\n} else {\n  bar();  // will be invoked for both b == false and b == null\n}\n\n\nBoolean b = getBoolean();\nif(b != null){\n  String test = b ? \"test\" : \"\";\n}\n</pre>\n<h3>Exceptions</h3>\n<p>The issue is not raised if the expression is annotated <code>@NonNull</code> / <code>@NotNull</code>. This is useful if a boxed type is an\ninstantiation of a generic type parameter and cannot be avoided.</p>\n<pre>\nList&lt;Boolean&gt; list = new ArrayList&lt;&gt;();\nlist.add(true);\nlist.add(false);\nlist.forEach((@NonNull Boolean value) -&gt; {\n  // Compliant\n  if(value) {\n    System.out.println(\"yes\");\n  }\n});\n\n@NonNull Boolean someMethod() { /* ... */ }\n\n// Compliant\nif(someMethod()) { /* ... */ }\n\n@NonNull Boolean boxedNonNull = Boolean.TRUE;\n\n// Compliant\nif(boxedNonNull) { /* ... */ }\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-5.html#jls-5.1.8\">Java Language Specification §5.1.8 Unboxing Conversion</a>\n  </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "COMPLETE",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S5659",
            "repo": "java",
            "name": "JWT should be signed and verified with strong cipher algorithms",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "privacy"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "VULNERABILITY",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "30min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "30min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5659"
                ]
            },
            "descriptionSections": [
                {
                    "key": "how_to_fix",
                    "content": "<p>The following code contains examples of JWT encoding and decoding without a strong cipher algorithm.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport com.auth0.jwt.JWT;\n\npublic void encode() {\n    JWT.create()\n        .withSubject(SUBJECT)\n        .sign(Algorithm.none()); // Noncompliant\n}\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nimport com.auth0.jwt.JWT;\n\npublic void decode() {\n    JWTVerifier verifier = JWT.require(Algorithm.none()) // Noncompliant\n        .withSubject(LOGIN)\n        .build();\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport com.auth0.jwt.JWT;\n\npublic void encode() {\n    JWT.create()\n        .withSubject(SUBJECT)\n        .sign(Algorithm.HMAC256(SECRET_KEY));\n}\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nimport com.auth0.jwt.JWT;\n\npublic void decode() {\n    JWTVerifier verifier = JWT.require(Algorithm.HMAC256(SECRET_KEY))\n        .withSubject(LOGIN)\n        .build();\n}\n</pre>\n<h3>How does this work?</h3>\n<h4>Always sign your tokens</h4>\n<p>The foremost measure to enhance JWT security is to ensure that every JWT you issue is signed. Unsigned tokens are like open books that anyone can\ntamper with. Signing your JWTs ensures that any alterations to the tokens after they have been issued can be detected. Most JWT libraries support a\nsigning function, and using it is usually as simple as providing a secret key when the token is created.</p>\n<h4>Choose a strong cipher algorithm</h4>\n<p>It is not enough to merely sign your tokens. You need to sign them with a strong cipher algorithm. Algorithms like HS256 (HMAC using SHA-256) are\nconsidered secure for most purposes. But for an additional layer of security, you could use an algorithm like RS256 (RSA Signature with SHA-256),\nwhich uses a private key for signing and a public key for verification. This way, even if someone gains access to the public key, they will not be\nable to forge tokens.</p>\n<h4>Verify the signature of your tokens</h4>\n<p>Resolving a vulnerability concerning the validation of JWT token signatures is mainly about incorporating a critical step into your process:\nvalidating the signature every time a token is decoded. Just having a signed token using a secure algorithm is not enough. If you are not validating\nsignatures, they are not serving their purpose.</p>\n<p>Every time your application receives a JWT, it needs to decode the token to extract the information contained within. It is during this decoding\nprocess that the signature of the JWT should also be checked.</p>\n<p>To resolve the issue, follow these instructions:</p>\n<ol>\n  <li> Use framework-specific functions for signature verification: Most programming frameworks that support JWTs provide specific functions to not\n  only decode a token but also validate its signature simultaneously. Make sure to use these functions when handling incoming tokens. </li>\n  <li> Handle invalid signatures appropriately: If a JWT’s signature does not validate correctly, it means the token is not trustworthy, indicating\n  potential tampering. The action to take when encountering an invalid token should be denying the request carrying it and logging the event for\n  further investigation. </li>\n  <li> Incorporate signature validation in your tests: When you are writing tests for your application, include tests that check the signature\n  validation functionality. This can help you catch any instances where signature verification might be unintentionally skipped or bypassed. </li>\n</ol>\n<p>By following these practices, you can ensure the security of your application’s JWT handling process, making it resistant to attacks that rely on\ntampering with tokens. Validation of the signature needs to be an integral and non-negotiable part of your token handling process.</p>\n<h3>Going the extra mile</h3>\n<h4>Securely store your secret keys</h4>\n<p>Ensure that your secret keys are stored securely. They should not be hard-coded into your application code or checked into your version control\nsystem. Instead, consider using environment variables, secure key management systems, or vault services.</p>\n<h4>Rotate your secret keys</h4>\n<p>Even with the strongest cipher algorithms, there is a risk that your secret keys may be compromised. Therefore, it is a good practice to\nperiodically rotate your secret keys. By doing so, you limit the amount of time that an attacker can misuse a stolen key. When you rotate keys, be\nsure to allow a grace period where tokens signed with the old key are still accepted to prevent service disruptions.</p>",
                    "context": {
                        "displayName": "Auth0 JWT",
                        "key": "auth0_jwt"
                    }
                },
                {
                    "key": "introduction",
                    "content": "<p>This vulnerability allows forging of JSON Web Tokens to impersonate other users.</p>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>JSON Web Tokens (JWTs), a popular method of securely transmitting information between parties as a JSON object, can become a significant security\nrisk when they are not properly signed with a robust cipher algorithm, left unsigned altogether, or if the signature is not verified. This\nvulnerability class allows malicious actors to craft fraudulent tokens, effectively impersonating user identities. In essence, the integrity of a JWT\nhinges on the strength and presence of its signature.</p>\n<h3>What is the potential impact?</h3>\n<p>When a JSON Web Token is not appropriately signed with a strong cipher algorithm or if the signature is not verified, it becomes a significant\nthreat to data security and the privacy of user identities.</p>\n<h4>Impersonation of users</h4>\n<p>JWTs are commonly used to represent user authorization claims. They contain information about the user’s identity, user roles, and access rights.\nWhen these tokens are not securely signed, it allows an attacker to forge them. In essence, a weak or missing signature gives an attacker the power to\ncraft a token that could impersonate any user. For instance, they could create a token for an administrator account, gaining access to high-level\npermissions and sensitive data.</p>\n<h4>Unauthorized data access</h4>\n<p>When a JWT is not securely signed, it can be tampered with by an attacker, and the integrity of the data it carries cannot be trusted. An attacker\ncan manipulate the content of the token and grant themselves permissions they should not have, leading to unauthorized data access.</p>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>The following code contains examples of JWT encoding and decoding without a strong cipher algorithm.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"noncompliant\">\nimport io.jsonwebtoken.Jwts;\n\npublic void encode() {\n    Jwts.builder()\n        .setSubject(USER_LOGIN)\n        .compact(); // Noncompliant\n}\n</pre>\n<pre data-diff-id=\"12\" data-diff-type=\"noncompliant\">\nimport io.jsonwebtoken.Jwts;\n\npublic void decode() {\n    Jwts.parser()\n        .setSigningKey(SECRET_KEY)\n        .parse(token)\n        .getBody(); // Noncompliant\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"compliant\">\nimport io.jsonwebtoken.Jwts;\n\npublic void encode() {\n    Jwts.builder()\n        .setSubject(USER_LOGIN)\n        .signWith(SignatureAlgorithm.HS256, SECRET_KEY)\n        .compact();\n}\n</pre>\n<p>When using <code>Jwts.parser()</code>, make sure to call <code>parseClaimsJws</code> instead of <code>parse</code> as it throws exceptions for\ninvalid or missing signatures.</p>\n<pre data-diff-id=\"12\" data-diff-type=\"compliant\">\nimport io.jsonwebtoken.Jwts;\n\npublic void decode() {\n    Jwts.parser()\n        .setSigningKey(SECRET_KEY)\n        .parseClaimsJws(token)\n        .getBody();\n}\n</pre>\n<h3>How does this work?</h3>\n<h4>Always sign your tokens</h4>\n<p>The foremost measure to enhance JWT security is to ensure that every JWT you issue is signed. Unsigned tokens are like open books that anyone can\ntamper with. Signing your JWTs ensures that any alterations to the tokens after they have been issued can be detected. Most JWT libraries support a\nsigning function, and using it is usually as simple as providing a secret key when the token is created.</p>\n<h4>Choose a strong cipher algorithm</h4>\n<p>It is not enough to merely sign your tokens. You need to sign them with a strong cipher algorithm. Algorithms like HS256 (HMAC using SHA-256) are\nconsidered secure for most purposes. But for an additional layer of security, you could use an algorithm like RS256 (RSA Signature with SHA-256),\nwhich uses a private key for signing and a public key for verification. This way, even if someone gains access to the public key, they will not be\nable to forge tokens.</p>\n<h4>Verify the signature of your tokens</h4>\n<p>Resolving a vulnerability concerning the validation of JWT token signatures is mainly about incorporating a critical step into your process:\nvalidating the signature every time a token is decoded. Just having a signed token using a secure algorithm is not enough. If you are not validating\nsignatures, they are not serving their purpose.</p>\n<p>Every time your application receives a JWT, it needs to decode the token to extract the information contained within. It is during this decoding\nprocess that the signature of the JWT should also be checked.</p>\n<p>To resolve the issue, follow these instructions:</p>\n<ol>\n  <li> Use framework-specific functions for signature verification: Most programming frameworks that support JWTs provide specific functions to not\n  only decode a token but also validate its signature simultaneously. Make sure to use these functions when handling incoming tokens. </li>\n  <li> Handle invalid signatures appropriately: If a JWT’s signature does not validate correctly, it means the token is not trustworthy, indicating\n  potential tampering. The action to take when encountering an invalid token should be denying the request carrying it and logging the event for\n  further investigation. </li>\n  <li> Incorporate signature validation in your tests: When you are writing tests for your application, include tests that check the signature\n  validation functionality. This can help you catch any instances where signature verification might be unintentionally skipped or bypassed. </li>\n</ol>\n<p>By following these practices, you can ensure the security of your application’s JWT handling process, making it resistant to attacks that rely on\ntampering with tokens. Validation of the signature needs to be an integral and non-negotiable part of your token handling process.</p>\n<h3>Going the extra mile</h3>\n<h4>Securely store your secret keys</h4>\n<p>Ensure that your secret keys are stored securely. They should not be hard-coded into your application code or checked into your version control\nsystem. Instead, consider using environment variables, secure key management systems, or vault services.</p>\n<h4>Rotate your secret keys</h4>\n<p>Even with the strongest cipher algorithms, there is a risk that your secret keys may be compromised. Therefore, it is a good practice to\nperiodically rotate your secret keys. By doing so, you limit the amount of time that an attacker can misuse a stolen key. When you rotate keys, be\nsure to allow a grace period where tokens signed with the old key are still accepted to prevent service disruptions.</p>",
                    "context": {
                        "displayName": "Java JWT",
                        "key": "java_jwt"
                    }
                },
                {
                    "key": "resources",
                    "content": "<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">Top 10 2021 Category A2 - Cryptographic Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/347\">CWE-347 - Improper Verification of Cryptographic Signature</a> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "TRUSTWORTHY",
            "cleanCodeAttributeCategory": "RESPONSIBLE",
            "impacts": [
                {
                    "softwareQuality": "SECURITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S6876",
            "repo": "java",
            "name": "Reverse iteration should utilize reversed view",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "java21"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S6876"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> Java Documentation - <a href=\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/util/SequencedCollection.html\">Interface\n  SequencedCollection</a> </li>\n  <li> OpenJDK - <a href=\"https://openjdk.org/jeps/431\">JEP 431: Sequenced Collections</a> </li>\n  <li> Java Documentation - <a\n  href=\"https://docs.oracle.com/en/java/javase/21/core/creating-sequenced-collections-sets-and-maps.html#GUID-DCFE1D88-A0F5-47DE-A816-AEDA50B97523\">Creating Sequenced Collections, Sets, and Maps</a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Java 21 introduces the new Sequenced Collections API, which is applicable to all collections with a defined sequence on their elements, such as\n<code>LinkedList</code>, <code>TreeSet</code>, and others (see <a href=\"https://openjdk.org/jeps/431\">JEP 431</a>). For projects using Java 21 and\nonwards, this API should be utilized instead of workaround implementations that were necessary before Java 21.</p>\n<p>This rule reports when a collection is iterated in reverse through explicit implementation or workarounds, instead of using the reversed view of\nthe collection.</p>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>Replace the reported statement with a forward-iteration over the reversed view of the collection.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nvoid printLastToFirst(List&lt;String&gt; list) {\n  for (var it = list.listIterator(list.size()); it.hasPrevious();) {\n    var element = it.previous();\n    System.out.println(element);\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nvoid printLastToFirst(List&lt;String&gt; list) {\n  for (var element: list.reversed()) {\n    System.out.println(element);\n  }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S6877",
            "repo": "java",
            "name": "Reverse view should be used instead of reverse copy in read-only cases",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "java21"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S6877"
                ]
            },
            "descriptionSections": [
                {
                    "key": "how_to_fix",
                    "content": "<p>Remove <code>Collections.reverse(list);</code> and replace <code>list</code> with <code>list.reversed()</code> after.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nvoid foo() {\n  var list = new ArrayList&lt;String&gt;();\n  list.add(\"A\");\n  list.add(\"B\");\n  Collections.reverse(list); // Noncompliant\n  for (var e : list) {\n    // ...\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nvoid foo() {\n  var list = new ArrayList&lt;String&gt;();\n  list.add(\"A\");\n  list.add(\"B\");\n  for (var e : list.reversed()) {  // Compliant\n    // ...\n  }\n}\n</pre>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nvoid foo(List&lt;String&gt; list) {\n  var copy = new ArrayList&lt;String&gt;(list);\n  Collections.reverse(copy); // Noncompliant\n  for (var e : copy) {\n    // ...\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nvoid foo(List&lt;String&gt; list) {\n  for (var e : list.reversed()) {  // Compliant\n    // ...\n  }\n}\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> Java Documentation - <a href=\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/util/SequencedCollection.html\">Interface\n  SequencedCollection</a> </li>\n  <li> OpenJDK - <a href=\"https://openjdk.org/jeps/431\">JEP 431: Sequenced Collections</a> </li>\n  <li> Java Documentation - <a\n  href=\"https://docs.oracle.com/en/java/javase/21/core/creating-sequenced-collections-sets-and-maps.html#GUID-DCFE1D88-A0F5-47DE-A816-AEDA50B97523\">Creating Sequenced Collections, Sets, and Maps</a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Java 21 introduces the new Sequenced Collections API, which applies to all collections with a defined sequence on their elements, such as\n<code>LinkedList</code>, <code>TreeSet</code>, and others (see <a href=\"https://openjdk.org/jeps/431\">JEP 431</a>). For projects using Java 21 and\nonwards, use this API instead of workaround implementations that were necessary before Java 21. One of the features of the new Sequenced Collections\nAPI is <code>SequencedCollection.reversed()</code> which returns a lightweight view of the original collection, in the reverse order.</p>\n<p>This rule reports when reverse view would have been sufficient instead of a reverse copy of a sequenced collection created using a list constructor\nplus a <code>Collections.reverse(collection);</code> call.</p>\n<p>If feasible, a view should be preferred over a copy because a view is a lightweight iterator without modification of the list itself.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S6878",
            "repo": "java",
            "name": "Use record pattern instead of explicit field access",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "java21"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S6878"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://openjdk.org/jeps/440\">JEP 440: Record Patterns</a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Java 21 enhances Pattern Matching, introduced in Java 16, with a <em>record pattern</em> that decomposes records into local variables. This form\nshould be used when all fields of a record are accessed within a block for improved readability. Nested record patterns are also allowed and should be\nused when a record field is another record, and all its fields are accessed.</p>\n<h2>Exceptions</h2>\n<p>This rule does not apply when not all record fields are accessed. This prevents the creation of unused local variables in the decomposed record\nstructure.</p>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>Replace the instance check or simple pattern matching with a record pattern.</p>\n\n<h4>Noncompliant code example</h4>\n<p>This example uses pattern matching but not a record pattern, even though all fields of the record are accessed in the block.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nrecord Point(Float x, Float y, Float z) {}\n\nvoid print(Object obj) {\n    if (obj instanceof Point p) { // Noncompliant, because all three fields x, y, z are accessed\n        Float x = p.x;\n        Float y = p.y();\n        System.out.println(x + y + p.z);\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<p>The compliant example uses a record pattern to decompose the record structure.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nrecord Point(Float x, Float y, Float z) {}\n\nvoid print(Object obj) {\n    if (obj instanceof Point(Float x, Float y, Float z)) { // Compliant\n        System.out.println(x + y + z);\n    }\n}\n</pre>\n<h4>Noncompliant code example</h4>\n<p>This example does not use pattern matching or a record pattern. Rule <em><a\nhref=\"https://sonarsource.github.io/rspec/#/rspec/<a href='/coding_rules#rule_key=java%3AS6201'>S6201</a>\"><a href='/coding_rules#rule_key=java%3AS6201'>S6201</a> - Pattern matching or \"instanceOf\" operator should be\nused</a></em> would report first. When fixed using simple pattern matching instead of a record pattern, this rule (<a href='/coding_rules#rule_key=java%3AS6878'>S6878</a>) will report.</p>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nvoid print(Object obj) {\n    if (obj instanceof Point) { // Noncompliant\n        Point p = (Point) obj;\n        Float x = p.x;\n        Float y = p.y();\n        System.out.println(x + y + p.z);\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<p>The solution compliant with both rules, <a href='/coding_rules#rule_key=java%3AS6201'>S6201</a> and <a href='/coding_rules#rule_key=java%3AS6878'>S6878</a>, uses pattern matching and decomposes the record structure using a\nrecord pattern.</p>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nvoid print(Object obj) {\n    if (obj instanceof Point(Float x, Float y, Float z)) { // Compliant\n        System.out.println(x + y + z);\n    }\n}\n</pre>\n<h4>Noncompliant code example</h4>\n<p>This example is noncompliant because a nested record pattern could have been used.</p>\n<pre data-diff-id=\"3\" data-diff-type=\"noncompliant\">\nrecord Plane(Point normal, Float d) {}\n\nvoid print(Object obj) {\n    // Noncompliant, because all field of \"normal\" are accessed\n    if (obj instanceof Plane(Point normal, Float d)) {\n        System.out.println(normal.x + normal.y + normal.z);\n        System.out.println(d);\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<p>This is the same example using a nested record pattern.</p>\n<pre data-diff-id=\"3\" data-diff-type=\"compliant\">\nvoid print(Object obj) {\n    if (obj instanceof Plane(Point(Float x, Float y, Float z), Float d)) { // Compliant\n        System.out.println(x + y + z);\n        System.out.println(d);\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<p>This example uses <code>var</code> instead of replicating the field types in the record pattern, which is less verbose and keeps the code more\nreadable, especially in the case of longer type names. Also, it uses variable names that do not match the original field names. The reason for this\ncan be to avoid name collisions with fields or other local variables.</p>\n<pre>\nvoid print(Object obj) {\n    if (obj instanceof Point(var px, var py, var pz)) { // Compliant\n        System.out.println(px + py + pz);\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<p>This example is compliant without using a record pattern, as it does not access all fields.</p>\n<pre>\nvoid print(Object obj) {\n    if (obj instanceof Point p) { // Compliant, because z is never accessed\n        Float x = p.x;\n        Float y = p.y();\n        System.out.println(x + y);\n    }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S1065",
            "repo": "java",
            "name": "Unused labels should be removed",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "unused"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1065"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/5dUxBQ\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed\n  </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>If a label is declared but not used in the program, it can be considered as dead code and should therefore be removed.</p>\n<p>This will improve maintainability as developers will not wonder what this label is used for.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nvoid foo() {\n  outer: //label is not used.\n  for(int i = 0; i&lt;10; i++) {\n    break;\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nvoid foo() {\n  for(int i = 0; i&lt;10; i++) {\n    break;\n  }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S1066",
            "repo": "java",
            "name": "Mergeable \"if\" statements should be combined",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "clumsy"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1066"
                ]
            },
            "descriptionSections": [
                {
                    "key": "how_to_fix",
                    "content": "<p>If merging the conditions seems to result in a more complex code, extracting the condition or part of it in a named function or variable is a\nbetter approach to fix readability.</p>\n\n<h4>Noncompliant code example</h4>\n<pre>\nif (file != null) {\n  if (file.isFile() || file.isDirectory()) {  // Noncompliant\n    /* ... */\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre>\nif (file != null &amp;&amp; isFileOrDirectory(file)) { // Compliant\n  /* ... */\n}\n\nprivate static boolean isFileOrDirectory(File file) {\n  return file.isFile() || file.isDirectory();\n}\n</pre>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Nested code - blocks of code inside blocks of code - is eventually necessary, but increases complexity. This is why keeping the code as flat as\npossible, by avoiding unnecessary nesting, is considered a good practice.</p>\n<p>Merging <code>if</code> statements when possible will decrease the nesting of the code and improve its readability.</p>\n<p>Code like</p>\n<pre>\nif (condition1) {\n  if (condition2) {             // Noncompliant\n    /* ... */\n  }\n}\n</pre>\n<p>Will be more readable as</p>\n<pre>\nif (condition1 &amp;&amp; condition2) { // Compliant\n  /* ... */\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S1067",
            "repo": "java",
            "name": "Expressions should not be too complex",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "brain-overload"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "max",
                    "htmlDesc": "Maximum number of allowed conditional operators in an expression",
                    "defaultValue": "3",
                    "type": "INTEGER"
                }
            ],
            "defaultDebtRemFnType": "LINEAR_OFFSET",
            "debtRemFnType": "LINEAR_OFFSET",
            "type": "CODE_SMELL",
            "defaultRemFnType": "LINEAR_OFFSET",
            "defaultRemFnGapMultiplier": "1min",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "LINEAR_OFFSET",
            "remFnGapMultiplier": "1min",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "gapDescription": "per complexity point above the threshold",
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1067"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>The complexity of an expression is defined by the number of <code>&amp;&amp;</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code>\noperators it contains.</p>\n<p>A single expression’s complexity should not become too high to keep the code readable.</p>\n<h3>Noncompliant code example</h3>\n<p>With the default threshold value of 3:</p>\n<pre>\nif (((condition1 &amp;&amp; condition2) || (condition3 &amp;&amp; condition4)) &amp;&amp; condition5) { ... }\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nif ( (myFirstCondition() || mySecondCondition()) &amp;&amp; myLastCondition()) { ... }\n</pre>\n<h3>Exceptions</h3>\n<p>No issue is reported inside <code>equals</code> methods, because it is common to compare all the fields of a class for equality inside this kind of\nmethod.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "FOCUSED",
            "cleanCodeAttributeCategory": "ADAPTABLE",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S1068",
            "repo": "java",
            "name": "Unused \"private\" fields should be removed",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "unused"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "ignoreAnnotations",
                    "htmlDesc": "Ignore annotations with next names (fully qualified class names separated with &quot;,&quot;).",
                    "type": "STRING"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1068"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>If a <code>private</code> field is declared but not used locally, its limited visibility makes it dead code.</p>\n<p>This is either a sign that some logic is missing or that the code should be cleaned.</p>\n<p>Cleaning out dead code decreases the size of the maintained codebase, making it easier to understand and preventing bugs from being introduced.</p>\n<pre>\npublic class MyClass {\n  private int foo = 42; // Noncompliant: foo is unused and should be removed\n\n  public int compute(int a) {\n    return a * 42;\n  }\n\n}\n</pre>\n<p>Note that this rule does not take reflection into account, which means that issues will be raised on <code>private</code> fields that are only\naccessed using the reflection API.</p>\n<h3>Exceptions</h3>\n<p>The rule admits 3 exceptions:</p>\n<ul>\n  <li> Serialization ID fields </li>\n</ul>\n<p>The Java serialization runtime associates with each serializable class a version number called <code>serialVersionUID</code>, which is used during\ndeserialization to verify that the sender and receiver of a serialized object have loaded classes for that object that are compatible for\nserialization.</p>\n<p>A serializable class can declare its own <code>serialVersionUID</code> explicitly by declaring a field named <code>serialVersionUID</code> that\nmust be static, final, and of type long. By definition, those <code>serialVersionUID</code> fields should not be reported by this rule:</p>\n<pre>\npublic class MyClass implements java.io.Serializable {\n  private static final long serialVersionUID = 42L;  // Compliant by exception\n}\n</pre>\n<ul>\n  <li> Annotated fields and classes annotated with Lombok annotations </li>\n</ul>\n<p>The unused field in this class will not be reported by the rule as it is annotated, except if annotation class <code>SomeAnnotation</code> is\nlisted in the <code>ignoreAnnotations</code> parameter (see Parameters).</p>\n<pre>\npublic class MyClass {\n  @SomeAnnotation\n  private int unused;  // Compliant by exception\n}\n</pre>\n<ul>\n  <li> Fields from classes with native methods </li>\n</ul>\n<p>The unused field in this class will not be reported by the rule as it might be used by native code.</p>\n<pre>\npublic class MyClass {\n  private int unused = 42;  // Compliant by exception\n  private native static void doSomethingNative();\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S1185",
            "repo": "java",
            "name": "Overriding methods should do more than simply call the same method in the super class",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "redundant",
                "clumsy"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1185"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Overriding a method just to call the same method from the super class without performing any other actions is useless and misleading. The only time\nthis is justified is in <code>final</code> overriding methods, where the effect is to lock in the parent class behavior. This rule ignores such\noverrides of <code>equals</code>, <code>hashCode</code> and <code>toString</code>.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic void doSomething() {\n  super.doSomething();\n}\n\n@Override\npublic boolean isLegal(Action action) {\n  return super.isLegal(action);\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n@Override\npublic boolean isLegal(Action action) {         // Compliant - not simply forwarding the call\n  return super.isLegal(new Action(/* ... */));\n}\n\n@Id\n@Override\npublic int getId() {                            // Compliant - there is annotation different from @Override\n  return super.getId();\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S1186",
            "repo": "java",
            "name": "Methods should not be empty",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "suspicious"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1186"
                ]
            },
            "descriptionSections": [
                {
                    "key": "how_to_fix",
                    "content": "<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic void shouldNotBeEmpty() {  // Noncompliant - method is empty\n}\n\npublic void notImplemented() {  // Noncompliant - method is empty\n}\n\n@Override\npublic void emptyOnPurpose() {  // Noncompliant - method is empty\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic void doSomething() {\n  doSomething();\n}\n\npublic void notImplemented() {\n  throw new UnsupportedOperationException(\"notImplemented() cannot be performed because ...\");\n}\n\n@Override\npublic void emptyOnPurpose() {\n  // comment explaining why the method is empty\n}\n</pre>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>An empty method is generally considered bad practice and can lead to confusion, readability, and maintenance issues. Empty methods bring no\nfunctionality and are misleading to others as they might think the method implementation fulfills a specific and identified requirement.</p>\n<p>There are several reasons for a method not to have a body:</p>\n<ul>\n  <li> It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. </li>\n  <li> It is not yet, or never will be, supported. In this case an exception should be thrown. </li>\n  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>\n</ul>\n<h3>Exceptions</h3>\n<p>This does not raise an issue in the following cases:</p>\n<ul>\n  <li> Non-public default (no-argument) constructors </li>\n  <li> Public default (no-argument) constructors when there are other constructors in the class </li>\n  <li> Empty methods in abstract classes </li>\n  <li> Methods annotated with <code>@org.aspectj.lang.annotation.Pointcut()</code> </li>\n</ul>\n<pre>\npublic abstract class Animal {\n  void speak() {  // default implementation ignored\n  }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "COMPLETE",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S1188",
            "repo": "java",
            "name": "Anonymous classes should not have too many lines",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "Max",
                    "htmlDesc": "Maximum allowed lines in an anonymous class",
                    "defaultValue": "20",
                    "type": "INTEGER"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1188"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Anonymous classes are a very convenient and compact way to inject a behavior without having to create a dedicated class. But those anonymous inner\nclasses should be used only if the behavior to be injected can be defined in a few lines of code, otherwise the source code can quickly become\nunreadable.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "FOCUSED",
            "cleanCodeAttributeCategory": "ADAPTABLE",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S2153",
            "repo": "java",
            "name": "Unnecessary boxing and unboxing should be avoided",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "clumsy"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2153"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Boxing is the process of putting a primitive value into a wrapper object, such as creating an <code>Integer</code> to hold an <code>int</code>\nvalue. Unboxing is the process of retrieving the primitive value from such an object. Since the original value is unchanged during boxing and\nunboxing, there is no point in doing either when not needed.</p>\n<p>Instead, you should rely on Java’s implicit boxing/unboxing to convert from the primitive type to the wrapper type and vice versa, for better\nreadability.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic void examinePrimitiveInt(int a) {\n  //...\n}\n\npublic void examineBoxedInteger(Integer a) {\n  // ...\n}\n\npublic void func() {\n  int primitiveInt = 0;\n  Integer boxedInt = Integer.valueOf(0);\n  double d = 1.0;\n\n  int dIntValue = Double.valueOf(d).intValue(); // Noncompliant; should be replaced with a simple cast\n\n  examinePrimitiveInt(boxedInt.intValue()); // Noncompliant; unnecessary unboxing\n  examinePrimitiveInt(Integer.valueOf(primitiveInt));  // Noncompliant; boxed int will be auto-unboxed\n\n  examineBoxedInteger(Integer.valueOf(primitiveInt)); // Noncompliant; unnecessary boxing\n  examineBoxedInteger(boxedInt.intValue()); // Noncompliant; unboxed int will be autoboxed\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic void examinePrimitiveInt(int a) {\n  //...\n}\n\npublic void examineBoxedInteger(Integer a) {\n  // ...\n}\n\npublic void func() {\n  int primitiveInt = 0;\n  Integer boxedInt = Integer.valueOf(0);\n  double d = 1.0;\n\n  int dIntValue = (int) d;\n\n  examinePrimitiveInt(primitiveInt);\n  examinePrimitiveInt(boxedInt);\n\n  examineBoxedInteger(primitiveInt);\n  examineBoxedInteger(boxedInt);\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S2154",
            "repo": "java",
            "name": "Dissimilar primitive wrappers should not be used with the ternary operator without explicit casting",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2154"
                ]
            },
            "descriptionSections": [
                {
                    "key": "how_to_fix",
                    "content": "<h4>Noncompliant code example</h4>\n<p>Cast one of both operands to a common supertype (e.g., <code>Number</code>) to prevent auto-unboxing and, thus, type coercion.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nInteger i = 123456789;\nFloat f = 1.0f;\nNumber n1 = condition ? i : f;  // Noncompliant, unexpected precision loss, n1 = 1.23456792E8\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nInteger i = 123456789;\nFloat f = 1.0f;\nNumber n1 = condition ? (Number) i : f; // Compliant, cast to Number prevents unboxing\nNumber n2 = condition ? i : (Number) f; // Compliant, cast to Number prevents unboxing\n</pre>\n<h4>Noncompliant code example</h4>\n<p>If type coercion was your intention, clarify this by casting the operand that would be coerced to the corresponding type explicitly.</p>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nInteger i = 123456789;\nFloat f = 1.0f;\nNumber n1 = condition ? i : f;  // Noncompliant, unexpected precision loss, n1 = 1.23456792E8\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nInteger i = 123456789;\nFloat f = 1.0f;\nNumber n = condition ? (float) i : f; // Compliant, intentional type coercion with precision loss\n</pre>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Using boxed values in a ternary operator does not simply return one operand or the other based on the condition. Instead, the values are unboxed\nand coerced to a common type, which can result in a loss of precision when converting one operand from <code>int</code> to <code>float</code> or from\n<code>long</code> to <code>double</code>.</p>\n<p>While this behavior is expected for arithmetic operations, it may be unexpected for the ternary operator. To avoid confusion or unexpected\nbehavior, cast to a compatible type explicitly.</p>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/tutorial/java/nutsandbolts/op2.html\">The Java Tutorials: Equality, Relational, and Conditional\n  Operators</a> </li>\n  <li> <a href=\"https://docs.oracle.com/javase/tutorial/java/data/autoboxing.html\">The Java Tutorials: Autoboxing and Unboxing</a> </li>\n  <li> <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-5.html\">The Java® Language Specification Java SE 7 Edition: Chapter 5.\n  Conversions and Promotions</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://www.geeksforgeeks.org/coercion-in-java/\">GeeksforGeeks: Coercion in Java</a> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S2156",
            "repo": "java",
            "name": "\"final\" classes should not have \"protected\" members",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "confusing"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2156"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>The difference between <code>private</code> and <code>protected</code> visibility is that child classes can see and use <code>protected</code>\nmembers, but they cannot see <code>private</code> ones. Since a <code>final</code> class will have no children, marking the members of a\n<code>final</code> class <code>protected</code> is confusingly pointless.</p>\n<p>Note that the <code>protected</code> members of a class can also be seen and used by other classes that are placed within the same package, this\ncould lead to accidental, unintended access to otherwise private members.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic final class MyFinalClass {\n\n  protected String name = \"Fred\";  // Noncompliant\n  protected void setName(String name) {  // Noncompliant\n    // ...\n  }\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic final class MyFinalClass {\n\n  private String name = \"Fred\";\n  public void setName(String name) {\n    // ...\n  }\n</pre>\n<h3>Exceptions</h3>\n<p>Members annotated with&nbsp;<code>@VisibleForTesting</code> annotation are ignored, as it indicates that visibility has been purposely relaxed to\nmake the code testable.</p>\n<pre>\npublic final class MyFinalClass {\n  @VisibleForTesting\n  protected Logger logger; // Compliant\n\n  @VisibleForTesting\n  protected int calculateSomethingComplex(String input) { // Compliant\n    // ...\n  }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S2157",
            "repo": "java",
            "name": "\"Cloneables\" should implement \"clone\"",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "convention",
                "api-design"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "30min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "30min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2157"
                ]
            },
            "descriptionSections": [
                {
                    "key": "how_to_fix",
                    "content": "<p>Consider the following example:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass Foo implements Cloneable { // Noncompliant, override `clone` method\n  public int value;\n}\n</pre>\n<p>Override the <code>clone</code> method in class <code>Foo</code>. By convention, it must call <code>super.clone()</code>. At this point, we know\nthat:</p>\n<ul>\n  <li> By behavioral contract, <code>Object.clone</code> will not throw a <code>CloneNotSupportedException</code>, because <code>Foo</code> implements\n  <code>Cloneable</code>. </li>\n  <li> The returned object is an instance of class <code>Foo</code> </li>\n</ul>\n<p>We can narrow down the return type of <code>clone</code> to <code>Foo</code> and handle the <code>CloneNotSupportedException</code> inside the\nfunction instead of throwing it:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass Foo implements Cloneable { // Compliant\n\n  public int value;\n\n  @Override\n  public Foo clone() {\n    try {\n      return (Foo) super.clone();\n    } catch (CloneNotSupportedException e) {\n      throw new AssertionError();\n    }\n  }\n}\n</pre>\n<p>Be aware that <code>super.clone()</code> returns a one-by-one copy of the fields of the original instance. This means that in our example, the\n<code>Foo.value</code> field is not required to be explicitly copied in the overridden function.</p>\n<p>If you require another copy behavior for some or all of the fields, for example, deep copy or certain invariants that need to be true for a field,\nthese fields must be patched after <code>super.clone()</code>:</p>\n<pre>\nclass Entity implements Cloneable {\n\n  public int id; // unique per instance\n  public List&lt;Entity&gt; children; // deep copy wanted\n\n  @Override\n  public Entity clone() {\n    try {\n      Entity copy = (Entity) super.clone();\n      copy.id = System.identityHashCode(this);\n      copy.children = children.stream().map(Entity::clone).toList();\n      return copy;\n    } catch (CloneNotSupportedException e) {\n      throw new AssertionError();\n    }\n  }\n}\n</pre>\n<p>Be aware that the <code>Cloneable</code> / <code>Object.clone</code> approach has several drawbacks. You might, therefore, also consider resorting\nto other solutions, such as a custom <code>copy</code> method or a copy constructor:</p>\n<pre>\nclass Entity implements Cloneable {\n\n  public int id; // unique per instance\n  public List&lt;Entity&gt; children; // deep copy wanted\n\n  Entity(Entity template) {\n    id = System.identityHashCode(this);\n    children = template.children.stream().map(Entity::new).toList();\n  }\n}\n</pre>"
                },
                {
                    "key": "root_cause",
                    "content": "<p><code>Cloneable</code> is a <em>marker interface</em> that defines the contract of the <code>Object.clone</code> method, which is to create a\nconsistent copy of the instance. The <code>clone</code> method is not defined by the interface though, but by class <code>Objects</code>.</p>\n<p>The general problem with marker interfaces is that their definitions cannot be enforced by the compiler because they have no own API. When a class\nimplements <code>Cloneable</code> but does not override <code>Object.clone</code>, it is highly likely that it violates the contract for\n<code>Cloneable</code>.</p>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Cloneable.html\">Interface Cloneable - Java™ Platform, Standard Edition 8 API\n  Specification</a> </li>\n  <li> <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">Object.clone - Java™ Platform, Standard Edition 8 API\n  Specification</a> </li>\n</ul>"
                },
                {
                    "key": "introduction",
                    "content": "<p>This rule raises an issue when a class implements the interface <code>java.lang.Cloneable</code>, but does not override the\n<code>Object.clone()</code> method.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S2274",
            "repo": "java",
            "name": "\"Object.wait(...)\" and \"Condition.await(...)\" should be called inside a \"while\" loop",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "multi-threading",
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2274"
                ]
            },
            "descriptionSections": [
                {
                    "key": "how_to_fix",
                    "content": "<p>Make sure that the desired condition is actually true after being awakened. This can be accomplished by calling the <code>wait</code> or\n<code>await</code> methods inside a loop that checks said condition.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nsynchronized (obj) {\n  if (!suitableCondition()){\n    obj.wait(timeout); // Noncompliant, the thread can be awakened even though the condition is still false\n  }\n   ... // Perform some logic that is appropriate for when the condition is true\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nsynchronized (obj) {\n  while (!suitableCondition()){\n    obj.wait(timeout); // Compliant, the condition is checked in a loop, so the action below will only occur if the condition is true\n  }\n   ... // Perform some logic that is appropriate for when the condition is true\n}\n</pre>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>In a multithreaded environment, the <code>Object.wait(…​)</code>, as well as <code>Condition.await(…​)</code> and similar methods are used to pause\nthe execution of a thread until the thread is awakened. A thread is typically awakened when it is notified, signaled, or interrupted, usually because\nof an event in another thread requiring some subsequent action by the waiting thread.</p>\n<p>However, a thread may be awakened despite the desired condition not being met or the desired event not having happened. This is referred to as\n\"spurious wakeups\" and may be caused by underlying platform semantics. In other words, a thread may be awakened due to reasons that have nothing to do\nwith the business logic. Hence, the assumption that the desired condition is met or the desired event occurred after a thread is awakened does not\nalways hold.</p>\n<p>According to the documentation of the Java <code>Condition</code> interface [1]:</p>\n<blockquote>\n  <p>When waiting upon a <code>Condition</code>, a \"spurious wakeup\" is permitted to occur, in general, as a concession to the underlying platform\n  semantics. This has little practical impact on most application programs as a Condition should always be waited upon in a loop, testing the state\n  predicate that is being waited for. An implementation is free to remove the possibility of spurious wakeups but it is recommended that applications\n  programmers always assume that they can occur and so always wait in a loop.</p>\n</blockquote>\n<p>The same advice is also found for the <code>Object.wait(…​)</code> method [2]:</p>\n<blockquote>\n  <p>[…​] waits should always occur in loops, like this one:</p>\n  <pre>\nsynchronized (obj) {\n  while (&lt;condition does not hold&gt;){\n    obj.wait(timeout);\n  }\n   ... // Perform action appropriate to condition\n}\n</pre>\n</blockquote>"
                },
                {
                    "key": "resources",
                    "content": "<ol>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/concurrent/locks/Condition.html\">Java SE 17 &amp; JDK 17</a> -\n  Condition </li>\n  <li> <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">Java Platform SE 8</a> - Object#wait </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/EzdGBQ\">CERT THI03-J.</a> - Always invoke wait() and await() methods inside a loop </li>\n</ol>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "COMPLETE",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S2275",
            "repo": "java",
            "name": "Printf-style format strings should not lead to unexpected behavior at runtime",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2275"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Because <code>printf</code>-style format strings are interpreted at runtime, rather than validated by the Java compiler, they can contain errors\nthat lead to unexpected behavior or runtime errors. This rule statically validates the good behavior of <code>printf</code>-style formats when calling\nthe <code>format(...)</code> methods of <code>java.util.Formatter</code>, <code>java.lang.String</code>, <code>java.io.PrintStream</code>,\n<code>MessageFormat</code>, and <code>java.io.PrintWriter</code> classes and the <code>printf(...)</code> methods of <code>java.io.PrintStream</code>\nor <code>java.io.PrintWriter</code> classes.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nString.format(\"The value of my integer is %d\", \"Hello World\");  // Noncompliant; an 'int' is expected rather than a String\nString.format(\"Duke's Birthday year is %tX\", c);  //Noncompliant; X is not a supported time conversion character\nString.format(\"Display %0$d and then %d\", 1);   //Noncompliant; arguments are numbered starting from 1\nString.format(\"Not enough arguments %d and %d\", 1);  //Noncompliant; the second argument is missing\nString.format(\"%&lt; is equals to %d\", 2);   //Noncompliant; the argument index '&lt;' refers to the previous format specifier but there isn't one\n\nMessageFormat.format(\"Result {1}.\", value); // Noncompliant; Not enough arguments. (first element is {0})\nMessageFormat.format(\"Result {{0}.\", value); // Noncompliant; Unbalanced number of curly brace (single curly braces should be escaped)\nMessageFormat.format(\"Result ' {0}\", value); // Noncompliant; Unbalanced number of quotes (single quote must be escaped)\n\njava.util.logging.Logger logger;\nlogger.log(java.util.logging.Level.SEVERE, \"Result {1}!\", 14); // Noncompliant - Not enough arguments.\n\norg.slf4j.Logger slf4jLog;\norg.slf4j.Marker marker;\n\nslf4jLog.debug(marker, \"message {}\"); // Noncompliant - Not enough arguments.\n\norg.apache.logging.log4j.Logger log4jLog;\nlog4jLog.debug(\"message {}\"); // Noncompliant - Not enough arguments.\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nString.format(\"The value of my integer is %d\", 3);\nString.format(\"Duke's Birthday year is %tY\", c);\nString.format(\"Display %1$d and then %d\", 1);\nString.format(\"Not enough arguments %d and %d\", 1, 2);\nString.format(\"%d is equals to %&lt;\", 2);\n\nMessageFormat.format(\"Result {0}.\", value);\nMessageFormat.format(\"Result {0} &amp; {1}.\", value, value);\nMessageFormat.format(\"Result {0}.\", myObject);\n\njava.util.logging.Logger logger;\nlogger.log(java.util.logging.Level.SEVERE, \"Result {1},{2}!\", 14, 2);\n\norg.slf4j.Logger slf4jLog;\norg.slf4j.Marker marker;\n\nslf4jLog.debug(marker, \"message {}\", 1);\n\norg.apache.logging.log4j.Logger log4jLog;\nlog4jLog.debug(\"message {}\", 1);\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "BLOCKER"
                }
            ]
        },
        {
            "key": "java:S2276",
            "repo": "java",
            "name": "\"wait(...)\" should be used instead of \"Thread.sleep(...)\" when a lock is held",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "multi-threading",
                "performance",
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2276"
                ]
            },
            "descriptionSections": [
                {
                    "key": "how_to_fix",
                    "content": "<p>Call <code>wait(…​)</code> on the monitor object instead of using <code>Thread.sleep(…​)</code>. While <code>wait(…​)</code> is executed, the lock\nis temporarily released and hence other threads can run in the meantime.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic void doSomething(){\n  synchronized(monitor) {\n    while(notReady()){\n      Thread.sleep(200); // Noncompliant, any other thread synchronizing on monitor is blocked from running while the first thread sleeps.\n    }\n    process();\n  }\n  ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic void doSomething(){\n  synchronized(monitor) {\n    while(notReady()){\n      monitor.wait(200); // Compliant, the current monitor is released.\n    }\n    process();\n  }\n  ...\n}\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/YTdGBQ\">CERT, LCK09-J.</a> - Do not perform operations that can block while holding a lock </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>In a multithreaded environment, a thread may need to wait for a particular condition to become true. One way of pausing execution in Java is\n<code>Thread.sleep(…​)</code>.</p>\n<p>If a thread that holds a lock calls <code>Thread.sleep(…​)</code>, no other thread can acquire said lock. This can lead to performance and\nscalability issues, in the worst case leading to deadlocks.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "BLOCKER"
                }
            ]
        },
        {
            "key": "java:S3242",
            "repo": "java",
            "name": "Method parameters should be declared with base types",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "api-design"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S3242"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>For maximum reusability, methods should accept parameters with as little specialization as possible. So unless specific features from a child class\nare required by a method, a type higher up the class hierarchy should be used instead.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic void printSize(ArrayList&lt;Object&gt; list) {  // Collection can be used instead\n    System.out.println(list.size());\n}\n\npublic static void loop(List&lt;Object&gt; list) { // java.lang.Iterable can be used instead\n   for (Object o : list) {\n     o.toString();\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic void printSize(Collection&lt;?&gt; list) {  // Collection can be used instead\n    System.out.println(list.size());\n}\n\npublic static void loop(Iterable&lt;?&gt; list) { // java.lang.Iterable can be used instead\n   for (Object o : list) {\n     o.toString();\n  }\n}\n</pre>\n<h3>Exceptions</h3>\n<p>Parameters in non-public methods are not checked, because such methods are not intended to be generally reusable. <code>java.lang.String</code>\nparameters are excluded, because String is immutable and can not be always substituted for more generic type. Parameters used in any other context\nthan method invocation or enhanced for loop are also excluded.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S3366",
            "repo": "java",
            "name": "\"this\" should not be exposed from constructors",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "multi-threading",
                "cert",
                "suspicious"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "30min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "30min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S3366"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/iDdGBQ\">CERT, TSM01-J.</a> - Do not let the this reference escape during object construction\n  </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/vzdGBQ\">CERT, TSM03-J.</a> - Do not publish partially initialized objects </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>In single-threaded environments, the use of <code>this</code> in constructors is normal, and expected. But in multi-threaded environments, it could\nexpose partially-constructed objects to other threads, and should be used with caution.</p>\n<p>The classic example is a class with a <code>static</code> list of its instances. If the constructor stores <code>this</code> in the list, another\nthread could access the object before it’s fully-formed. Even when the storage of <code>this</code> is the last instruction in the constructor,\nthere’s still a danger if the class is not <code>final</code>. In that case, the initialization of subclasses won’t be complete before\n<code>this</code> is exposed.</p>\n<p>This rule raises an issue when <code>this</code> is assigned to any globally-visible object in a constructor, and when it is passed to the method\nof another object in a constructor</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class Monument {\n\n  public static final List&lt;Monument&gt; ALL_MONUMENTS = new ArrayList()&lt;&gt;;\n  // ...\n\n  public Monument(String location, ...) {\n    ALL_MONUMENTS.add(this);  // Noncompliant; passed to a method of another object\n\n    this.location = location;\n    // ...\n  }\n}\n</pre>\n<h3>Exceptions</h3>\n<p>This rule ignores instances of assigning <code>this</code> directly to a <code>static</code> field of the same class because that case is covered\nby <a href='/coding_rules#rule_key=java%3AS3010'>S3010</a> .</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S5301",
            "repo": "java",
            "name": "\"ActiveMQConnectionFactory\" should not be vulnerable to malicious code deserialization",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "VULNERABILITY",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "30min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "30min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5301"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>When the application does not implement controls over the JMS object types, its clients could be able to force the deserialization of arbitrary\nobjects. This may lead to deserialization injection attacks.</p>\n<h3>What is the potential impact?</h3>\n<p>Attackers will be able to force the deserialization of arbitrary objects. This process will trigger the execution of magic unmarshalling methods on\nthe object and its properties. With a specially crafted serialized object, the attackers can exploit those magic methods to achieve malicious\npurposes.</p>\n<p>While the exact impact depends on the types available in the execution context at the time of deserialization, such an attack can generally lead to\nthe execution of arbitrary code on the application server.</p>\n<h4>Application-specific attacks</h4>\n<p>By exploiting the behavior of some of the application-defined types and objects, the attacker could manage to affect the application’s business\nlogic. The exact consequences will depend on the application’s nature:</p>\n<ul>\n  <li> Payment bypass in an e-commerce application. </li>\n  <li> Privilege escalation. </li>\n  <li> Unauthorized users' data access. </li>\n</ul>\n<h4>Publicly-known exploitation</h4>\n<p>In some cases, depending on the library the application uses and their versions, there may exist publicly known deserialization attack payloads\nknown as <strong>gadget chains</strong>. In general, they are designed to have severe consequences, such as:</p>\n<ul>\n  <li> Arbitrary code execution </li>\n  <li> Arbitrary file read or write </li>\n  <li> Server-side request forgery </li>\n</ul>\n<p>Those attacks are independent of the application’s own logic and from the types it specifies.</p>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> Apache ActiveMQ Documentation - <a href=\"https://activemq.apache.org/objectmessage.html\">ObjectMessage</a> </li>\n  <li> CVE - <a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-5254\">CVE-2015-5254</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/\">Top 10 2021 - Category A8 - Software and Data\n  Integrity Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A8_2017-Insecure_Deserialization\">Top 10 2017 - Category A8 - Insecure\n  Deserialization</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/502\">CWE-502 - Deserialization of Untrusted Data</a> </li>\n</ul>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>The following code example is vulnerable to a deserialization injection attack because it allows the deserialization of arbitrary types from JMS\nmessages.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(\"tcp://localhost:61616\");\nfactory.setTrustAllPackages(true); // Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(\"tcp://localhost:61616\");\nfactory.setTrustedPackages(Arrays.asList(\"org.mypackage1\", \"org.mypackage2\"));\n</pre>\n<h3>How does this work?</h3>\n<p>The noncompliant code example calls the <code>setTrustAllPackages</code> method that explicitly allows the deserialization of arbitrary types. On\nthe contrary, the compliant code example, thanks to the <code>setTrustedPackages</code> method, defines a short list of classes allowed for the\ndeserialization.</p>\n<p>While defining a short list of trusted types is generally the state-of-the-art solution to avoid deserialization injection attacks, it is important\nto ensure that the allowed classes and packages can not be used to exploit the issue. In that case, a vulnerability would still be present.</p>\n<p>Note that ActiveMQ, starting with version 5.12.2, forces developers to explicitly list packages that JMS messages can contain. This limits the risk\nof successful exploitation. In versions before that one, calling the <code>ActiveMQConnectionFactory</code> constructor without further configuration\nwould leave the application at risk.</p>",
                    "context": {
                        "displayName": "Java EE",
                        "key": "java_ee"
                    }
                },
                {
                    "key": "introduction",
                    "content": "<p>ActiveMQ can send/receive JMS Object messages (ObjectMessage in ActiveMQ context) to comply with JMS specifications. Internally, ActiveMQ relies on\nJava’s serialization mechanism for the marshaling and unmarshalling of the messages' payload.</p>\n<p>Applications should restrict the types that can be unserialized from JMS messages.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "COMPLETE",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "SECURITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S5542",
            "repo": "java",
            "name": "Encryption algorithms should be used with secure mode and padding scheme",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "privacy"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "VULNERABILITY",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5542"
                ]
            },
            "descriptionSections": [
                {
                    "key": "introduction",
                    "content": "<p>This vulnerability exposes encrypted data to a number of attacks whose goal is to recover the plaintext.</p>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://learn.microsoft.com/en-us/dotnet/standard/security/vulnerabilities-cbc-mode\">Microsoft, Timing vulnerabilities with CBC-mode\n  symmetric decryption using padding</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Padding_oracle_attack\">Wikipedia, Padding Oracle Attack</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Chosen-ciphertext_attack\">Wikipedia, Chosen-Ciphertext Attack</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Chosen-plaintext_attack\">Wikipedia, Chosen-Plaintext Attack</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Semantic_security\">Wikipedia, Semantically Secure Cryptosystems</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Optimal_asymmetric_encryption_padding\">Wikipedia, OAEP</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Galois/Counter_Mode\">Wikipedia, Galois/Counter Mode</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">Top 10 2021 Category A2 - Cryptographic Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/327\">CWE-327 - Use of a Broken or Risky Cryptographic Algorithm</a> </li>\n  <li> OWASP - <a href=\"https://mas.owasp.org/checklists/MASVS-CRYPTO/\">Mobile AppSec Verification Standard - Cryptography Requirements</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2016-risks/m5-insufficient-cryptography\">Mobile Top 10 2016 Category M5 -\n  Insufficient Cryptography</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/327\">CWE-327 - Use of a Broken or Risky Cryptographic Algorithm</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/hDdGBQ\">CERT, MSC61-J.</a> - Do not use insecure or weak cryptographic algorithms </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Encryption algorithms are essential for protecting sensitive information and ensuring secure communications in a variety of domains. They are used\nfor several important reasons:</p>\n<ul>\n  <li> Confidentiality, privacy, and intellectual property protection </li>\n  <li> Security during transmission or on storage devices </li>\n  <li> Data integrity, general trust, and authentication </li>\n</ul>\n<p>When selecting encryption algorithms, tools, or combinations, you should also consider two things:</p>\n<ol>\n  <li> No encryption is unbreakable. </li>\n  <li> The strength of an encryption algorithm is usually measured by the effort required to crack it within a reasonable time frame. </li>\n</ol>\n<p>For these reasons, as soon as cryptography is included in a project, it is important to choose encryption algorithms that are considered strong and\nsecure by the cryptography community.</p>\n<p>For AES, the weakest mode is ECB (Electronic Codebook). Repeated blocks of data are encrypted to the same value, making them easy to identify and\nreducing the difficulty of recovering the original cleartext.</p>\n<p>Unauthenticated modes such as CBC (Cipher Block Chaining) may be used but are prone to attacks that manipulate the ciphertext. They must be used\nwith caution.</p>\n<p>For RSA, the weakest algorithms are either using it without padding or using the PKCS1v1.5 padding scheme.</p>\n<h3>What is the potential impact?</h3>\n<p>The cleartext of an encrypted message might be recoverable. Additionally, it might be possible to modify the cleartext of an encrypted message.</p>\n<p>Below are some real-world scenarios that illustrate possible impacts of an attacker exploiting the vulnerability.</p>\n<h4>Theft of sensitive data</h4>\n<p>The encrypted message might contain data that is considered sensitive and should not be known to third parties.</p>\n<p>By using a weak algorithm the likelihood that an attacker might be able to recover the cleartext drastically increases.</p>\n<h4>Additional attack surface</h4>\n<p>By modifying the cleartext of the encrypted message it might be possible for an attacker to trigger other vulnerabilities in the code. Encrypted\nvalues are often considered trusted, since under normal circumstances it would not be possible for a third party to modify them.</p>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<h4>Noncompliant code example</h4>\n<p>Example with a symmetric cipher, AES:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport javax.crypto.Cipher;\nimport java.security.NoSuchAlgorithmException;\nimport javax.crypto.NoSuchPaddingException;\n\npublic static void main(String[] args) {\n    try {\n        Cipher.getInstance(\"AES/CBC/PKCS5Padding\"); // Noncompliant\n    } catch(NoSuchAlgorithmException|NoSuchPaddingException e) {\n        // ...\n    }\n}\n</pre>\n<p>Example with an asymmetric cipher, RSA:</p>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nimport javax.crypto.Cipher;\nimport java.security.NoSuchAlgorithmException;\nimport javax.crypto.NoSuchPaddingException;\n\npublic static void main(String[] args) {\n    try {\n        Cipher.getInstance(\"RSA/None/NoPadding\"); // Noncompliant\n    } catch(NoSuchAlgorithmException|NoSuchPaddingException e) {\n        // ...\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<p>For the AES symmetric cipher, use the GCM mode:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport javax.crypto.Cipher;\nimport java.security.NoSuchAlgorithmException;\nimport javax.crypto.NoSuchPaddingException;\n\npublic static void main(String[] args) {\n    try {\n        Cipher.getInstance(\"AES/GCM/NoPadding\");\n    } catch(NoSuchAlgorithmException|NoSuchPaddingException e) {\n        // ...\n    }\n}\n</pre>\n<p>For the RSA asymmetric cipher, use the Optimal Asymmetric Encryption Padding (OAEP):</p>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nimport javax.crypto.Cipher;\nimport java.security.NoSuchAlgorithmException;\nimport javax.crypto.NoSuchPaddingException;\n\npublic static void main(String[] args) {\n    try {\n        Cipher.getInstance(\"RSA/ECB/OAEPWITHSHA-256ANDMGF1PADDING\");\n    } catch(NoSuchAlgorithmException|NoSuchPaddingException e) {\n        // ...\n    }\n}\n</pre>\n<h3>How does this work?</h3>\n<p>As a rule of thumb, use the cryptographic algorithms and mechanisms that are considered strong by the cryptographic community.</p>\n<p>Appropriate choices are currently the following.</p>\n<h4>For AES: use authenticated encryption modes</h4>\n<p>The best-known authenticated encryption mode for AES is Galois/Counter mode (GCM).</p>\n<p>GCM mode combines encryption with authentication and integrity checks using a cryptographic hash function and provides both confidentiality and\nauthenticity of data.</p>\n<p>Other similar modes are:</p>\n<ul>\n  <li> CCM: <code>Counter with CBC-MAC</code> </li>\n  <li> CWC: <code>Cipher Block Chaining with Message Authentication Code</code> </li>\n  <li> EAX: <code>Encrypt-and-Authenticate</code> </li>\n  <li> IAPM: <code>Integer Authenticated Parallelizable Mode</code> </li>\n  <li> OCB: <code>Offset Codebook Mode</code> </li>\n</ul>\n<p>It is also possible to use AES-CBC with HMAC for integrity checks. However, it is considered more straightforward to use AES-GCM directly\ninstead.</p>\n<h4>For RSA: use the OAEP scheme</h4>\n<p>The Optimal Asymmetric Encryption Padding scheme (OAEP) adds randomness and a secure hash function that strengthens the regular inner workings of\nRSA.</p>",
                    "context": {
                        "displayName": "Java Cryptography Extension",
                        "key": "java_cryptography_extension"
                    }
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "TRUSTWORTHY",
            "cleanCodeAttributeCategory": "RESPONSIBLE",
            "impacts": [
                {
                    "softwareQuality": "SECURITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S5547",
            "repo": "java",
            "name": "Cipher algorithms should be robust",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "privacy"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "VULNERABILITY",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5547"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Encryption algorithms are essential for protecting sensitive information and ensuring secure communication in various domains. They are used for\nseveral important reasons:</p>\n<ul>\n  <li> Confidentiality, privacy, and intellectual property protection </li>\n  <li> Security during transmission or on storage devices </li>\n  <li> Data integrity, general trust, and authentication </li>\n</ul>\n<p>When selecting encryption algorithms, tools, or combinations, you should also consider two things:</p>\n<ol>\n  <li> No encryption is unbreakable. </li>\n  <li> The strength of an encryption algorithm is usually measured by the effort required to crack it within a reasonable time frame. </li>\n</ol>\n<p>For these reasons, as soon as cryptography is included in a project, it is important to choose encryption algorithms that are considered strong and\nsecure by the cryptography community.</p>\n<h3>What is the potential impact?</h3>\n<p>The cleartext of an encrypted message might be recoverable. Additionally, it might be possible to modify the cleartext of an encrypted message.</p>\n<p>Below are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.</p>\n<h4>Theft of sensitive data</h4>\n<p>The encrypted message might contain data that is considered sensitive and should not be known to third parties.</p>\n<p>By using a weak algorithm the likelihood that an attacker might be able to recover the cleartext drastically increases.</p>\n<h4>Additional attack surface</h4>\n<p>By modifying the cleartext of the encrypted message it might be possible for an attacker to trigger other vulnerabilities in the code. Encrypted\nvalues are often considered trusted, since under normal circumstances it would not be possible for a third party to modify them.</p>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>The following code contains examples of algorithms that are not considered highly resistant to cryptanalysis and thus should be avoided.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport javax.crypto.Cipher;\nimport java.security.NoSuchAlgorithmException;\nimport javax.crypto.NoSuchPaddingException;\n\npublic static void main(String[] args) {\n    try {\n        Cipher des = Cipher.getInstance(\"DES\"); // Noncompliant\n    } catch(NoSuchAlgorithmException|NoSuchPaddingException e) {\n        // ...\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport javax.crypto.Cipher;\nimport java.security.NoSuchAlgorithmException;\nimport javax.crypto.NoSuchPaddingException;\n\npublic static void main(String[] args) {\n    try {\n        Cipher aes = Cipher.getInstance(\"AES/GCM/NoPadding\");\n    } catch(NoSuchAlgorithmException|NoSuchPaddingException e) {\n        // ...\n    }\n}\n</pre>\n<h3>How does this work?</h3>\n<h4>Use a secure algorithm</h4>\n<p>It is highly recommended to use an algorithm that is currently considered secure by the cryptographic community. A common choice for such an\nalgorithm is the Advanced Encryption Standard (AES).</p>\n<p>For block ciphers, it is not recommended to use algorithms with a block size that is smaller than 128 bits.</p>",
                    "context": {
                        "displayName": "Java Cryptography Extension",
                        "key": "java_cryptography_extension"
                    }
                },
                {
                    "key": "resources",
                    "content": "<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">Top 10 2021 Category A2 - Cryptographic Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/327\">CWE-327 - Use of a Broken or Risky Cryptographic Algorithm</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222396\">Application Security and\n  Development: V-222396</a> - The application must implement DoD-approved encryption to protect the confidentiality of remote access sessions. </li>\n</ul>"
                },
                {
                    "key": "introduction",
                    "content": "<p>This vulnerability makes it possible that the cleartext of the encrypted message might be recoverable without prior knowledge of the key.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "TRUSTWORTHY",
            "cleanCodeAttributeCategory": "RESPONSIBLE",
            "impacts": [
                {
                    "softwareQuality": "SECURITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S5663",
            "repo": "java",
            "name": "Simple string literal should be used for single line strings",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "java14"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5663"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://openjdk.java.net/jeps/378\">JEP 378: Text Blocks</a> </li>\n  <li> <a href=\"https://openjdk.org/projects/amber/guides/text-blocks-guide\">Programmer’s Guide To Text Blocks</a>, by Jim Laskey and Stuart Marks\n  </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>If a string fits on a single line, without concatenation and escaped newlines, you should probably continue to use a string literal.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nString question = \"\"\"\n              What's the point, really?\"\"\";\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nString question = \"What's the point, really?\";\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S5664",
            "repo": "java",
            "name": "Whitespace for text block indent should be consistent",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "java14"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5664"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://openjdk.java.net/jeps/378\">JEP 378: Text Blocks</a> </li>\n  <li> <a href=\"https://openjdk.org/projects/amber/guides/text-blocks-guide\">Programmer’s Guide To Text Blocks</a>, by Jim Laskey and Stuart Marks\n  </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Either use only spaces or only tabs for the indentation of a text block. Mixing white space will lead to a result with irregular indentation.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nString textBlock = \"\"\"\n        this is\n&lt;tab&gt;text block!\n        !!!!\n      \"\"\";\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nString textBlock = \"\"\"\n        this is\n        text block!\n        !!!!\n      \"\"\";\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "FORMATTED",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S5665",
            "repo": "java",
            "name": "Escape sequences should not be used in text blocks",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "java14"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5665"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://openjdk.java.net/jeps/378\">JEP 378: Text Blocks</a> </li>\n  <li> <a href=\"https://openjdk.org/projects/amber/guides/text-blocks-guide\">Programmer’s Guide To Text Blocks</a>, by Jim Laskey and Stuart Marks\n  </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>The use of escape sequences is mostly unnecessary in text blocks.</p>\n<h3>Noncompliant code example</h3>\n<p><code>\\n</code> can be replaced by simply introducing the newline, <code>\\\"\\\"\\\"</code> it is sufficient to escape only the first qoute.</p>\n<pre>\nString textBlock = \"\"\"\n        \\\"\\\"\\\" this \\nis\n        text  block!\n        !!!!\n      \"\"\";\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nString textBlock = \"\"\"\n        \\\"\"\" this\n        is\n        text  block!\n        !!!!\n      \"\"\";\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S5669",
            "repo": "java",
            "name": "Vararg method arguments should not be confusing",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5669"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Passing single <code>null</code> or primitive array argument to the variable arity method may not work as expected. In the case of\n<code>null</code>, it is not passed as array with single element, but the argument itself is <code>null</code>. In the case of a primitive array, if\nthe formal parameter is <code>Object...</code>, it is passed as a single element array. This may not be obvious to someone not familiar with such\ncorner cases, and it is probably better to avoid such ambiguities by explicitly casting the argument to the desired type.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nclass A {\n  public static void main(String[] args) {\n    vararg(null);  // Noncompliant, prints \"null\"\n    int[] arr = {1,2,3};\n    vararg(arr);  // Noncompliant, prints \"length: 1\"\n  }\n\n  static void vararg(Object... s) {\n    if (s == null) {\n      System.out.println(\"null\");\n    } else {\n      System.out.println(\"length: \" + s.length);\n    }\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nclass A {\n  public static void main(String[] args) {\n    vararg((Object) null); // prints 1\n    Object[] arr = {1,2,3};\n    vararg(arr); // prints 3\n  }\n\n  static void vararg(Object... s) {\n    if (s == null) {\n      System.out.println(\"null\"); // not reached\n    } else {\n      System.out.println(\"length: \" + s.length);\n    }\n  }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S5783",
            "repo": "java",
            "name": "Only one method invocation is expected when testing checked exceptions",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "junit",
                "tests"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "TEST",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5783"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>When verifying that code raises an exception, a good practice is to avoid having multiple method calls inside the tested code, to be explicit about\nwhat is exactly tested.</p>\n<p>When two of the methods can raise the same <strong>checked</strong> exception, not respecting this good practice is a bug, since it is not possible\nto know what is really tested.</p>\n<p>You should make sure that only one method can raise the expected checked exception in the tested code.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n@Test\npublic void testG() {\n  // Do you expect g() or f() throwing the exception?\n  assertThrows(IOException.class, () -&gt; g(f(1)) ); // Noncompliant\n}\n\n@Test\npublic void testGTryCatchIdiom() {\n  try { // Noncompliant\n    g(f(1));\n    Assert.fail(\"Expected an IOException to be thrown\");\n  } catch (IOException e) {\n    // Test exception message...\n  }\n}\n\nint f(int x) throws IOException {\n  // ...\n}\n\nint g(int x) throws IOException {\n  // ...\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n@Test\npublic void testG() {\n  int y = f(1);\n  // It is explicit that we expect an exception from g() and not f()\n  assertThrows(IOException.class, () -&gt; g(y) );\n}\n\n@Test\npublic void testGTryCatchIdiom() {\n  int y = f(1);\n  try {\n    g(y);\n    Assert.fail(\"Expected an IOException to be thrown\");\n  } catch (IOException e) {\n    // Test exception message...\n  }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S5786",
            "repo": "java",
            "name": "JUnit5 test classes and methods should have default package visibility",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "INFO",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "junit",
                "tests"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "TEST",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5786"
                ]
            },
            "descriptionSections": [
                {
                    "key": "how_to_fix",
                    "content": "<p>You can simply change the visibility by removing the <code>public</code> or <code>protected</code> keywords.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport org.junit.jupiter.api.Test;\n\npublic class MyClassTest { // Noncompliant - modifier can be removed\n  @Test\n  protected void test() { // Noncompliant - modifier can be removed\n    // ...\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport org.junit.jupiter.api.Test;\n\nclass MyClassTest {\n  @Test\n  void test() {\n    // ...\n  }\n}\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://junit.org/junit5/docs/current/user-guide/#writing-tests-classes-and-methods\">JUnit5 User Guide: Test Classes and Methods</a>\n  </li>\n</ul>"
                },
                {
                    "key": "introduction",
                    "content": "<p>JUnit5 test classes and methods should generally have package visibility. To fix this issue, change their visibility to the default package\nvisibility.</p>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>JUnit5 is more tolerant regarding the visibility of test classes and methods than JUnit4, which required everything to be <code>public</code>. Test\nclasses and methods can have any visibility except <code>private</code>. It is however recommended to use the default package visibility to improve\nreadability.</p>\n<blockquote>\n  <p>Test classes, test methods, and lifecycle methods are not required to be <code>public</code>, but they must not be <code>private</code>.</p>\n  <p>It is generally recommended to omit the public modifier for test classes, test methods, and lifecycle methods unless there is a technical reason\n  for doing so – for example, when a test class is extended by a test class in another package. Another technical reason for making classes and\n  methods public is to simplify testing on the module path when using the Java Module System.</p>\n</blockquote>  — JUnit5 User Guide\n<h3>What is the potential impact?</h3>\n<p>The code will be non-conventional and readability can be slightly affected.</p>\n<h3>Exceptions</h3>\n<p>This rule does not raise an issue when the visibility is set to <code>private</code>, because <code>private</code> test methods and classes are\nsystematically ignored by JUnit5, without a proper warning. In this case, there is also an impact on reliability and so it is handled by the rule\n<a href='/coding_rules#rule_key=java%3AS5810'>S5810</a>.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "INFO"
                }
            ]
        },
        {
            "key": "java:S1157",
            "repo": "java",
            "name": "Case insensitive string comparisons should be made without intermediate upper or lower casing",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "performance",
                "clumsy"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1157"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Using <code>toLowerCase()</code> or <code>toUpperCase()</code> to make case insensitive comparisons is inefficient because it requires the creation\nof temporary, intermediate <code>String</code> objects.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nprivate void compareStrings(String foo, String bar){\n    boolean result1 = foo.toUpperCase().equals(bar);               // Noncompliant\n    boolean result2 = foo.equals(bar.toUpperCase());               // Noncompliant\n    boolean result3 = foo.toLowerCase().equals(bar.toLowerCase()); // Noncompliant\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nprivate void compareStrings(String foo, String bar){\n    boolean result1 = foo.equalsIgnoreCase(bar);                    // Compliant\n}\n</pre>\n<h3>Exceptions</h3>\n<p>No issue will be raised when a locale is specified because the result could be different from <code>equalsIgnoreCase()</code>. (e.g.: using the\nTurkish locale)</p>\n<pre>\nprivate void compareStrings(String foo, String bar, java.util.Locale locale){\n    boolean result1 = foo.toUpperCase(locale).equals(bar);         // Compliant\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S1158",
            "repo": "java",
            "name": "Primitive wrappers should not be instantiated only for \"toString\" or \"compareTo\" calls",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "performance",
                "clumsy"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1158"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Creating temporary primitive wrapper objects only for <code>String</code> conversion or the use of the <code>compareTo()</code> method is\ninefficient.</p>\n<p>Instead, the static <code>toString()</code> or <code>compare()</code> method of the primitive wrapper class should be used.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nprivate int isZero(int value){\n    return Integer.valueOf(value).compareTo(0); // Noncompliant\n}\nprivate String convert(int value){\n    return Integer.valueOf(value).toString(); // Noncompliant\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nprivate int isZero(int value){\n    return Integer.compare(value, 0); // Compliant\n}\nprivate String convert(int value){\n    return Integer.toString(value); // Compliant\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S1181",
            "repo": "java",
            "name": "Throwable and Error should not be caught",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "error-handling",
                "bad-practice",
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1181"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/396\">CWE-396 - Declaration of Catch for Generic Exception</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/display/java/ERR08-J.+Do+not+catch+NullPointerException+or+any+of+its+ancestors\">CERT,\n  ERR08-J.</a> - Do not catch NullPointerException or any of its ancestors </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p><code>Throwable</code> is the superclass of all errors and exceptions in Java. <code>Error</code> is the superclass of all errors, which are not\nmeant to be caught by applications.</p>\n<p>Catching either <code>Throwable</code> or <code>Error</code> will also catch <code>OutOfMemoryError</code> and <code>InternalError</code>, from\nwhich an application should not attempt to recover.</p>\n<h3>Noncompliant code example</h3>\n<pre>\ntry { /* ... */ } catch (Throwable t) { /* ... */ }\ntry { /* ... */ } catch (Error e) { /* ... */ }\n</pre>\n<h3>Compliant solution</h3>\n<pre>\ntry { /* ... */ } catch (RuntimeException e) { /* ... */ }\ntry { /* ... */ } catch (MyException e) { /* ... */ }\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S1182",
            "repo": "java",
            "name": "Classes that override \"clone\" should be \"Cloneable\" and call \"super.clone()\"",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "convention",
                "cwe",
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1182"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/580\">CWE-580 - clone() Method Without super.clone()</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/FjZGBQ\">CERT, MET53-J.</a> - Ensure that the clone() method calls super.clone() </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p><code>Cloneable</code> is the marker <code>Interface</code> that indicates that <code>clone()</code> may be called on an object. Overriding\n<code>clone()</code> without implementing <code>Cloneable</code> can be helpful if you want to control how subclasses clone themselves, but otherwise,\nit’s probably a mistake.</p>\n<p>The usual convention for <code>Object.clone()</code> according to Oracle’s Javadoc is:</p>\n<ol>\n  <li> <code>x.clone() != x</code> </li>\n  <li> <code>x.clone().getClass() == x.getClass()</code> </li>\n  <li> <code>x.clone().equals(x)</code> </li>\n</ol>\n<p>Obtaining the object that will be returned by calling <code>super.clone()</code> helps to satisfy those invariants:</p>\n<ol>\n  <li> <code>super.clone()</code> returns a new object instance </li>\n  <li> <code>super.clone()</code> returns an object of the same type as the one <code>clone()</code> was called on </li>\n  <li> <code>Object.clone()</code> performs a shallow copy of the object’s state. </li>\n</ol>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>Ensure that the <code>clone()</code> method calls <code>super.clone()</code> and implement <code>Cloneable</code> in the class or remove the clone\nmethod.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass BaseClass {  // Noncompliant - should implement Cloneable\n  @Override\n  public Object clone() throws CloneNotSupportedException {    // Noncompliant - should return the super.clone() instance\n    return new BaseClass();\n  }\n}\n\nclass DerivedClass extends BaseClass implements Cloneable {\n  /* Does not override clone() */\n\n  public void sayHello() {\n    System.out.println(\"Hello, world!\");\n  }\n}\n\nclass Application {\n  public static void main(String[] args) throws Exception {\n    DerivedClass instance = new DerivedClass();\n    ((DerivedClass) instance.clone()).sayHello();              // Throws a ClassCastException because invariant #2 is violated\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass BaseClass implements Cloneable {\n  @Override\n  public Object clone() throws CloneNotSupportedException {    // Compliant\n    return super.clone();\n  }\n}\n\nclass DerivedClass extends BaseClass implements Cloneable {\n  /* Does not override clone() */\n\n  public void sayHello() {\n    System.out.println(\"Hello, world!\");\n  }\n}\n\nclass Application {\n  public static void main(String[] args) throws Exception {\n    DerivedClass instance = new DerivedClass();\n    ((DerivedClass) instance.clone()).sayHello();              // Displays \"Hello, world!\" as expected. Invariant #2 is satisfied\n  }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S2127",
            "repo": "java",
            "name": "\"Double.longBitsToDouble\" should take \"long\" as argument",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2127"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p><code>Double.longBitsToDouble</code> converts the bit pattern into its corresponding floating-point representation. The method expects a 64-bit\nlong argument to interpret the bits as a double value correctly.</p>\n<p>When the argument is a smaller data type, the cast to <code>long</code> may lead to a different value than expected due to the interpretation of\nthe most significant bit, which, in turn, results in <code>Double.longBitsToDouble</code> returning an incorrect value.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nint i = 0x80003800;\nDouble.longBitsToDouble(i);   // Noncompliant - NaN\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nlong i = 0x80003800L;\nDouble.longBitsToDouble(i);   // Compliant - 1.0610049784E-314\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/lang/Double.html#doubleToLongBits(double)\">Oracle Java SE -\n  Double.doubleToLongBits</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Double-precision_floating-point_format\">Wikipedia - Double Precision floating point format</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Single-precision_floating-point_format\">Wikipedia - Single Precision floating point format</a> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "COMPLETE",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S2151",
            "repo": "java",
            "name": "\"runFinalizersOnExit\" should not be called",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2151"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/4jZGBQ\">CERT, MET12-J.</a> - Do not use finalizers </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Enabling <code>runFinalizersOnExit</code> is unsafe as it might result in erratic behavior and deadlocks on application exit.</p>\n<p>Indeed, finalizers might be force-called on live objects while other threads are concurrently manipulating them.</p>\n<p>Instead, if you want to execute something when the virtual machine begins its shutdown sequence, you should attach a shutdown hook.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic static void main(String [] args) {\n  System.runFinalizersOnExit(true);  // Noncompliant\n}\n\nprotected void finalize(){\n  doShutdownOperations();\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic static void main(String [] args) {\n  Thread myThread = new Thread( () -&gt; { doShutdownOperations(); });\n  Runtime.getRuntime().addShutdownHook(myThread);\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S2245",
            "repo": "java",
            "name": "Using pseudorandom number generators (PRNGs) is security-sensitive",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "SECURITY_HOTSPOT",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2245"
                ]
            },
            "descriptionSections": [
                {
                    "key": "how_to_fix",
                    "content": "<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Use a cryptographically secure pseudo random number generator (CSPRNG) like \"java.security.SecureRandom\" in place of a non-cryptographic PRNG.\n  </li>\n  <li> Use the generated random values only once. </li>\n  <li> You should not expose the generated random value. If you have to store it, make sure that the database or file is secure. </li>\n</ul>\n<h2>Compliant Solution</h2>\n<pre>\nSecureRandom random = new SecureRandom();\nbyte bytes[] = new byte[20];\nrandom.nextBytes(bytes);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#secure-random-number-generation\">Secure\n  Random Number Generation Cheat Sheet</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">Top 10 2021 Category A2 - Cryptographic Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> OWASP - <a href=\"https://mas.owasp.org/checklists/MASVS-CRYPTO/\">Mobile AppSec Verification Standard - Cryptography Requirements</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2016-risks/m5-insufficient-cryptography\">Mobile Top 10 2016 Category M5 -\n  Insufficient Cryptography</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/338\">CWE-338 - Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)</a>\n  </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/330\">CWE-330 - Use of Insufficiently Random Values</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/326\">CWE-326 - Inadequate Encryption Strength</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/1241\">CWE-1241 - Use of Predictable Algorithm in Random Number Generator</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/oTdGBQ\">CERT, MSC02-J.</a> - Generate strong random numbers </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#PREDICTABLE_RANDOM\">Predictable Pseudo Random Number\n  Generator</a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>PRNGs are algorithms that produce sequences of numbers that only approximate true randomness. While they are suitable for applications like\nsimulations or modeling, they are not appropriate for security-sensitive contexts because their outputs can be predictable if the internal state is\nknown.</p>\n<p>In contrast, cryptographically secure pseudorandom number generators (CSPRNGs) are designed to be secure against prediction attacks. CSPRNGs use\ncryptographic algorithms to ensure that the generated sequences are not only random but also unpredictable, even if part of the sequence or the\ninternal state becomes known. This unpredictability is crucial for security-related tasks such as generating encryption keys, tokens, or any other\nvalues that must remain confidential and resistant to guessing attacks.</p>\n<p>For example, the use of non-cryptographic PRNGs has led to vulnerabilities such as:</p>\n<ul>\n  <li> <a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-6386\">CVE-2013-6386</a> </li>\n  <li> <a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-3419\">CVE-2006-3419</a> </li>\n  <li> <a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4102\">CVE-2008-4102</a> </li>\n</ul>\n<p>When software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that\nwill be generated, and use this guess to impersonate another user or access sensitive information. Therefore, it is critical to use CSPRNGs in any\nsecurity-sensitive application to ensure the robustness and security of the system.</p>\n<p>As the <code>java.util.Random</code> class relies on a non-cryptographic pseudorandom number generator, this class and relating\n<code>java.lang.Math.random()</code> method should not be used for security-critical applications or for protecting sensitive data. In such context,\nthe <code>java.security.SecureRandom</code> class which relies on a CSPRNG should be used in place.</p>\n"
                },
                {
                    "key": "default",
                    "content": "<p>PRNGs are algorithms that produce sequences of numbers that only approximate true randomness. While they are suitable for applications like\nsimulations or modeling, they are not appropriate for security-sensitive contexts because their outputs can be predictable if the internal state is\nknown.</p>\n<p>In contrast, cryptographically secure pseudorandom number generators (CSPRNGs) are designed to be secure against prediction attacks. CSPRNGs use\ncryptographic algorithms to ensure that the generated sequences are not only random but also unpredictable, even if part of the sequence or the\ninternal state becomes known. This unpredictability is crucial for security-related tasks such as generating encryption keys, tokens, or any other\nvalues that must remain confidential and resistant to guessing attacks.</p>\n<p>For example, the use of non-cryptographic PRNGs has led to vulnerabilities such as:</p>\n<ul>\n  <li> <a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-6386\">CVE-2013-6386</a> </li>\n  <li> <a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-3419\">CVE-2006-3419</a> </li>\n  <li> <a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4102\">CVE-2008-4102</a> </li>\n</ul>\n<p>When software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that\nwill be generated, and use this guess to impersonate another user or access sensitive information. Therefore, it is critical to use CSPRNGs in any\nsecurity-sensitive application to ensure the robustness and security of the system.</p>\n<p>As the <code>java.util.Random</code> class relies on a non-cryptographic pseudorandom number generator, this class and relating\n<code>java.lang.Math.random()</code> method should not be used for security-critical applications or for protecting sensitive data. In such context,\nthe <code>java.security.SecureRandom</code> class which relies on a CSPRNG should be used in place.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the code using the generated value requires it to be unpredictable. It is the case for all encryption mechanisms or when a secret value, such\n  as a password, is hashed. </li>\n  <li> the function you use is a non-cryptographic PRNG. </li>\n  <li> the generated value is used multiple times. </li>\n  <li> an attacker can access the generated value. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Use a cryptographically secure pseudo random number generator (CSPRNG) like \"java.security.SecureRandom\" in place of a non-cryptographic PRNG.\n  </li>\n  <li> Use the generated random values only once. </li>\n  <li> You should not expose the generated random value. If you have to store it, make sure that the database or file is secure. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\nRandom random = new Random(); // Sensitive use of Random\nbyte bytes[] = new byte[20];\nrandom.nextBytes(bytes); // Check if bytes is used for hashing, encryption, etc...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nSecureRandom random = new SecureRandom();\nbyte bytes[] = new byte[20];\nrandom.nextBytes(bytes);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#secure-random-number-generation\">Secure\n  Random Number Generation Cheat Sheet</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">Top 10 2021 Category A2 - Cryptographic Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> OWASP - <a href=\"https://mas.owasp.org/checklists/MASVS-CRYPTO/\">Mobile AppSec Verification Standard - Cryptography Requirements</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2016-risks/m5-insufficient-cryptography\">Mobile Top 10 2016 Category M5 -\n  Insufficient Cryptography</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/338\">CWE-338 - Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)</a>\n  </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/330\">CWE-330 - Use of Insufficiently Random Values</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/326\">CWE-326 - Inadequate Encryption Strength</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/1241\">CWE-1241 - Use of Predictable Algorithm in Random Number Generator</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/oTdGBQ\">CERT, MSC02-J.</a> - Generate strong random numbers </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#PREDICTABLE_RANDOM\">Predictable Pseudo Random Number\n  Generator</a> </li>\n</ul>"
                },
                {
                    "key": "assess_the_problem",
                    "content": "<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the code using the generated value requires it to be unpredictable. It is the case for all encryption mechanisms or when a secret value, such\n  as a password, is hashed. </li>\n  <li> the function you use is a non-cryptographic PRNG. </li>\n  <li> the generated value is used multiple times. </li>\n  <li> an attacker can access the generated value. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\nRandom random = new Random(); // Sensitive use of Random\nbyte bytes[] = new byte[20];\nrandom.nextBytes(bytes); // Check if bytes is used for hashing, encryption, etc...\n</pre>\n"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "impacts": []
        },
        {
            "key": "java:S2272",
            "repo": "java",
            "name": "\"Iterator.next()\" methods should throw \"NoSuchElementException\"",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "error-handling",
                "unpredictable"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2272"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>The <code>java.util.Iterator.next()</code> method must throw a <code>NoSuchElementException</code> when there are no more elements in the\niteration. Any other behavior is non-compliant with the API contract and may cause unexpected behavior for users.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class MyIterator implements Iterator&lt;String&gt; {\n  public String next() {\n    if (!hasNext()) {\n      return null;\n    }\n    // ...\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class MyIterator implements Iterator&lt;String&gt; {\n  public String next() {\n    if (!hasNext()) {\n      throw new NoSuchElementException();\n    }\n    // ...\n  }\n}\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/7/docs/api/java/util/Iterator.html#next--\">Java SE 7 API Specification: Iterator</a> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S2273",
            "repo": "java",
            "name": "\"Object.wait()\", \"Object.notify()\" and \"Object.notifyAll()\" should only be called from synchronized code",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "multi-threading"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2273"
                ]
            },
            "descriptionSections": [
                {
                    "key": "how_to_fix",
                    "content": "<p>To become the owner of an object’s monitor Java provides the <code>synchronized</code> keyword. In other words, calling\n<code>Object.wait(…​)</code>, <code>Object.notify()</code> and <code>Object.notifyAll()</code> on a given object should only be done from code\nsynchronized on the same object.</p>\n<p>For example, the call to <code>someObject.wait(…​)</code> should be wrapped in a <code>synchronized(someObject){ …​ }</code> block. If\n<code>wait</code> or <code>notify</code> are invoked on <code>this</code>, then the entire method can be marked as <code>synchronized</code>.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nprivate void performSomeAction(Object syncValue) {\n  while (!suitableCondition()){\n    syncValue.wait(); // Noncompliant, not being inside a `synchronized` block, this will raise an IllegalMonitorStateException\n  }\n  ... // Perform some action\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nprivate void performSomeAction(Object syncValue) {\n  synchronized(syncValue) {\n    while (!suitableCondition()){\n      syncValue.wait(); // Compliant, the `synchronized` block guarantees ownership of syncValue's monitor\n    }\n    ... // Perform some action\n  }\n}\n</pre>\n<h2>References</h2>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/tutorial/essential/concurrency/syncmeth.html\">Java Documentation</a> - Synchronized methods </li>\n  <li> <a href=\"https://docs.oracle.com/javase%2F7%2Fdocs%2Fapi%2F%2F/java/lang/Object.html#wait()\">Java Documentation</a> - java.lang.Object class\n  and its methods </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>The <code>Object.wait(…​)</code>, <code>Object.notify()</code> and <code>Object.notifyAll()</code> methods are used in multithreaded environments\nto coordinate interdependent tasks that are performed by different threads. These methods are not thread-safe and by contract, they require the\ninvoking <code>Thread</code> to own the object’s monitor. If a thread invokes one of these methods without owning the object’s monitor an\n<code>IllegalMonitorStateException</code> is thrown.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "COMPLETE",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S2390",
            "repo": "java",
            "name": "Classes should not access their own subclasses during class initialization",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2390"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Referencing a static member of a subclass from its parent during class initialization, makes the code more fragile and prone to future bugs. The\nexecution of the program will rely heavily on the order of initialization of classes and their static members.</p>\n<h3>What is the potential impact?</h3>\n<p>This could create what is known as an \"initialization cycle\", or even a deadlock in some extreme cases. Additionally, if the order of the static\nclass members is changed, the behavior of the program might change. These issues can be very hard to diagnose so it is highly recommended to avoid\ncreating this kind of dependencies.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nclass Parent {\n  static int field1 = Child.method(); // Noncompliant\n  static int field2 = 42;\n\n  public static void main(String[] args) {\n    System.out.println(Parent.field1); // will display \"0\" instead of \"42\"\n  }\n}\n\nclass Child extends Parent {\n  static int method() {\n    return Parent.field2;\n  }\n}\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> CERT - <a href=\"https://wiki.sei.cmu.edu/confluence/display/java/DCL00-J.+Prevent+class+initialization+cycles\">DCL00-J. Prevent class\n  initialization cycles</a> </li>\n  <li> <a href=\"https://docs.oracle.com/javase/specs/jls/se17/html/jls-12.html#jls-12.4\">Section 12.4: Initialization of Classes and Interfaces</a> -\n  Java Language Specification </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "MODULAR",
            "cleanCodeAttributeCategory": "ADAPTABLE",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S3008",
            "repo": "java",
            "name": "Static non-final field names should comply with a naming convention",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "convention"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "format",
                    "htmlDesc": "Regular expression used to check the field names against.",
                    "defaultValue": "^[a-z][a-zA-Z0-9]*$",
                    "type": "STRING"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S3008"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://www.oreilly.com/library/view/java-8-pocket/9781491901083/ch01.html\">O’Reilly - Java 8 in pocket - Naming Conventions</a> </li>\n  <li> <a href=\"https://www.educative.io/answers/what-are-the-naming-conventions-in-java\">Educative - Naming conventions in Java</a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>The Java Language Specification defines a set of rules called naming conventions that apply to Java programs. These conventions provide\nrecommendations for naming packages, classes, methods, and variables.</p>\n<p>By following shared naming conventions, teams can collaborate more efficiently.</p>\n<p>This rule checks that static non-final field names match a provided regular expression.</p>\n<h3>Noncompliant code example</h3>\n<p>The default regular expression applied by the rule is <code>^[a-z][a-zA-Z0-9]*$</code>:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class MyClass {\n   private static String foo_bar; // Noncompliant\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class MyClass {\n   private static String fooBar;\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "IDENTIFIABLE",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S3457",
            "repo": "java",
            "name": "Format strings should be used correctly",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "confusing"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "1min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "1min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S3457"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/J9YxBQ\">CERT, FIO47-C.</a> - Use valid format strings </li>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/text/MessageFormat.html\">java.text.MessageFormat</a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>A <code>printf-</code>-style format string is a string that contains placeholders, usually represented by special characters such as \"%s\" or \"{}\",\ndepending on the technology in use. These placeholders are replaced by values when the string is printed or logged.</p>\n<p>Because <code>printf</code>-style format strings are interpreted at runtime, rather than validated by the compiler, they can contain errors that\nresult in the wrong strings being created.</p>\n<p>This rule checks whether every format string specifier can be correctly matched with one of the additional arguments when calling the following\nmethods:</p>\n<ul>\n  <li> <a\n  href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#format-java.lang.String-java.lang.Object…​-\"><code>java.lang.String#format</code></a> </li>\n  <li> <a\n  href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#format-java.lang.String-java.lang.Object…​-\"><code>java.util.Formatter#format</code></a> </li>\n  <li> <a\n  href=\"https://docs.oracle.com/javase/8/docs/api/java/io/PrintStream.html#format-java.lang.String-java.lang.Object…​-\"><code>java.io.PrintStream#format</code></a> </li>\n  <li> <a\n  href=\"https://docs.oracle.com/javase/8/docs/api/java/text/MessageFormat.html#format-java.lang.String-java.lang.Object…​-\"><code>java.text.MessageFormat#format</code></a> </li>\n  <li> <a\n  href=\"https://docs.oracle.com/javase/8/docs/api/java/io/PrintWriter.html#format-java.lang.String-java.lang.Object…​-\"><code>java.io.PrintWriter#format</code></a> </li>\n  <li> <a\n  href=\"https://docs.oracle.com/javase/8/docs/api/java/io/PrintStream.html#printf-java.lang.String-java.lang.Object…​-\"><code>java.io.PrintStream#printf</code></a> </li>\n  <li> <a\n  href=\"https://docs.oracle.com/javase/8/docs/api/java/io/PrintWriter.html#printf-java.lang.String-java.lang.Object…​-\"><code>java.io.PrintWriter#printf</code></a> </li>\n  <li> <a\n  href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/String.html#formatted(java.lang.Object…​)\"><code>java.lang.String#formatted</code></a> (since Java 15) </li>\n  <li> logging methods of <a href=\"https://www.slf4j.org/api/org/slf4j/Logger.html\"><code>org.slf4j.Logger</code></a>, <a\n  href=\"https://docs.oracle.com/javase/8/docs/api/java/util/logging/Logger.html\"><code>java.util.logging.Logger</code></a>, <a\n  href=\"https://logging.apache.org/log4j/2.x/javadoc/log4j-api/org/apache/logging/log4j/Logger.html\"><code>org.apache.logging.log4j.Logger</code></a>.\n  </li>\n</ul>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>A <code>printf-</code>-style format string is a string that contains placeholders, which are replaced by values when the string is printed or\nlogged. Mismatch in the format specifiers and the arguments provided can lead to incorrect strings being created.</p>\n<p>To avoid issues, a developer should ensure that the provided arguments match format specifiers.</p>\n<p>Note that <a href=\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/text/MessageFormat.html\">MessageFormat</a> is used by most\nlogging mechanisms, for example <code>java.util.logging.Logger</code>, thus the <em>single quote</em> must be escaped by a <em>double single\nquote</em>.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nvoid logging(org.slf4j.Logger slf4jLog, java.util.logging.Logger logger) {\n    String.format(\"Too many arguments %d and %d\", 1, 2, 3); // Noncompliant - the third argument '3' is unused\n    String.format(\"First {0} and then {1}\", \"foo\", \"bar\");  //Noncompliant - it appears there is confusion with the use of \"java.text.MessageFormat\" - parameters \"foo\" and \"bar\" will be ignored here\n\n\n    slf4jLog.debug(\"The number: \", 1); // Noncompliant - String contains no format specifiers.\n\n    logger.log(level, \"Can't load library \\\"{0}\\\"!\", \"foo\"); // Noncompliant - the single quote ' must be escaped\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nvoid logging(org.slf4j.Logger slf4jLog, java.util.logging.Logger logger) {\n    String.format(\"Too many arguments %d and %d\", 1, 2);\n    String.format(\"First %s and then %s\", \"foo\", \"bar\");\n\n    slf4jLog.debug(\"The number: {}\", 1);\n\n    logger.log(level, \"Can''t load library \\\"{0}\\\"!\", \"foo\");\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S3578",
            "repo": "java",
            "name": "Test methods should comply with a naming convention",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "convention",
                "tests"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "format",
                    "htmlDesc": "Regular expression the test method names are checked against.",
                    "defaultValue": "^test[A-Z][a-zA-Z0-9]*$",
                    "type": "STRING"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "TEST",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S3578"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Shared naming conventions allow teams to collaborate efficiently. This rule raises an issue when a test method name does not match the provided\nregular expression.</p>\n<h3>Noncompliant code example</h3>\n<p>With the default value: <code>^test[A-Z][a-zA-Z0-9]*$</code></p>\n<pre>\n@Test\npublic void foo() {  // Noncompliant\n  //...\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n@Test\npublic void testFoo() {\n  // ...\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "IDENTIFIABLE",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S4423",
            "repo": "java",
            "name": "Weak SSL/TLS protocols should not be used",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "privacy"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "VULNERABILITY",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S4423"
                ]
            },
            "descriptionSections": [
                {
                    "key": "introduction",
                    "content": "<p>This vulnerability exposes encrypted data to a number of attacks whose goal is to recover the plaintext.</p>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Padding_oracle_attack\">Wikipedia, Padding Oracle Attack</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Chosen-ciphertext_attack\">Wikipedia, Chosen-Ciphertext Attack</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Chosen-plaintext_attack\">Wikipedia, Chosen-Plaintext Attack</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Semantic_security\">Wikipedia, Semantically Secure Cryptosystems</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Optimal_asymmetric_encryption_padding\">Wikipedia, OAEP</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Galois/Counter_Mode\">Wikipedia, Galois/Counter Mode</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">Top 10 2021 Category A2 - Cryptographic Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\">Top 10 2021 Category A7 - Identification and\n  Authentication Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/327\">CWE-327 - Use of a Broken or Risky Cryptographic Algorithm</a> </li>\n  <li> OWASP - <a href=\"https://mas.owasp.org/checklists/MASVS-CRYPTO/\">Mobile AppSec Verification Standard - Cryptography Requirements</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2016-risks/m5-insufficient-cryptography\">Mobile Top 10 2016 Category M5 -\n  Insufficient Cryptography</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/327\">CWE-327 - Use of a Broken or Risky Cryptographic Algorithm</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/hDdGBQ\">CERT, MSC61-J.</a> - Do not use insecure or weak cryptographic algorithms </li>\n</ul>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport javax.net.ssl.SSLContext;\nimport java.security.NoSuchAlgorithmException;\n\npublic static void main(String[] args) {\n    try {\n        SSLContext.getInstance(\"TLSv1.1\"); // Noncompliant\n    } catch (NoSuchAlgorithmException e) {\n        // ...\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport javax.net.ssl.SSLContext;\nimport java.security.NoSuchAlgorithmException;\n\npublic static void main(String[] args) {\n    try {\n        SSLContext.getInstance(\"TLSv1.2\");\n    } catch (NoSuchAlgorithmException e) {\n        // ...\n    }\n}\n</pre>\n<h3>How does this work?</h3>\n<p>As a rule of thumb, by default you should use the cryptographic algorithms and mechanisms that are considered strong by the cryptographic\ncommunity.</p>\n<p>The best choices at the moment are the following.</p>\n<h4>Use TLS v1.2 or TLS v1.3</h4>\n<p>Even though TLS V1.3 is available, using TLS v1.2 is still considered good and secure practice by the cryptography community.<br></p>\n<p>The use of TLS v1.2 ensures compatibility with a wide range of platforms and enables seamless communication between different systems that do not\nyet have TLS v1.3 support.</p>\n<p>The only drawback depends on whether the framework used is outdated: its TLS v1.2 settings may enable older and insecure cipher suites that are\ndeprecated as insecure.</p>\n<p>On the other hand, TLS v1.3 removes support for older and weaker cryptographic algorithms, eliminates known vulnerabilities from previous TLS\nversions, and improves performance.</p>",
                    "context": {
                        "displayName": "Java Cryptography Extension",
                        "key": "java_cryptography_extension"
                    }
                },
                {
                    "key": "root_cause",
                    "content": "<p>Encryption algorithms are essential for protecting sensitive information and ensuring secure communications in a variety of domains. They are used\nfor several important reasons:</p>\n<ul>\n  <li> Confidentiality, privacy, and intellectual property protection </li>\n  <li> Security during transmission or on storage devices </li>\n  <li> Data integrity, general trust, and authentication </li>\n</ul>\n<p>When selecting encryption algorithms, tools, or combinations, you should also consider two things:</p>\n<ol>\n  <li> No encryption is unbreakable. </li>\n  <li> The strength of an encryption algorithm is usually measured by the effort required to crack it within a reasonable time frame. </li>\n</ol>\n<p>For these reasons, as soon as cryptography is included in a project, it is important to choose encryption algorithms that are considered strong and\nsecure by the cryptography community.</p>\n<p>To provide communication security over a network, SSL and TLS are generally used. However, it is important to note that the following protocols are\nall considered weak by the cryptographic community, and are officially deprecated:</p>\n<ul>\n  <li> SSL versions 1.0, 2.0 and 3.0 </li>\n  <li> TLS versions 1.0 and 1.1 </li>\n</ul>\n<p>When these unsecured protocols are used, it is best practice to expect a breach: that a user or organization with malicious intent will perform\nmathematical attacks on this data after obtaining it by other means.</p>\n<h3>What is the potential impact?</h3>\n<p>After retrieving encrypted data and performing cryptographic attacks on it on a given timeframe, attackers can recover the plaintext that\nencryption was supposed to protect.</p>\n<p>Depending on the recovered data, the impact may vary.</p>\n<p>Below are some real-world scenarios that illustrate the potential impact of an attacker exploiting the vulnerability.</p>\n<h4>Additional attack surface</h4>\n<p>By modifying the plaintext of the encrypted message, an attacker may be able to trigger additional vulnerabilities in the code. An attacker can\nfurther exploit a system to obtain more information.<br> Encrypted values are often considered trustworthy because it would not be possible for a\nthird party to modify them under normal circumstances.</p>\n<h4>Breach of confidentiality and privacy</h4>\n<p>When encrypted data contains personal or sensitive information, its retrieval by an attacker can lead to privacy violations, identity theft,\nfinancial loss, reputational damage, or unauthorized access to confidential systems.</p>\n<p>In this scenario, the company, its employees, users, and partners could be seriously affected.</p>\n<p>The impact is twofold, as data breaches and exposure of encrypted data can undermine trust in the organization, as customers, clients and\nstakeholders may lose confidence in the organization’s ability to protect their sensitive data.</p>\n<h4>Legal and compliance issues</h4>\n<p>In many industries and locations, there are legal and compliance requirements to protect sensitive data. If encrypted data is compromised and the\nplaintext can be recovered, companies face legal consequences, penalties, or violations of privacy laws.</p>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"noncompliant\">\nimport okhttp3.ConnectionSpec;\nimport okhttp3.TlsVersion;\n\npublic static void main(String[] args) {\n    new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS)\n          .tlsVersions(TlsVersion.TLS_1_1) // Noncompliant\n          .build();\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"compliant\">\nimport okhttp3.ConnectionSpec;\nimport okhttp3.TlsVersion;\n\npublic static void main(String[] args) {\n    new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS)\n          .tlsVersions(TlsVersion.TLS_1_2)\n          .build();\n}\n</pre>\n<h3>How does this work?</h3>\n<p>As a rule of thumb, by default you should use the cryptographic algorithms and mechanisms that are considered strong by the cryptographic\ncommunity.</p>\n<p>The best choices at the moment are the following.</p>\n<h4>Use TLS v1.2 or TLS v1.3</h4>\n<p>Even though TLS V1.3 is available, using TLS v1.2 is still considered good and secure practice by the cryptography community.<br></p>\n<p>The use of TLS v1.2 ensures compatibility with a wide range of platforms and enables seamless communication between different systems that do not\nyet have TLS v1.3 support.</p>\n<p>The only drawback depends on whether the framework used is outdated: its TLS v1.2 settings may enable older and insecure cipher suites that are\ndeprecated as insecure.</p>\n<p>On the other hand, TLS v1.3 removes support for older and weaker cryptographic algorithms, eliminates known vulnerabilities from previous TLS\nversions, and improves performance.</p>",
                    "context": {
                        "displayName": "OkHttp",
                        "key": "okhttp"
                    }
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "TRUSTWORTHY",
            "cleanCodeAttributeCategory": "RESPONSIBLE",
            "impacts": [
                {
                    "softwareQuality": "SECURITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S4426",
            "repo": "java",
            "name": "Cryptographic keys should be robust",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "privacy",
                "rules"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "VULNERABILITY",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S4426"
                ]
            },
            "descriptionSections": [
                {
                    "key": "introduction",
                    "content": "<p>This vulnerability exposes encrypted data to attacks whose goal is to recover the plaintext.</p>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Encryption algorithms are essential for protecting sensitive information and ensuring secure communications in a variety of domains. They are used\nfor several important reasons:</p>\n<ul>\n  <li> Confidentiality, privacy, and intellectual property protection </li>\n  <li> Security during transmission or on storage devices </li>\n  <li> Data integrity, general trust, and authentication </li>\n</ul>\n<p>When selecting encryption algorithms, tools, or combinations, you should also consider two things:</p>\n<ol>\n  <li> No encryption is unbreakable. </li>\n  <li> The strength of an encryption algorithm is usually measured by the effort required to crack it within a reasonable time frame. </li>\n</ol>\n<p>In today’s cryptography, the length of the <strong>key</strong> directly affects the security level of cryptographic algorithms.</p>\n<p>Note that depending on the algorithm, the term <strong>key</strong> refers to a different mathematical property. For example:</p>\n<ul>\n  <li> For RSA, the key is the product of two large prime numbers, also called the <strong>modulus</strong>. </li>\n  <li> For AES and Elliptic Curve Cryptography (ECC), the key is only a sequence of randomly generated bytes.\n    <ul>\n      <li> In some cases, AES keys are derived from a master key or a passphrase using a Key Derivation Function (KDF) like PBKDF2 (Password-Based Key\n      Derivation Function 2) </li>\n    </ul>  </li>\n</ul>\n<p>If an application uses a key that is considered short and <strong>insecure</strong>, the encrypted data is exposed to attacks aimed at getting at\nthe plaintext.</p>\n<p>In general, it is best practice to expect a breach: that a user or organization with malicious intent will perform cryptographic attacks on this\ndata after obtaining it by other means.</p>\n<h3>What is the potential impact?</h3>\n<p>After retrieving encrypted data and performing cryptographic attacks on it on a given timeframe, attackers can recover the plaintext that\nencryption was supposed to protect.</p>\n<p>Depending on the recovered data, the impact may vary.</p>\n<p>Below are some real-world scenarios that illustrate the potential impact of an attacker exploiting the vulnerability.</p>\n<h4>Additional attack surface</h4>\n<p>By modifying the plaintext of the encrypted message, an attacker may be able to trigger additional vulnerabilities in the code. An attacker can\nfurther exploit a system to obtain more information.<br> Encrypted values are often considered trustworthy because it would not be possible for a\nthird party to modify them under normal circumstances.</p>\n<h4>Breach of confidentiality and privacy</h4>\n<p>When encrypted data contains personal or sensitive information, its retrieval by an attacker can lead to privacy violations, identity theft,\nfinancial loss, reputational damage, or unauthorized access to confidential systems.</p>\n<p>In this scenario, the company, its employees, users, and partners could be seriously affected.</p>\n<p>The impact is twofold, as data breaches and exposure of encrypted data can undermine trust in the organization, as customers, clients and\nstakeholders may lose confidence in the organization’s ability to protect their sensitive data.</p>\n<h4>Legal and compliance issues</h4>\n<p>In many industries and locations, there are legal and compliance requirements to protect sensitive data. If encrypted data is compromised and the\nplaintext can be recovered, companies face legal consequences, penalties, or violations of privacy laws.</p>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> Documentation\n    <ul>\n      <li> NIST Documentation - <a href=\"https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-186.pdf\">NIST SP 800-186: Recommendations\n      for Discrete Logarithm-based Cryptography: Elliptic Curve Domain Parameters</a> </li>\n      <li> IETF - <a href=\"https://datatracker.ietf.org/doc/html/rfc5639\">rfc5639: Elliptic Curve Cryptography (ECC) Brainpool Standard Curves and\n      Curve Generation</a> </li>\n    </ul>  </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://learn.microsoft.com/en-us/dotnet/standard/security/vulnerabilities-cbc-mode\">Microsoft, Timing vulnerabilities with CBC-mode\n  symmetric decryption using padding</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Padding_oracle_attack\">Wikipedia, Padding Oracle Attack</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Chosen-ciphertext_attack\">Wikipedia, Chosen-Ciphertext Attack</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Chosen-plaintext_attack\">Wikipedia, Chosen-Plaintext Attack</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Semantic_security\">Wikipedia, Semantically Secure Cryptosystems</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Optimal_asymmetric_encryption_padding\">Wikipedia, OAEP</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Galois/Counter_Mode\">Wikipedia, Galois/Counter Mode</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">Top 10 2021 Category A2 - Cryptographic Failures</a> </li>\n  <li> OWASP - <a href=\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://mas.owasp.org/checklists/MASVS-CRYPTO/\">Mobile AppSec Verification Standard - Cryptography Requirements</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2016-risks/m5-insufficient-cryptography\">Mobile Top 10 2016 Category M5 -\n  Insufficient Cryptography</a> </li>\n  <li> <a href=\"https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf\">NIST 800-131A</a> - Recommendation for Transitioning the\n  Use of Cryptographic Algorithms and Key Lengths </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/326\">CWE-326 - Inadequate Encryption Strength</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/327\">CWE-327 - Use of a Broken or Risky Cryptographic Algorithm</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/hDdGBQ\">CERT, MSC61-J.</a> - Do not use insecure or weak cryptographic algorithms </li>\n</ul>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>The following code examples either explicitly or implicitly generate keys. Note that there are differences in the size of the keys depending on the\nalgorithm.</p>\n<p>Due to the mathematical properties of the algorithms, the security requirements for the key size vary depending on the algorithm.<br> For example,\na 256-bit ECC key provides about the same level of security as a 3072-bit RSA key and a 128-bit symmetric key.</p>\n<h4>Noncompliant code example</h4>\n<p>Here is an example of a private key generation with RSA:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport java.security.KeyPairGenerator;\nimport java.security.NoSuchAlgorithmException;\n\npublic static void main(String[] args) {\n    try {\n        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\"RSA\");\n        keyPairGenerator.initialize(1024); // Noncompliant\n\n    } catch (NoSuchAlgorithmException e) {\n        // ...\n    }\n}\n</pre>\n<p>Here is an example of a private key generation with AES:</p>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nimport java.security.KeyGenerator;\nimport java.security.NoSuchAlgorithmException;\n\npublic static void main(String[] args) {\n    try {\n        KeyGenerator keyGenerator = KeyGenerator.getInstance(\"AES\");\n        keyGenerator.initialize(64); // Noncompliant\n\n    } catch (NoSuchAlgorithmException e) {\n        // ...\n    }\n}\n</pre>\n<p>Here is an example of an Elliptic Curve (EC) initialization. It implicitly generates a private key whose size is indicated in the elliptic curve\nname:</p>\n<pre data-diff-id=\"3\" data-diff-type=\"noncompliant\">\nimport java.security.KeyPairGenerator;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.InvalidAlgorithmParameterException;\nimport java.security.spec.ECGenParameterSpec;\n\npublic static void main(String[] args) {\n    try {\n        KeyPairGenerator keyPairGenerator    = KeyPairGenerator.getInstance(\"EC\");\n        ECGenParameterSpec ellipticCurveName = new ECGenParameterSpec(\"secp112r1\"); // Noncompliant\n        keyPairGenerator.initialize(ellipticCurveName);\n\n    } catch (NoSuchAlgorithmException | InvalidAlgorithmParameterException e) {\n        // ...\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport java.security.KeyPairGenerator;\nimport java.security.NoSuchAlgorithmException;\n\npublic static void main(String[] args) {\n    try {\n        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\"RSA\");\n        keyPairGenerator.initialize(2048);\n\n    } catch (NoSuchAlgorithmException e) {\n        // ...\n    }\n}\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nimport java.security.KeyPairGenerator;\nimport java.security.NoSuchAlgorithmException;\n\npublic static void main(String[] args) {\n    try {\n        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\"AES\");\n        keyPairGenerator.initialize(128);\n\n    } catch (NoSuchAlgorithmException e) {\n        // ...\n    }\n}\n</pre>\n<pre data-diff-id=\"3\" data-diff-type=\"compliant\">\nimport java.security.KeyPairGenerator;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.InvalidAlgorithmParameterException;\nimport java.security.spec.ECGenParameterSpec;\n\npublic static void main(String[] args) {\n    try {\n        KeyPairGenerator keyPairGenerator    = KeyPairGenerator.getInstance(\"EC\");\n        ECGenParameterSpec ellipticCurveName = new ECGenParameterSpec(\"secp256r1\");\n        keyPairGenerator.initialize(ellipticCurveName);\n\n    } catch (NoSuchAlgorithmException | InvalidAlgorithmParameterException e) {\n        // ...\n    }\n}\n</pre>\n<h3>How does this work?</h3>\n<p>As a rule of thumb, use the cryptographic algorithms and mechanisms that are considered strong by the cryptography community.</p>\n<p>The appropriate choices are the following.</p>\n<h4>RSA (Rivest-Shamir-Adleman) and DSA (Digital Signature Algorithm)</h4>\n<p>The security of these algorithms depends on the difficulty of attacks attempting to solve their underlying mathematical problem.</p>\n<p>In general, a minimum key size of <strong>2048</strong> bits is recommended for both. It provides 112 bits of security. A key length of\n<strong>3072</strong> or <strong>4096</strong> should be preferred when possible.</p>\n<h4>AES (Advanced Encryption Standard)</h4>\n<p>AES supports three key sizes: 128 bits, 192 bits and 256 bits. The security of the AES algorithm is based on the computational complexity of trying\nall possible keys.<br> A larger key size increases the number of possible keys and makes exhaustive search attacks computationally infeasible.\nTherefore, a 256-bit key provides a higher level of security than a 128-bit or 192-bit key.</p>\n<p>Currently, a minimum key size of <strong>128 bits</strong> is recommended for AES.</p>\n<h4>Elliptic Curve Cryptography (ECC)</h4>\n<p>Elliptic curve cryptography is also used in various algorithms, such as ECDSA, ECDH, or ECMQV. The length of keys generated with elliptic curve\nalgorithms is mentioned directly in their names. For example, <code>secp256k1</code> generates a 256-bits long private key.</p>\n<p>Currently, a minimum key size of <strong>224 bits</strong> is recommended for EC-based algorithms.</p>\n<p>Additionally, some curves that theoretically provide sufficiently long keys are still discouraged. This can be because of a flaw in the curve\nparameters, a bad overall design, or poor performance. It is generally advised to use a NIST-approved elliptic curve wherever possible. Such curves\ncurrently include:</p>\n<ul>\n  <li> NIST P curves with a size of at least 224 bits, e.g. secp256r1. </li>\n  <li> Curve25519, generally known as ed25519 or x25519 depending on its application. </li>\n  <li> Curve448. </li>\n  <li> Brainpool curves with a size of at least 224 bits, e.g. brainpoolP224r1 </li>\n</ul>\n<h3>Going the extra mile</h3>\n<h4>Pre-Quantum Cryptography</h4>\n<p>Encrypted data and communications recorded today could be decrypted in the future by an attack from a quantum computer.<br> It is important to keep\nin mind that NIST-approved digital signature schemes, key agreement, and key transport may need to be replaced with secure quantum-resistant (or\n\"post-quantum\") counterpart.</p>\n<p>Thus, if data is to remain secure beyond 2030, proactive measures should be taken now to ensure its safety.</p>\n<p><a href=\"https://www.enisa.europa.eu/publications/post-quantum-cryptography-current-state-and-quantum-mitigation\">Learn more here</a>.</p>",
                    "context": {
                        "displayName": "Java Cryptography Extension",
                        "key": "java_cryptography_extension"
                    }
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "TRUSTWORTHY",
            "cleanCodeAttributeCategory": "RESPONSIBLE",
            "impacts": [
                {
                    "softwareQuality": "SECURITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S4454",
            "repo": "java",
            "name": "\"equals\" method parameters should not be marked \"@Nonnull\"",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "3min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "3min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S4454"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>By contract, the <code>equals(Object)</code> method, from <code>java.lang.Object</code>, should accept a <code>null</code> argument. Among all the\nother cases, the <code>null</code> case is even explicitly detailed in the <code>Object.equals(...)</code> Javadoc, stating <em>\"For any non-null\nreference value x, x.equals(null) should return false.\"</em></p>\n<p>Assuming that the argument to <code>equals</code> is always non-null, and enforcing that assumption with an annotation is not only a fundamental\nviolation of the contract of <code>equals</code>, but it is also likely to cause problems in the future as the use of the class evolves over time.</p>\n<p>The rule raises an issue when the <code>equals</code> method is overridden and its parameter annotated with any kind of <code>@Nonnull</code>\nannotation.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic boolean equals(@javax.annotation.Nonnull Object obj) { // Noncompliant\n  // ...\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic boolean equals(Object obj) {\n  if (obj == null) {\n    return false;\n  }\n  // ...\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S4544",
            "repo": "java",
            "name": "Using unsafe Jackson deserialization configuration is security-sensitive",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "SECURITY_HOTSPOT",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S4544"
                ]
            },
            "descriptionSections": [
                {
                    "key": "default",
                    "content": "<p>Using unsafe Jackson deserialization configuration is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-4995\">CVE-2017-4995</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-19362\">CVE-2018-19362</a> </li>\n</ul>\n<p>When Jackson is configured to allow Polymorphic Type Handling (aka PTH), formerly known as Polymorphic Deserialization, \"deserialization gadgets\"\nmay allow an attacker to perform remote code execution.</p>\n<p>This rule raises an issue when:</p>\n<ul>\n  <li> <code>enableDefaultTyping()</code> is called on an instance of <code>com.fasterxml.jackson.databind.ObjectMapper</code> or\n  <code>org.codehaus.jackson.map.ObjectMapper</code>. </li>\n  <li> or when the annotation <code>@JsonTypeInfo</code> is set at class, interface or field levels and configured with <code>use =\n  JsonTypeInfo.Id.CLASS</code> or <code>use = Id.MINIMAL_CLASS</code>. </li>\n</ul>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> You configured the Jackson deserializer as mentioned above. </li>\n  <li> The serialized data might come from an untrusted source. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Use the latest patch versions of <code>jackson-databind</code> blocking the already discovered \"deserialization gadgets\". </li>\n  <li> Avoid using the default typing configuration: <code>ObjectMapper.enableDefaultTyping()</code>. </li>\n  <li> If possible, use <code>@JsonTypeInfo(use = Id.NAME)</code> instead of <code>@JsonTypeInfo(use = Id.CLASS)</code> or <code>@JsonTypeInfo(use =\n  Id. MINIMAL_CLASS)</code> and so rely on <code>@JsonTypeName</code> and <code>@JsonSubTypes</code>. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping(); // Sensitive\n</pre>\n<pre>\n@JsonTypeInfo(use = Id.CLASS) // Sensitive\nabstract class PhoneNumber {\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/\">Top 10 2021 Category A8 - Software and Data Integrity\n  Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A8_2017-Insecure_Deserialization\">Top 10 2017 Category A8 - Insecure\n  Deserialization</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-community/vulnerabilities/Deserialization_of_untrusted_data\">Deserialization of untrusted data</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/502\">CWE-502 - Deserialization of Untrusted Data</a> </li>\n  <li> <a href=\"https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062\">On Jackson CVEs: Don’t\n  Panic</a> </li>\n  <li> <a href=\"https://nvd.nist.gov/vuln/detail/CVE-2017-15095\">CVE-2017-1509</a> </li>\n  <li> <a href=\"https://nvd.nist.gov/vuln/detail/CVE-2017-7525\">CVE-2017-7525</a> </li>\n  <li> Derived from FindSecBugs rule <a\n  href=\"https://find-sec-bugs.github.io/bugs.htm#JACKSON_UNSAFE_DESERIALIZATION\">JACKSON_UNSAFE_DESERIALIZATION</a> </li>\n</ul>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Use the latest patch versions of <code>jackson-databind</code> blocking the already discovered \"deserialization gadgets\". </li>\n  <li> Avoid using the default typing configuration: <code>ObjectMapper.enableDefaultTyping()</code>. </li>\n  <li> If possible, use <code>@JsonTypeInfo(use = Id.NAME)</code> instead of <code>@JsonTypeInfo(use = Id.CLASS)</code> or <code>@JsonTypeInfo(use =\n  Id. MINIMAL_CLASS)</code> and so rely on <code>@JsonTypeName</code> and <code>@JsonSubTypes</code>. </li>\n</ul>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/\">Top 10 2021 Category A8 - Software and Data Integrity\n  Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A8_2017-Insecure_Deserialization\">Top 10 2017 Category A8 - Insecure\n  Deserialization</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-community/vulnerabilities/Deserialization_of_untrusted_data\">Deserialization of untrusted data</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/502\">CWE-502 - Deserialization of Untrusted Data</a> </li>\n  <li> <a href=\"https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062\">On Jackson CVEs: Don’t\n  Panic</a> </li>\n  <li> <a href=\"https://nvd.nist.gov/vuln/detail/CVE-2017-15095\">CVE-2017-1509</a> </li>\n  <li> <a href=\"https://nvd.nist.gov/vuln/detail/CVE-2017-7525\">CVE-2017-7525</a> </li>\n  <li> Derived from FindSecBugs rule <a\n  href=\"https://find-sec-bugs.github.io/bugs.htm#JACKSON_UNSAFE_DESERIALIZATION\">JACKSON_UNSAFE_DESERIALIZATION</a> </li>\n</ul>"
                },
                {
                    "key": "assess_the_problem",
                    "content": "<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> You configured the Jackson deserializer as mentioned above. </li>\n  <li> The serialized data might come from an untrusted source. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping(); // Sensitive\n</pre>\n<pre>\n@JsonTypeInfo(use = Id.CLASS) // Sensitive\nabstract class PhoneNumber {\n}\n</pre>\n"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Using unsafe Jackson deserialization configuration is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-4995\">CVE-2017-4995</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-19362\">CVE-2018-19362</a> </li>\n</ul>\n<p>When Jackson is configured to allow Polymorphic Type Handling (aka PTH), formerly known as Polymorphic Deserialization, \"deserialization gadgets\"\nmay allow an attacker to perform remote code execution.</p>\n<p>This rule raises an issue when:</p>\n<ul>\n  <li> <code>enableDefaultTyping()</code> is called on an instance of <code>com.fasterxml.jackson.databind.ObjectMapper</code> or\n  <code>org.codehaus.jackson.map.ObjectMapper</code>. </li>\n  <li> or when the annotation <code>@JsonTypeInfo</code> is set at class, interface or field levels and configured with <code>use =\n  JsonTypeInfo.Id.CLASS</code> or <code>use = Id.MINIMAL_CLASS</code>. </li>\n</ul>\n"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "impacts": []
        },
        {
            "key": "java:S5785",
            "repo": "java",
            "name": "JUnit assertTrue/assertFalse should be simplified to the corresponding dedicated assertion",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "junit",
                "tests"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "TEST",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5785"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Testing equality or nullness with JUnit’s <code>assertTrue()</code> or <code>assertFalse()</code> should be simplified to the corresponding\ndedicated assertion.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nAssert.assertTrue(a.equals(b));\nAssert.assertTrue(a == b);\nAssert.assertTrue(a == null);\nAssert.assertTrue(a != null);\nAssert.assertFalse(a.equals(b));\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nAssert.assertEquals(a, b);\nAssert.assertSame(a, b);\nAssert.assertNull(a);\nAssert.assertNotNull(a);\nAssert.assertNotEquals(a, b);\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S5876",
            "repo": "java",
            "name": "A new session should be created during user authentication",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "spring"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "VULNERABILITY",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5876"
                ]
            },
            "descriptionSections": [
                {
                    "key": "introduction",
                    "content": "<p>An attacker may trick a user into using a predetermined session identifier. Consequently, this attacker can gain unauthorized access and\nimpersonate the user’s session. This kind of attack is called session fixation, and protections against it should not be disabled.</p>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Session fixation attacks take advantage of the way web applications manage session identifiers. Here’s how a session fixation attack typically\nworks:</p>\n<ul>\n  <li> When a user visits a website or logs in, a session is created for them. </li>\n  <li> This session is assigned a unique session identifier, stored in a cookie, in local storage, or through URL parameters. </li>\n  <li> In a session fixation attack, an attacker tricks a user into using a predetermined session identifier controlled by the attacker. For example,\n  the attacker sends the victim an email containing a link with this predetermined session identifier. </li>\n  <li> When the victim clicks on the link, the web application does not create a new session identifier but uses this identifier known to the\n  attacker. </li>\n  <li> At this point, the attacker can hijack and impersonate the victim’s session. </li>\n</ul>\n<h3>What is the potential impact?</h3>\n<p>Session fixation attacks pose a significant security risk to web applications and their users. By exploiting this vulnerability, attackers can gain\nunauthorized access to user sessions, potentially leading to various malicious activities. Some of the most relevant scenarios are the following:</p>\n<h4>Impersonation</h4>\n<p>Once an attacker successfully fixes a session identifier, they can impersonate the victim and gain access to their account without providing valid\ncredentials. This can result in unauthorized actions, such as modifying personal information, making unauthorized transactions, or even performing\nmalicious activities on behalf of the victim. An attacker can also manipulate the victim into performing actions they wouldn’t normally do, such as\nrevealing sensitive information or conducting financial transactions on the attacker’s behalf.</p>\n<h4>Data Breach</h4>\n<p>If an attacker gains access to a user’s session, they may also gain access to sensitive data associated with that session. This can include\npersonal information, financial details, or any other confidential data that the user has access to within the application. The compromised data can\nbe used for identity theft, financial fraud, or other malicious purposes.</p>\n<h4>Privilege Escalation</h4>\n<p>In some cases, session fixation attacks can be used to escalate privileges within a web application. By fixing a session identifier with higher\nprivileges, an attacker can bypass access controls and gain administrative or privileged access to the application. This can lead to unauthorized\nmodifications, data manipulation, or even complete compromise of the application and its underlying systems.</p>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<p><a href=\"https://docs.spring.io/spring-security/reference/servlet/authentication/session-management.html\">Session Fixation Attack\nProtection</a></p>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\">Top 10 2021 Category A7 - Identification and\n  Authentication Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication\">Top 10 2017 Category A2 - Broken Authentication</a>\n  </li>\n  <li> <a href=\"https://owasp.org/www-community/attacks/Session_fixation\">OWASP Sesssion Fixation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/384\">CWE-384 - Session Fixation</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222579\">Application Security and\n  Development: V-222579</a> - Applications must use system-generated session identifiers that protect against session fixation. </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222582\">Application Security and\n  Development: V-222582</a> - The application must not re-use or recycle session IDs. </li>\n</ul>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>In a Spring Security’s context, session fixation protection is enabled by default but can be disabled with <code>sessionFixation().none()</code>\nmethod. Session fixation protection can also be enabled explicitly with <code>migrateSession()</code> but is superfluous in most cases.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@Override\nprotected void configure(HttpSecurity http) throws Exception {\n   http.sessionManagement()\n     .sessionFixation().none(); // Noncompliant: the existing session will continue\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@Override\nprotected void configure(HttpSecurity http) throws Exception {\n  http.sessionManagement()\n     .sessionFixation().migrateSession();\n}\n</pre>\n<h3>How does this work?</h3>\n<p>The protection works by ensuring that the session identifier, which is used to identify and track a user’s session, is changed or regenerated\nduring the authentication process.</p>\n<p>Here’s how session fixation protection typically works:</p>\n<ol>\n  <li> When a user visits a website or logs in, a session is created for them. This session is assigned a unique session identifier, which is stored\n  in a cookie or passed through URL parameters. </li>\n  <li> In a session fixation attack, an attacker tricks a user into using a predetermined session identifier controlled by the attacker. This allows\n  the attacker to potentially gain unauthorized access to the user’s session. </li>\n  <li> To protect against session fixation attacks, session fixation protection mechanisms come into play during the authentication process. When a\n  user successfully authenticates, this mechanism generates a new session identifier for the user’s session. </li>\n  <li> The old session identifier, which may have been manipulated by the attacker, is invalidated and no longer associated with the user’s session.\n  This ensures that any attempts by the attacker to use the fixed session identifier are rendered ineffective. </li>\n  <li> The user is then assigned the new session identifier, which is used for subsequent requests and session tracking. This new session identifier\n  is typically stored in a new session cookie or passed through URL parameters. </li>\n</ol>\n<p>By regenerating the session identifier upon authentication, session fixation protection helps ensure that the user’s session is tied to a new,\nsecure identifier that the attacker cannot predict or control. This mitigates the risk of an attacker gaining unauthorized access to the user’s\nsession and helps maintain the integrity and security of the application’s session management process.</p>\n<p>In Spring, calling <code>migrateSession()</code> explicitly is not necessary in most cases, as it automatically migrates session attributes to a\nnew session upon successful authentication. The <code>migrateSession()</code> method is typically explicitly used when you want to manually trigger\nthe migration of session attributes to a new session outside of the authentication process.</p>",
                    "context": {
                        "displayName": "Spring",
                        "key": "spring"
                    }
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "SECURITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S5996",
            "repo": "java",
            "name": "Regex boundaries should not be used in a way that can never be matched",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "regex"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5996"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>In regular expressions the boundaries <code>^</code> and <code>\\A</code> can only match at the beginning of the input (or, in case of\n<code>^</code> in combination with the <code>MULTILINE</code> flag, the beginning of the line) and <code>$</code>, <code>\\Z</code> and <code>\\z</code>\nonly at the end.</p>\n<p>These patterns can be misused, by accidentally switching <code>^</code> and <code>$</code> for example, to create a pattern that can never\nmatch.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n// This can never match because $ and ^ have been switched around\nPattern.compile(\"$[a-z]+^\"); // Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nPattern.compile(\"^[a-z]+$\");\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S5998",
            "repo": "java",
            "name": "Regular expressions should not overflow the stack",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "regex"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "maxStackConsumptionFactor",
                    "htmlDesc": "An indicator approximately proportional to how quickly the stack grows relative to the input size. An issue will be reported if the value for a regex exceeds the maximum set here. Setting this to 0 will cause an issue to be reported for all regular expressions with non-constant stack consumption.",
                    "defaultValue": "5.0",
                    "type": "STRING"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5998"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>The Java regex engine uses recursive method calls to implement backtracking. Therefore when a repetition inside a regular expression contains\nmultiple paths (i.e. the body of the repetition contains an alternation (<code>|</code>), an optional element or another repetition), trying to match\nthe regular expression can cause a stack overflow on large inputs. This does not happen when using a possessive quantifier (such as <code>*+</code>\ninstead of <code>*</code>) or when using a character class inside a repetition (e.g. <code>[ab]*</code> instead of <code>(a|b)*</code>).</p>\n<p>The size of the input required to overflow the stack depends on various factors, including of course the stack size of the JVM. One thing that\nsignificantly increases the size of the input that can be processed is if each iteration of the repetition goes through a chain of multiple constant\ncharacters because such consecutive characters will be matched by the regex engine without invoking any recursion.</p>\n<p>For example, on a JVM with a stack size of 1MB, the regex <code>(?:a|b)*</code> will overflow the stack after matching around 6000 characters\n(actual numbers may differ between JVM versions and even across multiple runs on the same JVM) whereas <code>(?:abc|def)*</code> can handle around\n15000 characters.</p>\n<p>Since often times stack growth can’t easily be avoided, this rule will only report issues on regular expressions if they can cause a stack overflow\non realistically sized inputs. You can adjust the <code>maxStackConsumptionFactor</code> parameter to adjust this.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nPattern.compile(\"(a|b)*\"); // Noncompliant\nPattern.compile(\"(.|\\n)*\"); // Noncompliant\nPattern.compile(\"(ab?)*\"); // Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nPattern.compile(\"[ab]*\"); // Character classes don't cause recursion the way that '|' does\nPattern.compile(\"(?s).*\"); // Enabling the (?s) flag makes '.' match line breaks, so '|\\n' isn't necessary\nPattern.compile(\"(ab?)*+\"); // Possessive quantifiers don't cause recursion because they disable backtracking\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "COMPLETE",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S1150",
            "repo": "java",
            "name": "\"Enumeration\" should not be implemented",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "obsolete"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "30min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "30min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1150"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>As documented in <code>Enumeration</code> 's Javadoc, you should favor the <code>Iterator</code> interface over <code>Enumeration</code>.\n<code>Iterator</code> offers a similar contract to <code>Enumeration</code> with the addition of a method for removal and shorter method names.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class MyClass implements Enumeration {  // Noncompliant\n  /* ... */\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class MyClass implements Iterator {     // Compliant\n  /* ... */\n}\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Enumeration.html\">docs.oracle.com</a> - Enumeration </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S1151",
            "repo": "java",
            "name": "\"switch case\" clauses should not have too many lines of code",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "brain-overload"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "max",
                    "htmlDesc": "Maximum number of lines",
                    "defaultValue": "5",
                    "type": "INTEGER"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1151"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>The <code>switch</code> statement should be used only to clearly define some new branches in the control flow. As soon as a <code>case</code>\nclause contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of the\n<code>case</code> clause should be extracted into a dedicated method.</p>\n<h3>Noncompliant code example</h3>\n<p>With the default threshold of 5:</p>\n<pre>\nswitch (myVariable) {\n  case 0: // Noncompliant: 6 lines till next case\n    methodCall1(\"\");\n    methodCall2(\"\");\n    methodCall3(\"\");\n    methodCall4(\"\");\n    break;\n  case 1:\n  ...\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nswitch (myVariable) {\n  case 0:\n    doSomething()\n    break;\n  case 1:\n  ...\n}\n...\nprivate void doSomething(){\n    methodCall1(\"\");\n    methodCall2(\"\");\n    methodCall3(\"\");\n    methodCall4(\"\");\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "FOCUSED",
            "cleanCodeAttributeCategory": "ADAPTABLE",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S1153",
            "repo": "java",
            "name": "\"String.valueOf()\" should not be appended to a \"String\"",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "clumsy"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1153"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Appending <code>String.valueOf()</code> to a <code>String</code> decreases the code readability.</p>\n<p>The argument passed to <code>String.valueOf()</code> should be directly appended instead.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nString message = \"Output is \" + String.valueOf(12);\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nString message = \"Output is \" + 12;\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S1155",
            "repo": "java",
            "name": "\"Collection.isEmpty()\" should be used to test for emptiness",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "clumsy"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1155"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>When you call <code>isEmpty()</code>, it clearly communicates the code’s intention, which is to check if the collection is empty. Using\n<code>size() == 0</code> for this purpose is less direct and makes the code slightly more complex.</p>\n<p>Moreover, depending on the implementation, the <code>size()</code> method can have a time complexity of <code>O(n)</code> where <code>n</code> is\nthe number of elements in the collection. On the other hand, <code>isEmpty()</code> simply checks if there is at least one element in the collection,\nwhich is a constant time operation, <code>O(1)</code>.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class MyClass {\n  public void doSomething(Collection&lt;String&gt; myCollection) {\n    if (myCollection.size() == 0) { // Noncompliant\n      doSomethingElse();\n    }\n  }\n}\n</pre>\n<p>Prefer using <code>isEmpty()</code> to test for emptiness over <code>size()</code>.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class MyClass {\n  public void doSomething(Collection&lt;String&gt; myCollection) {\n    if (myCollection.isEmpty()) {\n      doSomethingElse();\n    }\n  }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S1168",
            "repo": "java",
            "name": "Empty arrays and collections should be returned instead of null",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "30min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "30min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1168"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/aNYxBQ\">CERT, MSC19-C.</a> - For functions that return an array, prefer returning an empty array\n  over a null value </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/JzZGBQ\">CERT, MET55-J.</a> - Return an empty array or collection instead of a null value for\n  methods that return an array or collection </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Returning <code>null</code> instead of an actual array, collection or map forces callers of the method to explicitly test for nullity, making them\nmore complex and less readable.</p>\n<p>Moreover, in many cases, <code>null</code> is used as a synonym for empty.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic static List&lt;Result&gt; getAllResults() {\n  return null;                             // Noncompliant\n}\n\npublic static Result[] getResults() {\n  return null;                             // Noncompliant\n}\n\npublic static Map&lt;String, Object&gt; getValues() {\n  return null;                             // Noncompliant\n}\n\npublic static void main(String[] args) {\n  Result[] results = getResults();\n  if (results != null) {                   // Nullity test required to prevent NPE\n    for (Result result: results) {\n      /* ... */\n    }\n  }\n\n  List&lt;Result&gt; allResults = getAllResults();\n  if (allResults != null) {                // Nullity test required to prevent NPE\n    for (Result result: allResults) {\n      /* ... */\n    }\n  }\n\n  Map&lt;String, Object&gt; values = getValues();\n  if (values != null) {                   // Nullity test required to prevent NPE\n    values.forEach((k, v) -&gt; doSomething(k, v));\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic static List&lt;Result&gt; getAllResults() {\n  return Collections.emptyList();          // Compliant\n}\n\npublic static Result[] getResults() {\n  return new Result[0];                    // Compliant\n}\n\npublic static Map&lt;String, Object&gt; getValues() {\n  return Collections.emptyMap();           // Compliant\n}\n\npublic static void main(String[] args) {\n  for (Result result: getAllResults()) {\n    /* ... */\n  }\n\n  for (Result result: getResults()) {\n    /* ... */\n  }\n\n  getValues().forEach((k, v) -&gt; doSomething(k, v));\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S2121",
            "repo": "java",
            "name": "String operations with predictable outcomes should be avoided",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "clumsy"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2121"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/lang/String.html\">Oracle Java SE - String</a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Operations performed on a string with predictable outcomes should be avoided. For example:</p>\n<ul>\n  <li> checking if a string contains itself </li>\n  <li> comparing a string with itself </li>\n  <li> matching a string against itself </li>\n  <li> creating a substring from 0 to the end of the string </li>\n  <li> creating a substring from the end of the string </li>\n  <li> replacing a string with itself </li>\n  <li> replacing a substring with the exact substring </li>\n</ul>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>Avoid performing the operation that has a predictable outcome.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nString speech = \"SonarQube is the best static code analysis tool.\"\n\nString s1 = speech.substring(0); // Noncompliant - yields the whole string\nString s2 = speech.substring(speech.length()); // Noncompliant - yields \"\";\nString s3 = speech.substring(5, speech.length()); // Noncompliant - use the 1-arg version instead\n\nif (speech.contains(speech)) { // Noncompliant - always true\n    // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nString speech = \"SonarQube is the best static code analysis tool.\"\n\nString s1 = speech;\nString s2 = \"\";\nString s3 = speech.substring(5);\n\n// ...\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S2122",
            "repo": "java",
            "name": "\"ScheduledThreadPoolExecutor\" should not have 0 core threads",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2122"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/util/concurrent/ScheduledThreadPoolExecutor.html\">Oracle Java SE -\n  ScheduledThreadPoolExecutor</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://engineering.zalando.com/posts/2019/04/how-to-set-an-ideal-thread-pool-size.html\">Zalando - How to set an ideal thread pool\n  size</a> </li>\n  <li> <a href=\"https://www.baeldung.com/java-threadpooltaskexecutor-core-vs-max-poolsize\">Baeldung - ThreadPoolTaskExecutor corePoolSize vs.\n  maxPoolSize</a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p><code>ThreadPoolExecutor</code> is an object that efficiently manages and controls the execution of multiple tasks in a thread pool. A thread pool\nis a collection of pre-initialized threads ready to execute tasks. Instead of creating a new thread for each task, which can be costly in terms of\nsystem resources, a thread pool reuses existing threads.</p>\n<p><code>java.util.concurrent.ScheduledThreadPoolExecutor</code> is an extension of <code>ThreadPoolExecutor</code> that can additionally schedule\ncommands to run after a given delay or to execute periodically.</p>\n<p><code>ScheduledThreadPoolExecutor</code> 's pool is sized with <code>corePoolSize</code>, so setting <code>corePoolSize</code> to zero means the\nexecutor will have no threads and run nothing. <code>corePoolSize</code> should have a value greater than zero and valid for your tasks.</p>\n<p>This rule detects instances where <code>corePoolSize</code> is set to zero via its setter or the object constructor.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic void do(){\n\n  int poolSize = 5; // value greater than 0\n\n  ScheduledThreadPoolExecutor threadPool1 = new ScheduledThreadPoolExecutor(0); // Noncompliant\n\n  ScheduledThreadPoolExecutor threadPool2 = new ScheduledThreadPoolExecutor(poolSize);\n  threadPool2.setCorePoolSize(0);  // Noncompliant\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S2123",
            "repo": "java",
            "name": "Values should not be uselessly incremented",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "unused"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2123"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>A value that is incremented or decremented and then not stored is at best wasted code and at worst a bug.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic int pickNumber() {\n  int i = 0;\n  int j = 0;\n\n  i = i++; // Noncompliant; i is still zero\n\n  return j++; // Noncompliant; 0 returned\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic int pickNumber() {\n  int i = 0;\n  int j = 0;\n\n  i++;\n  return ++j;\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S2129",
            "repo": "java",
            "name": "Constructors should not be used to instantiate \"String\", \"BigInteger\", \"BigDecimal\" and primitive-wrapper classes",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "performance"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2129"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Calling constructors for <code>String</code>, <code>BigInteger</code>, <code>BigDecimal</code> and the objects used to wrap primitives is less\nefficient and less clear than relying on autoboxing or <code>valueOf</code>.</p>\n<p>Consider simplifying when possible for more efficient and cleaner code.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nString empty = new String(); // Noncompliant; yields essentially \"\", so just use that.\nString nonempty = new String(\"Hello world\"); // Noncompliant\nDouble myDouble = new Double(1.1); // Noncompliant; use valueOf\nInteger integer = new Integer(1); // Noncompliant\nBoolean bool = new Boolean(true); // Noncompliant\nBigInteger bigInteger1 = new BigInteger(\"3\"); // Noncompliant\nBigInteger bigInteger2 = new BigInteger(\"9223372036854775807\"); // Noncompliant\nBigInteger bigInteger3 = new BigInteger(\"111222333444555666777888999\"); // Compliant, greater than Long.MAX_VALUE\nBigDecimal bigDecimal = new BigDecimal(\"42.0\"); // Compliant (see Exceptions section)\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nString empty = \"\";\nString nonempty = \"Hello world\";\nDouble myDouble = 1.1;\nInteger integer = 1;\nBoolean bool = true;\nBigInteger bigInteger1 = BigInteger.valueOf(3);\nBigInteger bigInteger2 = BigInteger.valueOf(9223372036854775807L);\nBigInteger bigInteger3 = new BigInteger(\"111222333444555666777888999\");\nBigDecimal bigDecimal = new BigDecimal(\"42.0\");\n</pre>\n<h3>Exceptions</h3>\n<p><code>BigDecimal</code> constructor with a <code>double</code> argument is ignored as using <code>valueOf</code> instead might change the resulting\nvalue. See <a href='/coding_rules#rule_key=java%3AS2111'>S2111</a>.</p>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/tutorial/java/data/autoboxing.html\">Oracle - Learning the Java Language</a> - Autoboxing and Unboxing\n  </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S2133",
            "repo": "java",
            "name": "Objects should not be created only to invoke \"getClass\"",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "performance"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2133"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Creating an object for the sole purpose of calling <code>getClass</code> on it is a waste of memory and cycles. Instead, simply use the class’s\n<code>.class</code> property.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nMyObject myOb = new MyObject();  // Noncompliant\nClass c = myOb.getClass();\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nClass c = MyObject.class;\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "EFFICIENT",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S2254",
            "repo": "java",
            "name": "\"HttpServletRequest.getRequestedSessionId()\" should not be used",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "VULNERABILITY",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2254"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> Jakarta EE Documentation - <a\n  href=\"https://jakarta.ee/specifications/platform/10/apidocs/jakarta/servlet/http/httpservletrequest#getRequestedSessionId--\"><code>HttpServletRequest</code> - <code>getRequestedSessionId</code></a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A04_2021-Insecure_Design/\">Top 10 2021 Category A4 - Insecure Design</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication\">Top 10 2017 Category A2 - Broken Authentication</a>\n  </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/807\">CWE-807 - Reliance on Untrusted Inputs in a Security Decision</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222582\">Application Security and\n  Development: V-222582</a> - The application must not re-use or recycle session IDs. </li>\n</ul>"
                },
                {
                    "key": "introduction",
                    "content": "<p>This function uses a session ID that is supplied by the client. Because of this, the ID may not be valid or might even be spoofed.</p>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>According to the API documentation of the <code>HttpServletRequest.getRequestedSessionId()</code> method:</p>\n<blockquote>\n  <p>Returns the session ID specified by the client. This may not be the same as the ID of the current valid session for this request. If the client\n  did not specify a session ID, this method returns null.</p>\n</blockquote>\n<p>The session ID it returns is either transmitted through a cookie or a URL parameter. This allows an end user to manually update the value of this\nsession ID in an HTTP request.</p>\n<p>Due to the ability of the end-user to manually change the value, the session ID in the request should only be used by a servlet container (e.g.\nTomcat or Jetty) to see if the value matches the ID of an existing session. If it does not, the user should be considered unauthenticated.</p>\n<h3>What is the potential impact?</h3>\n<p>Using a client-supplied session ID to manage sessions on the server side can potentially have an impact on the security of the application.</p>\n<h4>Impersonation (through session fixation)</h4>\n<p>If an attacker succeeds in fixing a user’s session to a session identifier that they know, then they can impersonate this victim and gain access to\ntheir account without providing valid credentials. This can result in unauthorized actions, such as modifying personal information, making\nunauthorized transactions, or even performing malicious activities on behalf of the victim. An attacker can also manipulate the victim into performing\nactions they wouldn’t normally do, such as revealing sensitive information or conducting financial transactions on the attacker’s behalf.</p>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>In both examples, a session ID is used to check whether a user’s session is still active. In the noncompliant example, the session ID supplied by\nthe user is used. In the compliant example, the session ID defined by the server is used instead.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nif (isActiveSession(request.getRequestedSessionId())) { // Noncompliant\n    // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nif (isActiveSession(request.getSession().getId())) {\n    // ...\n}\n</pre>\n<h3>How does this work?</h3>\n<p>The noncompliant example uses <code>HttpServletRequest.getRequestedSessionId()</code> to retrieve a session ID. This ID is then used to verify if\nthe given session is still active. As this value is given by a user, this value is not guaranteed to be a valid ID.</p>\n<p>The compliant example instead uses the server’s session ID to verify if the session is active. Additionally, <code>getSession()</code> will create\na new session if the user’s request does not contain a valid ID.</p>",
                    "context": {
                        "displayName": "Java EE",
                        "key": "java_ee"
                    }
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "TRUSTWORTHY",
            "cleanCodeAttributeCategory": "RESPONSIBLE",
            "impacts": [
                {
                    "softwareQuality": "SECURITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S2257",
            "repo": "java",
            "name": "Using non-standard cryptographic algorithms is security-sensitive",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "SECURITY_HOTSPOT",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "1d",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "1d",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2257"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>The use of a non-standard algorithm is dangerous because a determined attacker may be able to break the algorithm and compromise whatever data has\nbeen protected. Standard algorithms like <code>SHA-256</code>, <code>SHA-384</code>, <code>SHA-512</code>, …​ should be used instead.</p>\n<p>This rule tracks creation of <code>java.security.MessageDigest</code> subclasses.</p>\n"
                },
                {
                    "key": "assess_the_problem",
                    "content": "<h2>Sensitive Code Example</h2>\n<pre>\npublic class MyCryptographicAlgorithm extends MessageDigest {\n  ...\n}\n</pre>\n"
                },
                {
                    "key": "default",
                    "content": "<p>The use of a non-standard algorithm is dangerous because a determined attacker may be able to break the algorithm and compromise whatever data has\nbeen protected. Standard algorithms like <code>SHA-256</code>, <code>SHA-384</code>, <code>SHA-512</code>, …​ should be used instead.</p>\n<p>This rule tracks creation of <code>java.security.MessageDigest</code> subclasses.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Use a standard algorithm instead of creating a custom one. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\npublic class MyCryptographicAlgorithm extends MessageDigest {\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nMessageDigest digest = MessageDigest.getInstance(\"SHA-256\");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">Top 10 2021 Category A2 - Cryptographic Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/327\">CWE-327 - Use of a Broken or Risky Cryptographic Algorithm</a> </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#CUSTOM_MESSAGE_DIGEST\">MessageDigest is Custom</a>\n  </li>\n</ul>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Use a standard algorithm instead of creating a custom one. </li>\n</ul>\n<h2>Compliant Solution</h2>\n<pre>\nMessageDigest digest = MessageDigest.getInstance(\"SHA-256\");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">Top 10 2021 Category A2 - Cryptographic Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/327\">CWE-327 - Use of a Broken or Risky Cryptographic Algorithm</a> </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#CUSTOM_MESSAGE_DIGEST\">MessageDigest is Custom</a>\n  </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "impacts": []
        },
        {
            "key": "java:S2259",
            "repo": "java",
            "name": "Null pointers should not be dereferenced",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "symbolic-execution",
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "how_to_fix",
                    "content": "<h4>Noncompliant code example</h4>\n<p>The variable <code>myObject</code> is equal to <code>null</code>, meaning it has no value:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic void method() {\n  Object myObject = null;\n  System.out.println(myObject.toString()); // Noncompliant: myObject is null\n}\n</pre>\n<p>The parameter <code>input</code> might be <code>null</code> as suggested by the <code>if</code> condition:</p>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\npublic void method(Object input)\n{\n  if (input == null)\n  {\n    // ...\n  }\n  System.out.println(input.toString()); // Noncompliant\n}\n</pre>\n<p>The unboxing triggered in the return statement will throw a <code>NullPointerException</code>:</p>\n<pre data-diff-id=\"3\" data-diff-type=\"noncompliant\">\npublic boolean method() {\n  Boolean boxed = null;\n  return boxed; // Noncompliant\n}\n</pre>\n<p>Both <code>conn</code> and <code>stmt</code> might be <code>null</code> in case an exception was thrown in the try{} block:</p>\n<pre data-diff-id=\"4\" data-diff-type=\"noncompliant\">\nConnection conn = null;\nStatement stmt = null;\ntry {\n  conn = DriverManager.getConnection(DB_URL,USER,PASS);\n  stmt = conn.createStatement();\n  // ...\n} catch(Exception e) {\n  e.printStackTrace();\n} finally {\n  stmt.close();  // Noncompliant\n  conn.close();  // Noncompliant\n}\n</pre>\n<p>As <code>getName()</code> is annotated with <code>@CheckForNull</code>, there is a risk of <code>NullPointerException</code> here:</p>\n<pre data-diff-id=\"5\" data-diff-type=\"noncompliant\">\n@CheckForNull\nString getName() {...}\n\npublic boolean isNameEmpty() {\n  return getName().length() == 0; // Noncompliant\n}\n</pre>\n<p>As <code>merge(…​)</code> parameter is annotated with <code>@Nonnull</code>, passing an identified potential null value (thanks to @CheckForNull)\nis not safe:</p>\n<pre data-diff-id=\"6\" data-diff-type=\"noncompliant\">\nprivate void merge(@Nonnull Color firstColor, @Nonnull Color secondColor) {...}\n\npublic void append(@CheckForNull Color color) {\n  merge(currentColor, color);  // Noncompliant: color should be null-checked because merge(...) doesn't accept nullable parameters\n}\n</pre>\n<h4>Compliant solution</h4>\n<p>Ensuring the variable <code>myObject</code> has a value resolves the issue:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic void method() {\n  Object myObject = new Object();\n  System.out.println(myObject.toString()); // Compliant: myObject is not null\n}\n</pre>\n<p>Preventing the non-compliant code to be executed by returning early:</p>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\npublic void method(Object input)\n{\n  if (input == null)\n  {\n    return;\n  }\n  System.out.println(input.toString()); // Compliant: if 'input' is null, this is unreachable\n}\n</pre>\n<p>Ensuring that no unboxing of <code>null</code> value can happen resolves the issue</p>\n<pre data-diff-id=\"3\" data-diff-type=\"compliant\">\npublic boolean method() {\n  Boolean boxed = true;\n  return boxed; // Compliant\n}\n</pre>\n<p>Ensuring that both <code>conn</code> and <code>stmt</code> are not <code>null</code> resolves the issue:</p>\n<pre data-diff-id=\"4\" data-diff-type=\"compliant\">\nConnection conn = null;\nStatement stmt = null;\ntry {\n  conn = DriverManager.getConnection(DB_URL,USER,PASS);\n  stmt = conn.createStatement();\n  // ...\n} catch(Exception e) {\n  e.printStackTrace();\n} finally {\n  if (stmt != null) {\n    stmt.close();  // Compliant\n  }\n  if (conn != null) {\n    conn.close();  // Compliant\n  }\n}\n</pre>\n<p>Checking the returned value of <code>getName()</code> resolves the issue:</p>\n<pre data-diff-id=\"5\" data-diff-type=\"compliant\">\n@CheckForNull\nString getName() {...}\n\npublic boolean isNameEmpty() {\n  String name = getName();\n  if (name != null) {\n    return name.length() == 0; // Compliant\n  } else {\n    // ...\n  }\n}\n</pre>\n<p>Ensuring that the provided <code>color</code> is not <code>null</code> resolves the issue:</p>\n<pre data-diff-id=\"6\" data-diff-type=\"compliant\">\nprivate void merge(@Nonnull Color firstColor, @Nonnull Color secondColor) {...}\n\npublic void append(@CheckForNull Color color) {\n  if (color != null) {\n    merge(currentColor, color);  // Compliant\n  }\n}\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/476\">CWE-476 - NULL Pointer Dereference</a> </li>\n  <li> CERT, EXP34-C. - <a href=\"https://wiki.sei.cmu.edu/confluence/x/QdcxBQ\">Do not dereference null pointers</a> </li>\n  <li> CERT, EXP01-J. - <a href=\"https://wiki.sei.cmu.edu/confluence/x/aDdGBQ\">Do not use a null in a case where an object is required</a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>A reference to <code>null</code> should never be dereferenced/accessed. Doing so will cause a <code>NullPointerException</code> to be thrown. At\nbest, such an exception will cause abrupt program termination. At worst, it could expose debugging information that would be useful to an attacker, or\nit could allow an attacker to bypass security measures.</p>\n<p>Note that when they are present, this rule takes advantage of nullability annotations, like <code>@CheckForNull</code> or <code>@Nonnull</code>,\ndefined in <a href=\"https://jcp.org/en/jsr/detail?id=305\">JSR-305</a> to understand which values can be null or not. <code>@Nonnull</code> will be\nignored if used on the parameter of the <code>equals</code> method, which by contract should always work with null.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S3330",
            "repo": "java",
            "name": "Creating cookies without the \"HttpOnly\" flag is security-sensitive",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "privacy"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "SECURITY_HOTSPOT",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S3330"
                ]
            },
            "descriptionSections": [
                {
                    "key": "assess_the_problem",
                    "content": "<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the cookie is sensitive, used to authenticate the user, for instance a <em>session-cookie</em> </li>\n  <li> the <code>HttpOnly</code> attribute offer an additional protection (not the case for an <em>XSRF-TOKEN cookie</em> / CSRF token for example)\n  </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Sensitive Code Example</h2>\n<p>If you create a security-sensitive cookie in your JAVA code:</p>\n<pre>\nCookie c = new Cookie(COOKIENAME, sensitivedata);\nc.setHttpOnly(false);  // Sensitive: this sensitive cookie is created with the httponly flag set to false and so it can be stolen easily in case of XSS vulnerability\n</pre>\n<p>By default the <a href=\"https://docs.oracle.com/javaee/6/api/javax/servlet/http/Cookie.html#setHttpOnly(boolean)\"><code>HttpOnly</code></a> flag is\nset to <em>false:</em></p>\n<pre>\nCookie c = new Cookie(COOKIENAME, sensitivedata);  // Sensitive: this sensitive cookie is created with the httponly flag not defined (by default set to false) and so it can be stolen easily in case of XSS vulnerability\n</pre>\n"
                },
                {
                    "key": "root_cause",
                    "content": "<p>When a cookie is configured with the <code>HttpOnly</code> attribute set to <em>true</em>, the browser guaranties that no client-side script will\nbe able to read it. In most cases, when a cookie is created, the default value of <code>HttpOnly</code> is <em>false</em> and it’s up to the developer\nto decide whether or not the content of the cookie can be read by the client-side script. As a majority of Cross-Site Scripting (XSS) attacks target\nthe theft of session-cookies, the <code>HttpOnly</code> attribute can help to reduce their impact as it won’t be possible to exploit the XSS\nvulnerability to steal session-cookies.</p>\n"
                },
                {
                    "key": "how_to_fix",
                    "content": "<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> By default the <code>HttpOnly</code> flag should be set to <em>true</em> for most of the cookies and it’s mandatory for session /\n  sensitive-security cookies. </li>\n</ul>\n<h2>Compliant Solution</h2>\n<pre>\nCookie c = new Cookie(COOKIENAME, sensitivedata);\nc.setHttpOnly(true); // Compliant: this sensitive cookie is protected against theft (HttpOnly=true)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">Top 10 2021 Category A5 - Security Misconfiguration</a> </li>\n  <li> <a href=\"https://owasp.org/www-community/HttpOnly\">OWASP HttpOnly</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS)\">Top 10 2017 Category A7 - Cross-Site Scripting\n  (XSS)</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/1004\">CWE-1004 - Sensitive Cookie Without 'HttpOnly' Flag</a> </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#HTTPONLY_COOKIE\">HTTPONLY_COOKIE</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222575\">Application Security and\n  Development: V-222575</a> - The application must set the HTTPOnly flag on session cookies. </li>\n</ul>"
                },
                {
                    "key": "default",
                    "content": "<p>When a cookie is configured with the <code>HttpOnly</code> attribute set to <em>true</em>, the browser guaranties that no client-side script will\nbe able to read it. In most cases, when a cookie is created, the default value of <code>HttpOnly</code> is <em>false</em> and it’s up to the developer\nto decide whether or not the content of the cookie can be read by the client-side script. As a majority of Cross-Site Scripting (XSS) attacks target\nthe theft of session-cookies, the <code>HttpOnly</code> attribute can help to reduce their impact as it won’t be possible to exploit the XSS\nvulnerability to steal session-cookies.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the cookie is sensitive, used to authenticate the user, for instance a <em>session-cookie</em> </li>\n  <li> the <code>HttpOnly</code> attribute offer an additional protection (not the case for an <em>XSRF-TOKEN cookie</em> / CSRF token for example)\n  </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> By default the <code>HttpOnly</code> flag should be set to <em>true</em> for most of the cookies and it’s mandatory for session /\n  sensitive-security cookies. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<p>If you create a security-sensitive cookie in your JAVA code:</p>\n<pre>\nCookie c = new Cookie(COOKIENAME, sensitivedata);\nc.setHttpOnly(false);  // Sensitive: this sensitive cookie is created with the httponly flag set to false and so it can be stolen easily in case of XSS vulnerability\n</pre>\n<p>By default the <a href=\"https://docs.oracle.com/javaee/6/api/javax/servlet/http/Cookie.html#setHttpOnly(boolean)\"><code>HttpOnly</code></a> flag is\nset to <em>false:</em></p>\n<pre>\nCookie c = new Cookie(COOKIENAME, sensitivedata);  // Sensitive: this sensitive cookie is created with the httponly flag not defined (by default set to false) and so it can be stolen easily in case of XSS vulnerability\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nCookie c = new Cookie(COOKIENAME, sensitivedata);\nc.setHttpOnly(true); // Compliant: this sensitive cookie is protected against theft (HttpOnly=true)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">Top 10 2021 Category A5 - Security Misconfiguration</a> </li>\n  <li> <a href=\"https://owasp.org/www-community/HttpOnly\">OWASP HttpOnly</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS)\">Top 10 2017 Category A7 - Cross-Site Scripting\n  (XSS)</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/1004\">CWE-1004 - Sensitive Cookie Without 'HttpOnly' Flag</a> </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#HTTPONLY_COOKIE\">HTTPONLY_COOKIE</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222575\">Application Security and\n  Development: V-222575</a> - The application must set the HTTPOnly flag on session cookies. </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "impacts": []
        },
        {
            "key": "java:S3346",
            "repo": "java",
            "name": "Expressions used in \"assert\" should not produce side effects",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S3346"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/mjdGBQ\">CERT, EXP06-J.</a> - Expressions used in assertions must not produce side effects </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Since <code>assert</code> statements aren’t executed by default (they must be enabled with JVM flags) developers should never rely on their\nexecution the evaluation of any logic required for correct program function.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nassert myList.remove(myList.get(0));  // Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nboolean removed = myList.remove(myList.get(0));\nassert removed;\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S3577",
            "repo": "java",
            "name": "Test classes should comply with a naming convention",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "convention",
                "tests"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "format",
                    "htmlDesc": "Regular expression against which test class names are checked.",
                    "defaultValue": "^((Test|IT)[a-zA-Z0-9_]+|[A-Z][a-zA-Z0-9_]*(Test|Tests|TestCase|IT|ITCase))$",
                    "type": "STRING"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "TEST",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S3577"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Shared naming conventions allow teams to collaborate efficiently. This rule raises an issue when a test class name does not match the provided\nregular expression.</p>\n<h3>Noncompliant code example</h3>\n<p>With the default value: <code>^((Test|IT)[a-zA-Z0-9_]+|[A-Z][a-zA-Z0-9_]*(Test|Tests|TestCase|IT|ITCase))$</code></p>\n<pre>\nclass Foo {  // Noncompliant\n  @Test\n  void check() {  }\n}\n\nclass Bar {  // Noncompliant\n  @Nested\n  class PositiveCase {\n    @Test\n    void check() {  }\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nclass FooTest {\n  @Test\n  void check() {  }\n}\n\nclass BarIT {\n  @Nested\n  class PositiveCase {\n    @Test\n    void check() {  }\n  }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "IDENTIFIABLE",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S4425",
            "repo": "java",
            "name": "\"Integer.toHexString\" should not be used to build hexadecimal strings",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S4425"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Using <code>Integer.toHexString</code> is a common mistake when converting sequences of bytes into hexadecimal string representations. The problem\nis that the method trims leading zeroes, which can lead to wrong conversions. For instance a two bytes value of <code>0x4508</code> would be converted\ninto <code>45</code> and <code>8</code> which once concatenated would give <code>0x458</code>.</p>\n<p>This is particularly damaging when converting hash-codes and could lead to a security vulnerability.</p>\n<p>This rule raises an issue when <code>Integer.toHexString</code> is used in any kind of string concatenations.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nMessageDigest md = MessageDigest.getInstance(\"SHA-256\");\nbyte[] bytes = md.digest(password.getBytes(\"UTF-8\"));\n\nStringBuilder sb = new StringBuilder();\nfor (byte b : bytes) {\n    sb.append(Integer.toHexString( b &amp; 0xFF )); // Noncompliant\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nMessageDigest md = MessageDigest.getInstance(\"SHA-256\");\nbyte[] bytes = md.digest(password.getBytes(\"UTF-8\"));\n\nStringBuilder sb = new StringBuilder();\nfor (byte b : bytes) {\n    sb.append(String.format(\"%02X\", b));\n}\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/704\">CWE-704 - Incorrect Type Conversion or Cast</a> </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#BAD_HEXA_CONVERSION\">BAD_HEXA_CONVERSION</a> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S4434",
            "repo": "java",
            "name": "Allowing deserialization of LDAP objects is security-sensitive",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "SECURITY_HOTSPOT",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S4434"
                ]
            },
            "descriptionSections": [
                {
                    "key": "assess_the_problem",
                    "content": "<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The application connects to an untrusted LDAP directory. </li>\n  <li> User-controlled objects can be stored in the LDAP directory. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\nDirContext ctx = new InitialDirContext();\n// ...\nctx.search(query, filter,\n        new SearchControls(scope, countLimit, timeLimit, attributes,\n            true, // Noncompliant; allows deserialization\n            deref));\n</pre>\n"
                },
                {
                    "key": "default",
                    "content": "<p>JNDI supports the deserialization of objects from LDAP directories, which can lead to remote code execution.</p>\n<p>This rule raises an issue when an LDAP search query is executed with <code>SearchControls</code> configured to allow deserialization.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The application connects to an untrusted LDAP directory. </li>\n  <li> User-controlled objects can be stored in the LDAP directory. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>It is recommended to disable deserialization of LDAP objects.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\nDirContext ctx = new InitialDirContext();\n// ...\nctx.search(query, filter,\n        new SearchControls(scope, countLimit, timeLimit, attributes,\n            true, // Noncompliant; allows deserialization\n            deref));\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nDirContext ctx = new InitialDirContext();\n// ...\nctx.search(query, filter,\n        new SearchControls(scope, countLimit, timeLimit, attributes,\n            false, // Compliant\n            deref));\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/\">Top 10 2021 Category A8 - Software and Data Integrity\n  Failures</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/502\">CWE-502 - Deserialization of Untrusted Data</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A8_2017-Insecure_Deserialization\">Top 10 2017 Category A8 - Insecure\n  Deserialization</a> </li>\n  <li> <a href=\"https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE-wp.pdf\">BlackHat\n  presentation</a> </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#LDAP_ENTRY_POISONING\">LDAP_ENTRY_POISONING</a> </li>\n</ul>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<h2>Recommended Secure Coding Practices</h2>\n<p>It is recommended to disable deserialization of LDAP objects.</p>\n<h2>Compliant Solution</h2>\n<pre>\nDirContext ctx = new InitialDirContext();\n// ...\nctx.search(query, filter,\n        new SearchControls(scope, countLimit, timeLimit, attributes,\n            false, // Compliant\n            deref));\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/\">Top 10 2021 Category A8 - Software and Data Integrity\n  Failures</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/502\">CWE-502 - Deserialization of Untrusted Data</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A8_2017-Insecure_Deserialization\">Top 10 2017 Category A8 - Insecure\n  Deserialization</a> </li>\n  <li> <a href=\"https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE-wp.pdf\">BlackHat\n  presentation</a> </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#LDAP_ENTRY_POISONING\">LDAP_ENTRY_POISONING</a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>JNDI supports the deserialization of objects from LDAP directories, which can lead to remote code execution.</p>\n<p>This rule raises an issue when an LDAP search query is executed with <code>SearchControls</code> configured to allow deserialization.</p>\n"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "impacts": []
        },
        {
            "key": "java:S5993",
            "repo": "java",
            "name": "Constructors of an \"abstract\" class should not be declared \"public\"",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "design"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5993"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Abstract classes should not have public constructors. Constructors of abstract classes can only be called in constructors of their subclasses. So\nthere is no point in making them public. The <code>protected</code> modifier should be enough.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic abstract class AbstractClass1 {\n    public AbstractClass1 () { // Noncompliant, has public modifier\n        // do something here\n    }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic abstract class AbstractClass2 {\n    protected AbstractClass2 () {\n        // do something here\n    }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S5994",
            "repo": "java",
            "name": "Regex patterns following a possessive quantifier should not always fail",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "regex"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5994"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Possessive quantifiers in Regex patterns like below improve performance by eliminating needless backtracking:</p>\n<pre>\n?+ , *+ , ++ , {n}+ , {n,}+ , {n,m}+\n</pre>\n<p>But because possessive quantifiers do not keep backtracking positions and never give back, the following sub-patterns should not match only similar\ncharacters. Otherwise, possessive quantifiers consume all characters that could have matched the following sub-patterns and nothing remains for the\nfollowing sub-patterns.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nPattern pattern1 = Pattern.compile(\"a++abc\");       // Noncompliant, the second 'a' never matches\nPattern pattern2 = Pattern.compile(\"\\\\d*+[02468]\"); // Noncompliant, the sub-pattern \"[02468]\" never matches\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nPattern pattern1 = Pattern.compile(\"aa++bc\");            // Compliant, for example it can match \"aaaabc\"\nPattern pattern2 = Pattern.compile(\"\\\\d*+(?&lt;=[02468])\"); // Compliant, for example it can match an even number like \"1234\"\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S6856",
            "repo": "java",
            "name": "\"@PathVariable\" annotation should be present if a path variable is used",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "spring"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S6856"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>The <code>@PathVariable</code> annotation in Spring extracts values from the URI path and binds them to method parameters in a Spring MVC\ncontroller. It is commonly used with <code>@GetMapping</code>, <code>@PostMapping</code>, <code>@PutMapping</code>, and <code>@DeleteMapping</code> to\ncapture path variables from the URI. These annotations map HTTP requests to specific handler methods in a controller. They are part of the Spring Web\nmodule and are commonly used to define the routes for different HTTP operations in a RESTful API.</p>\n<p>If a method has a path template containing a placeholder, like \"/api/resource/{id}\", and there’s no <code>@PathVariable</code> annotation on a\nmethod parameter to capture the id path variable, Spring will disregard the id variable.</p>\n<p>This rule will raise an issue if a method has a path template with a placeholder, but no corresponding <code>@PathVariable</code>, or\nvice-versa.</p>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@GetMapping(\"/api/resource/{id}\")\npublic ResponseEntity&lt;String&gt; getResourceById(Long id) { // Noncompliant - The 'id' parameter will not be automatically populated with the path variable value\n  return ResponseEntity.ok(\"Fetching resource with ID: \" + id);\n}\n\n@GetMapping(\"/api/asset/\")\npublic ResponseEntity&lt;String&gt; getAssetById(@PathVariable Long id) { // Noncompliant - The 'id' parameter does not have a corresponding placeholder\n  return ResponseEntity.ok(\"Fetching asset with ID: \" + id);\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@GetMapping(\"/api/resource/{id}\")\npublic ResponseEntity&lt;String&gt; getResourceById(@PathVariable Long id) { // Compliant\n  return ResponseEntity.ok(\"Fetching resource with ID: \" + id);\n}\n\n@GetMapping(\"/api/asset/{id}\")\npublic ResponseEntity&lt;String&gt; getAssetById(@PathVariable Long id) {\n  return ResponseEntity.ok(\"Fetching asset with ID: \" + id);\n}\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://spring.io/guides/tutorials/rest/\">Spring IO - Building REST services with Spring</a> </li>\n  <li> <a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/PathVariable.html\">Spring\n  Framework API - PathVariable</a> </li>\n  <li> <a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/GetMapping.html\">Spring\n  Framework API - GetMapping</a> </li>\n  <li> <a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/PostMapping.html\">Spring\n  Framework API - PostMapping</a> </li>\n  <li> <a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/PutMapping.html\">Spring\n  Framework API - PutMapping</a> </li>\n  <li> <a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/DeleteMapping.html\">Spring\n  Framework API - DeleteMapping</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://www.baeldung.com/spring-pathvariable\">Baeldung - Spring @PathVariable</a> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S6857",
            "repo": "java",
            "name": "SpEL expression should have a valid syntax",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "spring"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S6857"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.spring.io/spring-framework/reference/core/expressions.html\">Spring Framework - Spring Expression Language (SpEL)</a>\n  </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>SpEL is used in Spring annotations and is parsed by the Spring framework, not by the Java compiler. This means that invalid SpEL expressions are\nnot detected during Java compile time. They will cause exceptions during runtime instead, or even fail silently with the expression string interpreted\nas a simple string literal by Spring.</p>\n<h3>Exceptions</h3>\n<p>This rule does report syntactical errors in SpEL expressions but does not consider semantic errors, such as unknown identifiers or incompatible\noperand data types.</p>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>Correct the syntax error in the SpEL expression.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@Value(\"#{systemProperties['user.region'}\") // Noncompliant, unclosed \"[\"\nprivate String region;\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\n@Value(\"#{'${listOfValues}' split(',')}\") // Noncompliant, missing operator\nprivate List&lt;String&gt; valuesList;\n</pre>\n<pre data-diff-id=\"3\" data-diff-type=\"noncompliant\">\n@Value(\"#{T(java.lang.Math).random() * 64h}\") // Noncompliant, invalid number\nprivate Double randPercent;\n</pre>\n<pre data-diff-id=\"4\" data-diff-type=\"noncompliant\">\n@Query(\"SELECT u FROM User u WHERE u.status = :#{#status+}\") // Noncompliant, missing operand for \"+\"\nList&lt;User&gt; findUsersByStatus(@Param(\"status\") String status);\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@Value(\"#{systemProperties['user.region']}\") // Compliant\nprivate String region;\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\n@Value(\"#{'${listOfValues}'.split(',')}\") // Compliant\nprivate List&lt;String&gt; valuesList;\n</pre>\n<pre data-diff-id=\"3\" data-diff-type=\"compliant\">\n@Value(\"#{T(java.lang.Math).random() * 100.0}\") // Compliant\nprivate Double randPercent;\n</pre>\n<pre data-diff-id=\"4\" data-diff-type=\"compliant\">\n@Query(\"SELECT u FROM User u WHERE u.status = :#{#status+42}\") // Compliant\nList&lt;User&gt; findUsersByStatus(@Param(\"status\") String status);\n</pre>"
                },
                {
                    "key": "introduction",
                    "content": "<p>This rule reports syntax errors in Spring Expression Language (SpEL) expressions.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S923",
            "repo": "java",
            "name": "Functions should not be defined with a variable number of arguments",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "INFO",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "1min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "1min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S923"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>As stated per effective java :</p>\n<blockquote>\n  <p>Varargs methods are a convenient way to define methods that require a variable number of arguments, but they should not be overused. They can\n  produce confusing results if used inappropriately.</p>\n</blockquote>\n<h3>Noncompliant code example</h3>\n<pre>\nvoid fun ( String... strings )\t// Noncompliant\n{\n  // ...\n}\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/display/java/DCL57-J.+Avoid+ambiguous+overloading+of+variable+arity+methods\">CERT, DCL57J</a> -\n  Avoid ambiguous overloading of variable arity methods </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "INFO"
                }
            ]
        },
        {
            "key": "java:S1160",
            "repo": "java",
            "name": "Public methods should throw at most one checked exception",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "error-handling"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1160"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Using checked exceptions forces method callers to deal with errors, either by propagating them or by handling them. Throwing exceptions makes them\nfully part of the API of the method.</p>\n<p>But to keep the complexity for callers reasonable, methods should not throw more than one kind of checked exception.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic void delete() throws IOException, SQLException {      // Noncompliant\n  /* ... */\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic void delete() throws SomeApplicationLevelException {\n  /* ... */\n}\n</pre>\n<h3>Exceptions</h3>\n<p>Overriding methods are not checked by this rule and are allowed to throw several checked exceptions.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "FOCUSED",
            "cleanCodeAttributeCategory": "ADAPTABLE",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S1161",
            "repo": "java",
            "name": "\"@Override\" should be used on overriding and implementing methods",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "bad-practice"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1161"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>While not mandatory, using the <code>@Override</code> annotation on compliant methods improves readability by making it explicit that methods are\noverridden.</p>\n<p>A compliant method either overrides a parent method or implements an interface or abstract method.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass ParentClass {\n  public boolean doSomething(){/*...*/}\n}\nclass FirstChildClass extends ParentClass {\n  public boolean doSomething(){/*...*/}  // Noncompliant\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass ParentClass {\n  public boolean doSomething(){/*...*/}\n}\nclass FirstChildClass extends ParentClass {\n  @Override\n  public boolean doSomething(){/*...*/}  // Compliant\n}\n</pre>\n<h3>Exceptions</h3>\n<p>This rule does not raise issues when overriding methods from <code>Object</code> (eg: <code>equals()</code>, <code>hashCode()</code>,\n<code>toString()</code>, …​).</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S1162",
            "repo": "java",
            "name": "Checked exceptions should not be thrown",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "error-handling"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "1h",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "1h",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1162"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>The purpose of checked exceptions is to ensure that errors will be dealt with, either by propagating them or by handling them, but some believe\nthat checked exceptions negatively impact the readability of source code, by spreading this error handling/propagation logic everywhere.</p>\n<p>This rule verifies that no method throws a new checked exception.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic void myMethod1() throws CheckedException {\n  ...\n  throw new CheckedException(message);   // Noncompliant\n  ...\n  throw new IllegalArgumentException(message); // Compliant; IllegalArgumentException is unchecked\n}\n\npublic void myMethod2() throws CheckedException {  // Compliant; propagation allowed\n  myMethod1();\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S1163",
            "repo": "java",
            "name": "Exceptions should not be thrown in finally blocks",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "error-handling",
                "cert",
                "suspicious"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "30min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "30min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1163"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/FTZGBQ\">CERT, ERR05-J.</a> - Do not let checked exceptions escape from a finally block </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>If an exception is already being thrown within the <code>try</code> block or caught in a <code>catch</code> block, throwing another exception in\nthe <code>finally</code> block will override the original exception. This means that the original exception’s message and stack trace will be lost,\npotentially making it challenging to diagnose and troubleshoot the root cause of the problem.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ntry {\n  /* some work which end up throwing an exception */\n  throw new IllegalArgumentException();\n} finally {\n  /* clean up */\n  throw new RuntimeException();       // Noncompliant; masks the IllegalArgumentException\n}\n</pre>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ntry {\n  /* some work which end up throwing an exception */\n  throw new IllegalArgumentException();\n} finally {\n  /* clean up */\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "COMPLETE",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S1165",
            "repo": "java",
            "name": "Exception classes should have final fields",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "error-handling"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1165"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>When a class has all <code>final</code> fields, the compiler ensures that the object’s state remains constant. It also enforces a clear design\nintent of immutability, making the class easier to reason about and use correctly.</p>\n<p>Exceptions are meant to represent the application’s state at the point at which an error occurred. Making all fields in an <code>Exception</code>\nclass <code>final</code> ensures that these class fields do not change after initialization.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class MyException extends Exception {\n\n  private int status;                        // Noncompliant\n\n  public MyException(String message) {\n    super(message);\n  }\n\n  public int getStatus() {\n    return status;\n  }\n\n  public void setStatus(int status) {\n    this.status = status;\n  }\n\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class MyException extends Exception {\n\n  private final int status;                  // Compliant\n\n  public MyException(String message, int status) {\n    super(message);\n    this.status = status;\n  }\n\n  public int getStatus() {\n    return status;\n  }\n\n}\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> Effective Java 3rd Edition, Joshua Bloch - Exceptions - Item 76 : Strive for failure atomicity </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S1166",
            "repo": "java",
            "name": "Exception handlers should preserve the original exceptions",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "error-handling",
                "cert",
                "suspicious"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "exceptions",
                    "htmlDesc": "List of exceptions which should not be checked. Use a simple dash ('-') character to check all exceptions.",
                    "defaultValue": "java.lang.InterruptedException, java.lang.NumberFormatException, java.lang.NoSuchMethodException, java.text.ParseException, java.net.MalformedURLException, java.time.format.DateTimeParseException",
                    "type": "STRING"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1166"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>When handling a caught exception, the original exception’s message and stack trace should be logged or passed forward.</p>\n<h3>Noncompliant code example</h3>\n<pre>\ntry {\n  /* ... */\n} catch (Exception e) {   // Noncompliant - exception is lost\n  LOGGER.info(\"context\");\n}\n\ntry {\n  /* ... */\n} catch (Exception e) {  // Noncompliant - exception is lost (only message is preserved)\n  LOGGER.info(e.getMessage());\n}\n\ntry {\n  /* ... */\n} catch (Exception e) {  // Noncompliant - original exception is lost\n  throw new RuntimeException(\"context\");\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\ntry {\n  /* ... */\n} catch (Exception e) {\n  LOGGER.info(e);  // exception is logged\n}\n\ntry {\n  /* ... */\n} catch (Exception e) {\n  throw new RuntimeException(e);   // exception stack trace is propagated\n}\n\ntry {\n  /* ... */\n} catch (RuntimeException e) {\n  doSomething();\n  throw e;  // original exception passed forward\n} catch (Exception e) {\n  throw new RuntimeException(e);  // Conversion into unchecked exception is also allowed\n}\n</pre>\n<h3>Exceptions</h3>\n<p><code>InterruptedException</code>, <code>NumberFormatException</code>, <code>DateTimeParseException</code>, <code>ParseException</code> and\n<code>MalformedURLException</code> exceptions are arguably used to indicate nonexceptional outcomes. Similarly, handling\n<code>NoSuchMethodException</code> is often required when dealing with the Java reflection API.</p>\n<p>Because they are part of Java, developers have no choice but to deal with them. This rule does not verify that those particular exceptions are\ncorrectly handled.</p>\n<pre>\nint myInteger;\ntry {\n  myInteger = Integer.parseInt(myString);\n} catch (NumberFormatException e) {\n  // It is perfectly acceptable to not handle \"e\" here\n  myInteger = 0;\n}\n</pre>\n<p>Furthermore, no issue will be raised if the exception message is logged with additional information, as it shows that the developer added some\ncontext to the error message.</p>\n<pre>\ntry {\n  /* ... */\n} catch (Exception e) {\n  String message = \"Exception raised while authenticating user: \" + e.getMessage();\n  LOGGER.warn(message); // Compliant - exception message logged with some contextual information\n}\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/\">Top 10 2021 Category A9 - Security Logging and\n  Monitoring Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A10_2017-Insufficient_Logging%2526Monitoring\">Top 10 2017 Category A10 -\n  Insufficient Logging &amp; Monitoring</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/xDdGBQ\">CERT, ERR00-J.</a> - Do not suppress or ignore checked exceptions </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/778\">CWE-778 - Insufficient Logging</a> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S2130",
            "repo": "java",
            "name": "Parsing should be used to convert \"Strings\" to primitives",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "performance"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2130"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Rather than creating a boxed primitive from a <code>String</code> to extract the primitive value, use the relevant <code>parse</code> method\ninstead. Using <code>parse</code> makes the code more efficient and the intent of the developer clearer.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nString myNum = \"42.0\";\nfloat myFloat = new Float(myNum);  // Noncompliant\nfloat myFloatValue = (new Float(myNum)).floatValue();  // Noncompliant\nint myInteger = Integer.valueOf(myNum); // Noncompliant\nint myIntegerValue = Integer.valueOf(myNum).intValue(); // Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nString myNum = \"42.0\";\nfloat f = Float.parseFloat(myNum);\nint myInteger = Integer.parseInt(myNum);\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S2131",
            "repo": "java",
            "name": "Primitives should not be boxed just for \"String\" conversion",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "DEPRECATED",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2131"
                ]
            },
            "descriptionSections": [
                {
                    "key": "introduction",
                    "content": "<p>This rule is deprecated; use <a href='/coding_rules#rule_key=java%3AS1158'>S1158</a> instead.</p>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>\"Boxing\" is the process of putting a primitive value into a primitive-wrapper object. When that’s done purely to use the wrapper class'\n<code>toString</code> method, it’s a waste of memory and cycles because those methods are <code>static</code>, and can therefore be used without a\nclass instance. Similarly, using the <code>static</code> method <code>valueOf</code> in the primitive-wrapper classes with a non-<code>String</code>\nargument should be avoided.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nint myInt = 4;\nString myIntString = (new Integer(myInt)).toString(); // Noncompliant; creates &amp; discards an Integer object\nmyIntString = Integer.valueOf(myInt).toString(); // Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nint myInt = 4;\nString myIntString = Integer.toString(myInt);\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S2134",
            "repo": "java",
            "name": "Classes extending java.lang.Thread should provide a specific \"run\" behavior",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "multi-threading",
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2134"
                ]
            },
            "descriptionSections": [
                {
                    "key": "how_to_fix",
                    "content": "<p>To fix this issue, you have 2 options:</p>\n<ul>\n  <li> override the <code>run</code> method </li>\n</ul>\n<pre>\npublic class MyThread extends Thread {\n  @Override\n  public void run() {\n    System.out.println(\"Hello, World!\");\n  }\n}\n</pre>\n<ul>\n  <li> provide a <code>Runnable</code> at construction time </li>\n</ul>\n<pre>\npublic class MyRunnable implements Runnable {\n  @Override\n  public void run() {\n    System.out.println(\"Hello, World!\");\n  }\n}\npublic class MyThread extends Thread {\n  public MyThread(Runnable runnable) {\n    super(runnable);\n  }\n}\n\npublic class Main() {\n  public static void main(String [] args) {\n    Runnable runnable = new MyRunnable();\n    Thread customThread = new MyThread(runnable);\n    Thread regularThread = new Thread(runnable);\n  }\n}\n</pre>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>The default implementation of <code>java.lang.Thread</code> 's <code>run</code> will only perform a task passed as a <code>Runnable</code>. If no\n<code>Runnable</code> has been provided at construction time, then the thread will not perform any action.</p>\n<p>When extending <code>java.lang.Thread</code>, you should override the <code>run</code> method or pass a <code>Runnable</code> target to the\nconstructor of <code>java.lang.Thread</code>.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class MyThread extends Thread { // Noncompliant\n  public void doSomething() {\n    System.out.println(\"Hello, World!\");\n  }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "COMPLETE",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S2139",
            "repo": "java",
            "name": "Exceptions should be either logged or rethrown but not both",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "error-handling",
                "logging"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2139"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>In applications where the accepted practice is to log an <code>Exception</code> and then rethrow it, you end up with miles-long logs that contain\nmultiple instances of the same exception. In multi-threaded applications debugging this type of log can be particularly hellish because messages from\nother threads will be interwoven with the repetitions of the logged-and-thrown <code>Exception</code>. Instead, exceptions should be either logged or\nrethrown, not both.</p>\n<h3>Noncompliant code example</h3>\n<pre>\ncatch (SQLException e) {\n  ...\n  LOGGER.log(Level.ERROR,  contextInfo, e);\n  throw new MySQLException(contextInfo, e);\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\ncatch (SQLException e) {\n  ...\n  throw new MySQLException(contextInfo, e);\n}\n</pre>\n<p>or</p>\n<pre>\ncatch (SQLException e) {\n  ...\n  LOGGER.log(Level.ERROR,  contextInfo, e);\n  // handle exception...\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "DISTINCT",
            "cleanCodeAttributeCategory": "ADAPTABLE",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S2250",
            "repo": "java",
            "name": "Collection methods with O(n) performance should be used carefully",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "performance"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2250"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>The time complexity of method calls on collections is not always obvious. For instance, for most collections the <code>size()</code> method takes\nconstant time, but the time required to execute <code>ConcurrentLinkedQueue.size()</code> is O(n), i.e. directly proportional to the number of\nelements in the collection. When the collection is large, this could therefore be an expensive operation.</p>\n<p>This rule raises an issue when the following O(n) methods are called outside of constructors on class fields:</p>\n<ul>\n  <li> <code>ArrayList</code>\n    <ul>\n      <li> <code>contains</code> </li>\n      <li> <code>remove</code> </li>\n    </ul>  </li>\n  <li> <code>LinkedList</code>\n    <ul>\n      <li> <code>get</code> </li>\n      <li> <code>contains</code> </li>\n    </ul>  </li>\n  <li> <code>ConcurrentLinkedQueue</code>\n    <ul>\n      <li> <code>size</code> </li>\n      <li> <code>contains</code> </li>\n    </ul>  </li>\n  <li> <code>ConcurrentLinkedDeque</code>\n    <ul>\n      <li> <code>size</code> </li>\n      <li> <code>contains</code> </li>\n    </ul>  </li>\n  <li> <code>CopyOnWriteArrayList</code>\n    <ul>\n      <li> <code>add</code> </li>\n      <li> <code>contains</code> </li>\n      <li> <code>remove</code> </li>\n    </ul>  </li>\n  <li> <code>CopyOnWriteArraySet</code>\n    <ul>\n      <li> <code>add</code> </li>\n      <li> <code>contains</code> </li>\n      <li> <code>remove</code> </li>\n    </ul>  </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<pre>\nConcurrentLinkedQueue queue = new ConcurrentLinkedQueue();\n//...\nlog.info(\"Queue contains \" + queue.size() + \" elements\");  // Noncompliant\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "EFFICIENT",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S2251",
            "repo": "java",
            "name": "A \"for\" loop update clause should move the counter in the right direction",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2251"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>A <code>for</code> loop with a counter moving away from the end of the specified range is likely a programming mistake.</p>\n<p>If the intention is to iterate over the specified range, this differs from what the loop does because the counter moves in the wrong direction.</p>\n<p>If the intention is to have an infinite loop or a loop terminated only by a break statement, there are two problems:</p>\n<ol>\n  <li> The loop condition is not infinite because the counter variable will eventually overflow and fulfill the condition. This can take a long time,\n  depending on the data type of the counter. </li>\n  <li> An infinite loop terminated by a <code>break</code> statement should be implemented using a <code>while</code> or <code>do</code>\n  <code>while</code> loop to make the developer’s intention clear to the reader. </li>\n</ol>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<h4>Noncompliant code example</h4>\n<p>Change the direction of the counter.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfor (int i = 10; i &gt; 0; i++) { // Noncompliant, wrong direction\n  System.out.println(\"Hello, world!\") // executed ca. 2 billion times\n}\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\npublic void doSomething(String [] strings) {\n  for (int i = 0; i &lt; strings.length; i--) { // Noncompliant, wrong direction\n    String string = strings[i];  // ArrayIndexOutOfBoundsException when i reaches -1\n    // ...\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfor (int i = 10; i &gt; 0; i--) { // Compliant\n  System.out.println(\"Hello, world!\") // executed 10 times\n}\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\npublic void doSomething(String [] strings) {\n  for (int i = 0; i &lt; strings.length; i++) { // Compliant\n    String string = strings[i];\n    // ...\n  }\n}\n</pre>\n<h4>Noncompliant code example</h4>\n<p>If the intention is to have an infinite loop or a loop terminated only by a break statement, use a <code>while</code> or a <code>do</code>\n<code>while</code> statement instead.</p>\n<pre data-diff-id=\"3\" data-diff-type=\"noncompliant\">\nfor (int i = 0; i &lt; 0; i++) { // Noncompliant, loop is not infinite\n  String event = waitForNextEvent();\n  if (event == \"terminate\") break;\n  processEvent(event);\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"3\" data-diff-type=\"compliant\">\nwhile (true) { // Compliant\n  String event = waitForNextEvent();\n  if (event == \"terminate\") break;\n  processEvent(event);\n}\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/aTdGBQ\">CERT, MSC54-J.</a> - Avoid inadvertent wrapping of loop counters </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Integer_overflow\">Wikipedia - Integer overflow</a> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S2252",
            "repo": "java",
            "name": "Loop conditions should be true at least once",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2252"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> Java Documentation - <a href=\"https://docs.oracle.com/javase/tutorial/java/nutsandbolts/for.html\">The <code>for</code> statement</a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>A <a href=\"https://docs.oracle.com/javase/tutorial/java/nutsandbolts/for.html\"><code>for</code></a> loop is a fundamental programming construct\nused to execute a block of code repeatedly. However, if the loop’s condition is false before the first iteration, the loop will never execute.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfor (int i = 0; i &lt; 0; i++) {  // Noncompliant: the condition is always false, and the loop will never execute\n    // ...\n}\n</pre>\n<p>Rewrite the loop to ensure the condition evaluates to <code>true</code> at least once.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfor (int i = 0; i &lt; 10; i++) {  // Compliant: the condition is true at least once, the loop will execute\n    // ...\n}\n</pre>\n<p>This bug has the potential to cause unexpected outcomes as the loop might contain critical code that needs to be executed.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S2253",
            "repo": "java",
            "name": "Track uses of disallowed methods",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": true,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "methodName",
                    "htmlDesc": "Name of the forbidden method",
                    "type": "STRING"
                },
                {
                    "key": "className",
                    "htmlDesc": "Name of the class whose method is forbidden",
                    "type": "STRING"
                },
                {
                    "key": "argumentTypes",
                    "htmlDesc": "Comma-delimited list of argument types, E.G. java.lang.String, int[], int",
                    "type": "STRING"
                },
                {
                    "key": "allOverloads",
                    "htmlDesc": "Set to true to flag all overloads regardless of parameter type",
                    "defaultValue": "false",
                    "type": "BOOLEAN"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "0min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "0min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2253"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>This rule allows banning certain methods.</p>\n<h3>Noncompliant code example</h3>\n<p>Given parameters:</p>\n<ul>\n  <li> className:java.lang.String </li>\n  <li> methodName: replace </li>\n  <li> argumentTypes: java.lang.CharSequence, java.lang.CharSequence </li>\n</ul>\n<pre>\nString name;\nname.replace(\"A\",\"a\");  // Noncompliant\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S4433",
            "repo": "java",
            "name": "LDAP connections should be authenticated",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "VULNERABILITY",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S4433"
                ]
            },
            "descriptionSections": [
                {
                    "key": "introduction",
                    "content": "<p>Lightweight Directory Access Protocol (LDAP) servers provide two main authentication methods: the <em>SASL</em> and <em>Simple</em> ones. The\n<em>Simple Authentication</em> method also breaks down into three different mechanisms:</p>\n<ul>\n  <li> <em>Anonymous</em> Authentication </li>\n  <li> <em>Unauthenticated</em> Authentication </li>\n  <li> <em>Name/Password</em> Authentication </li>\n</ul>\n<p>A server that accepts either the <em>Anonymous</em> or <em>Unauthenticated</em> mechanisms will accept connections from clients not providing\ncredentials.</p>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://datatracker.ietf.org/doc/html/rfc4513#section-5\">RFC 4513 - Lightweight Directory Access Protocol (LDAP): Authentication\n  Methods and Security Mechanisms</a> - Bind operations </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\">Top 10 2021 Category A7 - Identification and\n  Authentication Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication\">Top 10 2017 Category A2 - Broken Authentication</a>\n  </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/521\">CWE-521 - Weak Password Requirements</a> </li>\n</ul>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>The following code indicates an anonymous LDAP authentication vulnerability because it binds to a remote server using an Anonymous Simple\nauthentication mechanism.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n// Set up the environment for creating the initial context\nHashtable&lt;String, Object&gt; env = new Hashtable&lt;String, Object&gt;();\nenv.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\nenv.put(Context.PROVIDER_URL, \"ldap://localhost:389/o=JNDITutorial\");\n\n// Use anonymous authentication\nenv.put(Context.SECURITY_AUTHENTICATION, \"none\"); // Noncompliant\n\n// Create the initial context\nDirContext ctx = new InitialDirContext(env);\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n// Set up the environment for creating the initial context\nHashtable&lt;String, Object&gt; env = new Hashtable&lt;String, Object&gt;();\nenv.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\nenv.put(Context.PROVIDER_URL, \"ldap://localhost:389/o=Example\");\n\n// Use simple authentication\nenv.put(Context.SECURITY_AUTHENTICATION, \"simple\");\nenv.put(Context.SECURITY_PRINCIPAL, \"cn=local, ou=Unit, o=Example\");\nenv.put(Context.SECURITY_CREDENTIALS, getLDAPPassword());\n\n// Create the initial context\nDirContext ctx = new InitialDirContext(env);\n</pre>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>When configured to accept the Anonymous or Unauthenticated authentication mechanism, an LDAP server will accept connections from clients that do\nnot provide a password or other authentication credentials. Such users will be able to read or modify part or all of the data contained in the hosted\ndirectory.</p>\n<h3>What is the potential impact?</h3>\n<p>An attacker exploiting unauthenticated access to an LDAP server can access the data that is stored in the corresponding directory. The impact\nvaries depending on the permission obtained on the directory and the type of data it stores.</p>\n<h4>Authentication bypass</h4>\n<p>If attackers get write access to the directory, they will be able to alter most of the data it stores. This might include sensitive technical data\nsuch as user passwords or asset configurations. Such an attack can typically lead to an authentication bypass on applications and systems that use the\naffected directory as an identity provider.</p>\n<p>In such a case, all users configured in the directory might see their identity and privileges taken over.</p>\n<h4>Sensitive information leak</h4>\n<p>If attackers get read-only access to the directory, they will be able to read the data it stores. That data might include security-sensitive pieces\nof information.</p>\n<p>Typically, attackers might get access to user account lists that they can use in further intrusion steps. For example, they could use such lists to\nperform password spraying, or related attacks, on all systems that rely on the affected directory as an identity provider.</p>\n<p>If the directory contains some Personally Identifiable Information, an attacker accessing it might represent a violation of regulatory requirements\nin some countries. For example, this kind of security event would go against the European GDPR law.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "COMPLETE",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "SECURITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S4551",
            "repo": "java",
            "name": "Enum values should be compared with \"==\"",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S4551"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://www.infoworld.com/article/2074292/use-----or-----to-compare-java-enums.html\">Use == (or !=) to Compare Java Enums</a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Testing equality of an enum value with <code>equals</code> is perfectly valid because an enum is an Object and every Java developer knows \"==\"\nshould not be used to compare the content of an Object. At the same time, using \"==\" on enums:</p>\n<ul>\n  <li> provides the same expected comparison (content) as <code>equals</code> </li>\n  <li> is more null-safe than equals() </li>\n  <li> provides compile-time (static) checking rather than runtime checking </li>\n</ul>\n<p>For these reasons, use of \"==\" should be preferred to <code>equals</code>.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic enum Fruit {\n   APPLE, BANANA, GRAPE\n}\n\npublic enum Cake {\n  LEMON_TART, CHEESE_CAKE\n}\n\npublic boolean isFruitGrape(Fruit candidateFruit) {\n  return candidateFruit.equals(Fruit.GRAPE); // Noncompliant; this will raise an NPE if candidateFruit is NULL\n}\n\npublic boolean isFruitGrape(Cake candidateFruit) {\n  return candidateFruit.equals(Fruit.GRAPE); // Noncompliant; always returns false\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic boolean isFruitGrape(Fruit candidateFruit) {\n  return candidateFruit == Fruit.GRAPE; // Compliant; there is only one instance of Fruit.GRAPE - if candidateFruit is a GRAPE it will have the same reference as Fruit.GRAPE\n}\n\npublic boolean isFruitGrape(Cake candidateFruit) {\n  return candidateFruit == Fruit.GRAPE; // Compliant; compilation time failure\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S4790",
            "repo": "java",
            "name": "Using weak hashing algorithms is security-sensitive",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "type": "SECURITY_HOTSPOT",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S4790"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Cryptographic hash algorithms such as <code>MD2</code>, <code>MD4</code>, <code>MD5</code>, <code>MD6</code>, <code>HAVAL-128</code>,\n<code>HMAC-MD5</code>, <code>DSA</code> (which uses <code>SHA-1</code>), <code>RIPEMD</code>, <code>RIPEMD-128</code>, <code>RIPEMD-160</code>,\n<code>HMACRIPEMD160</code> and <code>SHA-1</code> are no longer considered secure, because it is possible to have <code>collisions</code> (little\ncomputational effort is enough to find two or more different inputs that produce the same hash).</p>\n"
                },
                {
                    "key": "how_to_fix",
                    "content": "<h2>Recommended Secure Coding Practices</h2>\n<p>Safer alternatives, such as <code>SHA-256</code>, <code>SHA-512</code>, <code>SHA-3</code> are recommended, and for password hashing, it’s even\nbetter to use algorithms that do not compute too \"quickly\", like <code>bcrypt</code>, <code>scrypt</code>, <code>argon2</code> or <code>pbkdf2</code>\nbecause it slows down <code>brute force attacks</code>.</p>\n<h2>Compliant Solution</h2>\n<pre>\nMessageDigest md1 = MessageDigest.getInstance(\"SHA-512\"); // Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">Top 10 2021 Category A2 - Cryptographic Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://mas.owasp.org/checklists/MASVS-CRYPTO/\">Mobile AppSec Verification Standard - Cryptography Requirements</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2016-risks/m5-insufficient-cryptography\">Mobile Top 10 2016 Category M5 -\n  Insufficient Cryptography</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/1240\">CWE-1240 - Use of a Risky Cryptographic Primitive</a> </li>\n</ul>"
                },
                {
                    "key": "default",
                    "content": "<p>Cryptographic hash algorithms such as <code>MD2</code>, <code>MD4</code>, <code>MD5</code>, <code>MD6</code>, <code>HAVAL-128</code>,\n<code>HMAC-MD5</code>, <code>DSA</code> (which uses <code>SHA-1</code>), <code>RIPEMD</code>, <code>RIPEMD-128</code>, <code>RIPEMD-160</code>,\n<code>HMACRIPEMD160</code> and <code>SHA-1</code> are no longer considered secure, because it is possible to have <code>collisions</code> (little\ncomputational effort is enough to find two or more different inputs that produce the same hash).</p>\n<h2>Ask Yourself Whether</h2>\n<p>The hashed value is used in a security context like:</p>\n<ul>\n  <li> User-password storage. </li>\n  <li> Security token generation (used to confirm e-mail when registering on a website, reset password, etc …​). </li>\n  <li> To compute some message integrity. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Safer alternatives, such as <code>SHA-256</code>, <code>SHA-512</code>, <code>SHA-3</code> are recommended, and for password hashing, it’s even\nbetter to use algorithms that do not compute too \"quickly\", like <code>bcrypt</code>, <code>scrypt</code>, <code>argon2</code> or <code>pbkdf2</code>\nbecause it slows down <code>brute force attacks</code>.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\nMessageDigest md1 = MessageDigest.getInstance(\"SHA\");  // Sensitive:  SHA is not a standard name, for most security providers it's an alias of SHA-1\nMessageDigest md2 = MessageDigest.getInstance(\"SHA1\");  // Sensitive\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nMessageDigest md1 = MessageDigest.getInstance(\"SHA-512\"); // Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">Top 10 2021 Category A2 - Cryptographic Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://mas.owasp.org/checklists/MASVS-CRYPTO/\">Mobile AppSec Verification Standard - Cryptography Requirements</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2016-risks/m5-insufficient-cryptography\">Mobile Top 10 2016 Category M5 -\n  Insufficient Cryptography</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/1240\">CWE-1240 - Use of a Risky Cryptographic Primitive</a> </li>\n</ul>"
                },
                {
                    "key": "assess_the_problem",
                    "content": "<h2>Ask Yourself Whether</h2>\n<p>The hashed value is used in a security context like:</p>\n<ul>\n  <li> User-password storage. </li>\n  <li> Security token generation (used to confirm e-mail when registering on a website, reset password, etc …​). </li>\n  <li> To compute some message integrity. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\nMessageDigest md1 = MessageDigest.getInstance(\"SHA\");  // Sensitive:  SHA is not a standard name, for most security providers it's an alias of SHA-1\nMessageDigest md2 = MessageDigest.getInstance(\"SHA1\");  // Sensitive\n</pre>\n"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "impacts": []
        },
        {
            "key": "java:S5527",
            "repo": "java",
            "name": "Server hostnames should be verified during SSL/TLS connections",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "privacy",
                "ssl"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "VULNERABILITY",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5527"
                ]
            },
            "descriptionSections": [
                {
                    "key": "how_to_fix",
                    "content": "<p>The following code contains examples of disabled hostname validation.</p>\n<p>The hostname validation gets disabled because <code>mail.smtp.ssl.checkserveridentity</code> is omitted. To enable validation, set it to\n<code>true</code>.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"noncompliant\">\nimport java.util.Properties;\n\npublic Properties prepareEmailConnection() {\n    Properties props = new Properties();\n\n    props.put(\"mail.smtp.host\", \"smtp.gmail.com\");\n    props.put(\"mail.smtp.socketFactory.port\", \"465\");\n    props.put(\"mail.smtp.socketFactory.class\", \"javax.net.ssl.SSLSocketFactory\"); // Noncompliant\n    props.put(\"mail.smtp.auth\", \"true\");\n    props.put(\"mail.smtp.port\", \"465\");\n\n    return props;\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"compliant\">\nimport java.util.Properties;\n\npublic Properties prepareEmailConnection() {\n    Properties props = new Properties();\n\n    props.put(\"mail.smtp.host\", \"smtp.gmail.com\");\n    props.put(\"mail.smtp.socketFactory.port\", \"465\");\n    props.put(\"mail.smtp.ssl.checkserveridentity\", true);\n    props.put(\"mail.smtp.socketFactory.class\", \"javax.net.ssl.SSLSocketFactory\");\n    props.put(\"mail.smtp.auth\", \"true\");\n    props.put(\"mail.smtp.port\", \"465\");\n\n    return props;\n}\n</pre>\n<h3>How does this work?</h3>\n<p>To fix the vulnerability of disabled hostname validation, it is strongly recommended to first re-enable the default validation and fix the root\ncause: the validity of the certificate.</p>\n<h4>Use valid certificates</h4>\n<p>If a hostname validation failure prevents connecting to the target server, keep in mind that <strong>one system’s code should not work around\nanother system’s problems</strong>, as this creates unnecessary dependencies and can lead to reliability issues.</p>\n<p>Therefore, the first solution is to change the remote host’s certificate to match its identity. If the remote host is not under your control,\nconsider replicating its service to a server whose certificate you can change yourself.</p>\n<p>In case the contacted host is located on a development machine, and if there is no other choice, try following this solution:</p>\n<ul>\n  <li> Create a self-signed certificate for that machine. </li>\n  <li> Add this self-signed certificate to the system’s trust store. </li>\n  <li> If the hostname is not <code>localhost</code>, add the hostname in the <code>/etc/hosts</code> file. </li>\n</ul>\n<p>Here is a sample command to import a certificate to the Java trust store:</p>\n<pre>\nkeytool -import -alias myserver -file myserver.crt -keystore cacerts\n</pre>",
                    "context": {
                        "displayName": "Java EE",
                        "key": "java_ee"
                    }
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>The following code contains examples of disabled hostname validation.</p>\n<p>The hostname validation gets disabled because <code>setSSLCheckServerIdentity</code> is omitted. To enable validation, set it to\n<code>true</code>.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport org.apache.commons.mail.DefaultAuthenticator;\nimport org.apache.commons.mail.Email;\nimport org.apache.commons.mail.SimpleEmail;\n\npublic void sendMail(String message) {\n    Email email = new SimpleEmail();\n\n    email.setMsg(message);\n    email.setSmtpPort(465);\n    email.setAuthenticator(new DefaultAuthenticator(username, password));\n    email.setSSLOnConnect(true); // Noncompliant\n\n    email.send();\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport org.apache.commons.mail.DefaultAuthenticator;\nimport org.apache.commons.mail.Email;\nimport org.apache.commons.mail.SimpleEmail;\n\npublic void sendMail(String message) {\n    Email email = new SimpleEmail();\n\n    email.setMsg(message);\n    email.setSmtpPort(465);\n    email.setAuthenticator(new DefaultAuthenticator(username, password));\n    email.setSSLCheckServerIdentity(true);\n    email.setSSLOnConnect(true);\n\n    email.send();\n}\n</pre>\n<h3>How does this work?</h3>\n<p>To fix the vulnerability of disabled hostname validation, it is strongly recommended to first re-enable the default validation and fix the root\ncause: the validity of the certificate.</p>\n<h4>Use valid certificates</h4>\n<p>If a hostname validation failure prevents connecting to the target server, keep in mind that <strong>one system’s code should not work around\nanother system’s problems</strong>, as this creates unnecessary dependencies and can lead to reliability issues.</p>\n<p>Therefore, the first solution is to change the remote host’s certificate to match its identity. If the remote host is not under your control,\nconsider replicating its service to a server whose certificate you can change yourself.</p>\n<p>In case the contacted host is located on a development machine, and if there is no other choice, try following this solution:</p>\n<ul>\n  <li> Create a self-signed certificate for that machine. </li>\n  <li> Add this self-signed certificate to the system’s trust store. </li>\n  <li> If the hostname is not <code>localhost</code>, add the hostname in the <code>/etc/hosts</code> file. </li>\n</ul>\n<p>Here is a sample command to import a certificate to the Java trust store:</p>\n<pre>\nkeytool -import -alias myserver -file myserver.crt -keystore cacerts\n</pre>",
                    "context": {
                        "displayName": "Apache Commons Email",
                        "key": "apache_commons_email"
                    }
                },
                {
                    "key": "resources",
                    "content": "<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">Top 10 2021 Category A2 - Cryptographic Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">Top 10 2021 Category A5 - Security Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\">Top 10 2021 Category A7 - Identification and\n  Authentication Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://mas.owasp.org/checklists/MASVS-NETWORK/\">Mobile AppSec Verification Standard - Network Communication Requirements</a>\n  </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2016-risks/m3-insecure-communication\">Mobile Top 10 2016 Category M3 - Insecure\n  Communication</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/297\">CWE-297 - Improper Validation of Certificate with Host Mismatch</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222550\">Application Security and\n  Development: V-222550</a> - The application must validate certificates by constructing a certification path to an accepted trust anchor. </li>\n  <li> <a\n  href=\"https://wiki.sei.cmu.edu/confluence/display/java/MSC61-J.+Do+not+use+insecure+or+weak+cryptographic+algorithms\">https://wiki.sei.cmu.edu/confluence/display/java/MSC61-J.+Do+not+use+insecure+or+weak+cryptographic+algorithms</a> </li>\n</ul>"
                },
                {
                    "key": "introduction",
                    "content": "<p>This vulnerability allows attackers to impersonate a trusted host.</p>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Transport Layer Security (TLS) provides secure communication between systems over the internet by encrypting the data sent between them. In this\nprocess, the role of hostname validation, combined with certificate validation, is to ensure that a system is indeed the one it claims to be, adding\nan extra layer of trust and security.</p>\n<p>When hostname validation is disabled, the client skips this critical check. This creates an opportunity for attackers to pose as a trusted entity\nand intercept, manipulate, or steal the data being transmitted.</p>\n<p>To do so, an attacker would obtain a valid certificate authenticating <code>example.com</code>, serve it using a different hostname, and the\napplication code would still accept it.</p>\n<h3>What is the potential impact?</h3>\n<p>Establishing trust in a secure way is a non-trivial task. When you disable hostname validation, you are removing a key mechanism designed to build\nthis trust in internet communication, opening your system up to a number of potential threats.</p>\n<h4>Identity spoofing</h4>\n<p>If a system does not validate hostnames, it cannot confirm the identity of the other party involved in the communication. An attacker can exploit\nthis by creating a fake server and masquerading it as a legitimate one. For example, they might set up a server that looks like your bank’s server,\ntricking your system into thinking it is communicating with the bank. This scenario, called identity spoofing, allows the attacker to collect any data\nyour system sends to them, potentially leading to significant data breaches.</p>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>The following code contains examples of disabled hostname validation.</p>\n<p>The hostname validation gets disabled by overriding <code>javax.net.ssl.HostnameVerifier.verify()</code> with an empty implementation. It is highly\nrecommended to use the original implementation.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"21\" data-diff-type=\"noncompliant\">\nimport java.io.InputStream;\nimport java.net.URL;\nimport javax.net.ssl.HttpsURLConnection;\nimport javax.net.ssl.SSLSession;\nimport javax.net.ssl.HostnameVerifier;\n\npublic InputStream doRequest() {\n    URL url                          = new URL(\"https://example.org/\");\n    HttpsURLConnection urlConnection = (HttpsURLConnection)url.openConnection();\n\n    urlConnection.setHostnameVerifier(new HostnameVerifier() {\n      @Override\n      public boolean verify(String requestedHost, SSLSession remoteServerSession) {\n        return true;  // Noncompliant\n      }\n    });\n\n    return urlConnection.getInputStream();\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"21\" data-diff-type=\"compliant\">\nimport java.io.InputStream;\nimport java.net.URL;\nimport javax.net.ssl.HttpsURLConnection;\nimport javax.net.ssl.SSLSession;\n\npublic InputStream doRequest() {\n    URL url                          = new URL(\"https://example.org/\");\n    HttpsURLConnection urlConnection = (HttpsURLConnection)url.openConnection();\n\n    return urlConnection.getInputStream();\n}\n</pre>\n<h3>How does this work?</h3>\n<p>To fix the vulnerability of disabled hostname validation, it is strongly recommended to first re-enable the default validation and fix the root\ncause: the validity of the certificate.</p>\n<h4>Use valid certificates</h4>\n<p>If a hostname validation failure prevents connecting to the target server, keep in mind that <strong>one system’s code should not work around\nanother system’s problems</strong>, as this creates unnecessary dependencies and can lead to reliability issues.</p>\n<p>Therefore, the first solution is to change the remote host’s certificate to match its identity. If the remote host is not under your control,\nconsider replicating its service to a server whose certificate you can change yourself.</p>\n<p>In case the contacted host is located on a development machine, and if there is no other choice, try following this solution:</p>\n<ul>\n  <li> Create a self-signed certificate for that machine. </li>\n  <li> Add this self-signed certificate to the system’s trust store. </li>\n  <li> If the hostname is not <code>localhost</code>, add the hostname in the <code>/etc/hosts</code> file. </li>\n</ul>\n<p>Here is a sample command to import a certificate to the Java trust store:</p>\n<pre>\nkeytool -import -alias myserver -file myserver.crt -keystore cacerts\n</pre>",
                    "context": {
                        "displayName": "Java SE",
                        "key": "java_se"
                    }
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "COMPLETE",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "SECURITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S818",
            "repo": "java",
            "name": "Literal suffixes should be upper case",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "convention",
                "cert",
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "checkOnlyLong",
                    "htmlDesc": "Set to &quot;true&quot; to ignore &quot;float&quot; and &quot;double&quot; declarations.",
                    "defaultValue": "false",
                    "type": "BOOLEAN"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S818"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Using upper case literal suffixes removes the potential ambiguity between \"1\" (digit 1) and \"l\" (letter el) for declaring literals.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nlong long1 = 1l; // Noncompliant\nfloat float1 = 1.0f; // Noncompliant\ndouble double1 = 1.0d; // Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nlong long1 = 1L;\nfloat float1 = 1.0F;\ndouble double1 = 1.0D;\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/cdYxBQ\">CERT DCL16-C.</a> - Use \"L,\" not \"l,\" to indicate a long value </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/7DZGBQ\">CERT, DCL50-J.</a> - Use visually distinct identifiers </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "IDENTIFIABLE",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S1301",
            "repo": "java",
            "name": "\"switch\" statements should have at least 3 \"case\" clauses",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "bad-practice"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1301"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p><code>switch</code> statements are useful when there are many different cases depending on the value of the same expression.</p>\n<p>For just one or two cases, however, the code will be more readable with <code>if</code> statements.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nswitch (variable) {\n  case 0:\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nif (variable == 0) {\n  doSomething();\n} else {\n  doSomethingElse();\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S1309",
            "repo": "java",
            "name": "Track uses of \"@SuppressWarnings\" annotations",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "INFO",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "listOfWarnings",
                    "htmlDesc": "Comma separated list of warnings that can be suppressed (example: unchecked, cast, boxing). An empty list means that no warning can be suppressed.",
                    "type": "STRING"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1309"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>This rule allows you to track the usage of the <code>@SuppressWarnings</code> mechanism.</p>\n<h3>Noncompliant code example</h3>\n<p>With a parameter value of \"unused\" :</p>\n<pre>\n@SuppressWarnings(\"unused\")\n@SuppressWarnings(\"unchecked\")  // Noncompliant\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "INFO"
                }
            ]
        },
        {
            "key": "java:S1541",
            "repo": "java",
            "name": "Methods should not be too complex",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "brain-overload"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "Threshold",
                    "htmlDesc": "The maximum authorized complexity.",
                    "defaultValue": "10",
                    "type": "INTEGER"
                }
            ],
            "defaultDebtRemFnType": "LINEAR_OFFSET",
            "debtRemFnType": "LINEAR_OFFSET",
            "type": "CODE_SMELL",
            "defaultRemFnType": "LINEAR_OFFSET",
            "defaultRemFnGapMultiplier": "1min",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "LINEAR_OFFSET",
            "remFnGapMultiplier": "1min",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "gapDescription": "per complexity point above the threshold",
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:MethodCyclomaticComplexity"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>The cyclomatic complexity of methods should not exceed a defined threshold.</p>\n<p>Complex code can perform poorly and will in any case be difficult to understand and therefore to maintain.</p>\n<h3>Exceptions</h3>\n<p>While having a large number of fields in a class may indicate that it should be split, this rule nonetheless ignores high complexity in\n<code>equals</code> and <code>hashCode</code> methods.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "FOCUSED",
            "cleanCodeAttributeCategory": "ADAPTABLE",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S1656",
            "repo": "java",
            "name": "Variables should not be self-assigned",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "3min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "3min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1656"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/5dUxBQ\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed\n  </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic void setName(String name) {\n  name = name;\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic void setName(String name) {\n  this.name = name;\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S1659",
            "repo": "java",
            "name": "Multiple variables should not be declared on the same line",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "convention",
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1659"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/YTZGBQ\">CERT, DCL52-J.</a> - Do not declare more than one variable per declaration </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/EtcxBQ\">CERT, DCL04-C.</a> - Do not declare more than one variable per declaration </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Declaring multiple variables on one line is difficult to read.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nclass MyClass {\n\n  private int a, b;\n\n  public void method(){\n    int c; int d;\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nclass MyClass {\n\n  private int a;\n  private int b;\n\n  public void method(){\n    int c;\n    int d;\n  }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "FORMATTED",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S1751",
            "repo": "java",
            "name": "Loops with at most one iteration should be refactored",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "bad-practice",
                "confusing"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1751"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/tutorial/java/nutsandbolts/for.html\">Oracle - The for Statement</a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>A loop with at most one iteration is equivalent to an <code>if</code> statement. This can confuse developers and make the code less readable since\nloops are not meant to replace <code>if</code> statements.</p>\n<p>If the intention was to conditionally execute the block only once, an <code>if</code> statement should be used instead. Otherwise, the loop should\nbe fixed so the loop block can be executed multiple times.</p>\n<p>A loop statement with at most one iteration can happen when a statement that unconditionally transfers control, such as a jump or throw statement,\nis misplaced inside the loop block.</p>\n<p>This rule arises when the following statements are misplaced:</p>\n<ul>\n  <li> <code>break</code> </li>\n  <li> <code>return</code> </li>\n  <li> <code>throw</code> </li>\n</ul>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nint i = 0;\nwhile(i &lt; 10) { // Noncompliant; loop only executes once\n  System.out.println(\"i is \" + i);\n  i++;\n  break;\n}\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nfor (int i = 0; i &lt; 10; i++) { // Noncompliant; loop only executes once\n  if (i == x) {\n    break;\n  } else {\n    System.out.println(\"i is \" + i);\n    return;\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nint i = 0;\nwhile (i &lt; 10) {\n  System.out.println(\"i is \" + i);\n  i++;\n}\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nfor (int i = 0; i &lt; 10; i++) {\n  if (i == x) {\n    break;\n  } else {\n    System.out.println(\"i is \" + i);\n  }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S1774",
            "repo": "java",
            "name": "The ternary operator should not be used",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "brain-overload"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1774"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Ternary expressions, while concise, can often lead to code that is difficult to read and understand, especially when they are nested or complex.\nPrioritizing readability fosters maintainability and reduces the likelihood of bugs. Therefore, they should be removed in favor of more explicit\ncontrol structures, such as <code>if</code>/<code>else</code> statements, to improve the clarity and readability of the code.</p>\n\n<h4>Noncompliant code example</h4>\n<pre>\nSystem.out.println(i&gt;10?\"yes\":\"no\");  // Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre>\nif (i &gt; 10) {\n  System.out.println(\"yes\");\n} else {\n  System.out.println(\"no\");\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S1871",
            "repo": "java",
            "name": "Two branches in a conditional structure should not have exactly the same implementation",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "design",
                "suspicious"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1871"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<h3>Related rules</h3>\n<ul>\n  <li> <a href='/coding_rules#rule_key=java%3AS3923'>S3923</a> - All branches in a conditional structure should not have exactly the same implementation </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>When the same code is duplicated in two or more separate branches of a conditional, it can make the code harder to understand, maintain, and can\npotentially introduce bugs if one instance of the code is changed but others are not.</p>\n<p>Having two <code>cases</code> in a <code>switch</code> statement or two branches in an <code>if</code> chain with the same implementation is at\nbest duplicate code, and at worst a coding error.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nif (a &gt;= 0 &amp;&amp; a &lt; 10) {\n  doFirstThing();\n  doTheThing();\n}\nelse if (a &gt;= 10 &amp;&amp; a &lt; 20) {\n  doTheOtherThing();\n}\nelse if (a &gt;= 20 &amp;&amp; a &lt; 50) {\n  doFirstThing();\n  doTheThing();  // Noncompliant; duplicates first condition\n}\nelse {\n  doTheRest();\n}\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nswitch (i) {\n  case 1:\n    doFirstThing();\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:  // Noncompliant; duplicates case 1's implementation\n    doFirstThing();\n    doSomething();\n    break;\n  default:\n    doTheRest();\n}\n</pre>\n<p>If the same logic is truly needed for both instances, then:</p>\n<ul>\n  <li> in an <code>if</code> chain they should be combined </li>\n</ul>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nif ((a &gt;= 0 &amp;&amp; a &lt; 10) || (a &gt;= 20 &amp;&amp; a &lt; 50)) { // Compliant\n  doFirstThing();\n  doTheThing();\n}\nelse if (a &gt;= 10 &amp;&amp; a &lt; 20) {\n  doTheOtherThing();\n}\nelse {\n  doTheRest();\n}\n</pre>\n<ul>\n  <li> for a <code>switch</code>, one should fall through to the other </li>\n</ul>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nswitch (i) {\n  case 1:\n  case 3: // Compliant\n    doFirstThing();\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  default:\n    doTheRest();\n}\n</pre>\n<p>When all blocks are identical, either this rule will trigger if there is no default clause or rule <a href='/coding_rules#rule_key=java%3AS3923'>S3923</a> will raise if there is a\ndefault clause.</p>\n<h3>Exceptions</h3>\n<p>Unless all blocks are identical, blocks in an <code>if</code> chain that contain a single line of code are ignored. The same applies to blocks in a\n<code>switch</code> statement that contains a single line of code with or without a following <code>break</code>.</p>\n<pre>\nif (a == 1) {\n  doSomething();  // Compliant, usually this is done on purpose to increase the readability\n} else if (a == 2) {\n  doSomethingElse();\n} else {\n  doSomething();\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "DISTINCT",
            "cleanCodeAttributeCategory": "ADAPTABLE",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S1872",
            "repo": "java",
            "name": "Classes should not be compared by name",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1872"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>There is no requirement that class names be unique, only that they be unique within a package. Therefore trying to determine an object’s type based\non its class name is an exercise fraught with danger. One of those dangers is that a malicious user will send objects of the same name as the trusted\nclass and thereby gain trusted access.</p>\n<p>Instead, the <code>instanceof</code> operator or the <code>Class.isAssignableFrom()</code> method should be used to check the object’s underlying\ntype.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npackage computer;\nclass Pear extends Laptop { ... }\n\npackage food;\nclass Pear extends Fruit { ... }\n\nclass Store {\n\n  public boolean hasSellByDate(Object item) {\n    if (\"Pear\".equals(item.getClass().getSimpleName())) {  // Noncompliant\n      return true;  // Results in throwing away week-old computers\n    }\n    return false;\n  }\n\n  public boolean isList(Class&lt;T&gt; valueClass) {\n    if (List.class.getName().equals(valueClass.getName())) {  // Noncompliant\n      return true;\n    }\n    return false;\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nclass Store {\n\n  public boolean hasSellByDate(Object item) {\n    if (item instanceof food.Pear) {\n      return true;\n    }\n    return false;\n  }\n\n  public boolean isList(Class&lt;T&gt; valueClass) {\n    if (valueClass.isAssignableFrom(List.class)) {\n      return true;\n    }\n    return false;\n  }\n}\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/486\">CWE-486 - Comparison of Classes by Name</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/eDdGBQ\">CERT, OBJ09-J.</a> - Compare classes and not class names </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S1874",
            "repo": "java",
            "name": "\"@Deprecated\" code should not be used",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "obsolete",
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:CallToDeprecatedMethod"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Code is sometimes annotated as deprecated by developers maintaining libraries or APIs to indicate that the method, class, or other programming\nelement is no longer recommended for use. This is typically due to the introduction of a newer or more effective alternative. For example, when a\nbetter solution has been identified, or when the existing code presents potential errors or security risks.</p>\n<p>Deprecation is a good practice because it helps to phase out obsolete code in a controlled manner, without breaking existing software that may\nstill depend on it. It is a way to warn other developers not to use the deprecated element in new code, and to replace it in existing code when\npossible.</p>\n<p>Deprecated classes, interfaces, and their members should not be used, inherited or extended because they will eventually be removed. The\ndeprecation period allows you to make a smooth transition away from the aging, soon-to-be-retired technology.</p>\n<p>Check the documentation or the deprecation message to understand why the code was deprecated and what the recommended alternative is.</p>\n<pre>\n/**\n * @deprecated  As of release 1.3, replaced by {@link #Foo}\n */\n@Deprecated\npublic class Fum { ... }\n\npublic class Foo {\n  /**\n   * @deprecated  As of release 1.7, replaced by {@link #newMethod()}\n   */\n  @Deprecated\n  public void oldMethod() { ... }\n\n  public void newMethod() { ... }\n}\n\npublic class Bar extends Foo {\n  public void oldMethod() { ... } // Noncompliant; don't override a deprecated method\n}\n\npublic class Baz extends Fum {  // Noncompliant; Fum is deprecated\n  public void myMethod() {\n    Foo foo = new Foo();\n    foo.oldMethod();  // Noncompliant; oldMethod method is deprecated\n  }\n}\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/477\">CWE-477 - Use of Obsolete Functions</a> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S1994",
            "repo": "java",
            "name": "\"for\" loop increment clauses should modify the loops' counters",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "confusing"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1994"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>The counter of a <code>for</code> loop should be updated in the loop’s increment clause. The purpose of a <code>for</code> loop is to iterate over\na range using a counter variable. It should not be used for other purposes, and alternative loops should be used in those cases.</p>\n<p>If the counter is not updated, the loop will be infinite with a constant counter variable. If this is intentional, use a <code>while</code> or\n<code>do</code> <code>while</code> loop instead of a <code>for</code> loop.</p>\n<p>If the counter variable is updated within the loop’s body, try to move it to the increment clause. If this is impossible due to certain conditions,\nreplace the <code>for</code> loop with a <code>while</code> or <code>do</code> <code>while</code> loop.</p>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<h4>Noncompliant code example</h4>\n<p>Move the counter variable update to the loop’s increment clause.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfor (int i = 0; i &lt; 10; ) { // Noncompliant, i not updated in increment clause\n  // ...\n  i++;\n}\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nint sum = 0\nfor (int i = 0; i &lt; 10; sum++) { // Noncompliant, i not updated in increment clause\n  // ...\n  i++;\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfor (i = 0; i &lt; 10; i++) { // Compliant\n  // ...\n}\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nint sum = 0\nfor (int i = 0; i &lt; 10; i++) { // Compliant\n  // ...\n  sum++;\n}\n</pre>\n<h4>Noncompliant code example</h4>\n<p>If this is impossible and the counter variable must be updated in the loop’s body, use a <code>while</code> or <code>do</code> <code>while</code>\nloop instead.</p>\n<pre data-diff-id=\"3\" data-diff-type=\"noncompliant\">\nfor (int sum = 0; sum &lt; 10) { // Noncompliant, sum not updated in increment clause\n  // ...\n  if (condition) sum++;\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"3\" data-diff-type=\"compliant\">\nint sum = 0;\nwhile (sum &lt; 10) { // Compliant\n  // ...\n  if (condition) sum++;\n  // ...\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S1996",
            "repo": "java",
            "name": "Files should contain only one top-level class or interface each",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "brain-overload"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "LINEAR",
            "debtRemFnType": "LINEAR",
            "type": "CODE_SMELL",
            "defaultRemFnType": "LINEAR",
            "defaultRemFnGapMultiplier": "10min",
            "remFnType": "LINEAR",
            "remFnGapMultiplier": "10min",
            "remFnOverloaded": false,
            "gapDescription": "per extra type",
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1996"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>A file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain. This\nis doubly true for a file with multiple top-level classes and interfaces. It is strongly advised to divide the file into one top-level class or\ninterface per file.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "FOCUSED",
            "cleanCodeAttributeCategory": "ADAPTABLE",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S2629",
            "repo": "java",
            "name": "\"Preconditions\" and logging arguments should not require evaluation",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "performance"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2629"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Some method calls can effectively be \"no-ops\", meaning that the invoked method does nothing, based on the application’s configuration (eg: debug\nlogs in production). However, even if the method effectively does nothing, its arguments may still need to evaluated before the method is called.</p>\n<p>Passing message arguments that require further evaluation into a Guava <code>com.google.common.base.Preconditions</code> check can result in a\nperformance penalty. That is because whether or not they’re needed, each argument must be resolved before the method is actually called.</p>\n<p>Similarly, passing concatenated strings into a logging method can also incur a needless performance hit because the concatenation will be performed\nevery time the method is called, whether or not the log level is low enough to show the message.</p>\n<p>Instead, you should structure your code to pass static or pre-computed values into <code>Preconditions</code> conditions check and logging\ncalls.</p>\n<p>Specifically, the built-in string formatting should be used instead of string concatenation, and if the message is the result of a method call,\nthen <code>Preconditions</code> should be skipped altogether, and the relevant exception should be conditionally thrown instead.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nlogger.log(Level.DEBUG, \"Something went wrong: \" + message);  // Noncompliant; string concatenation performed even when log level too high to show DEBUG messages\n\nlogger.fine(\"An exception occurred with message: \" + message); // Noncompliant\n\nLOG.error(\"Unable to open file \" + csvPath, e);  // Noncompliant\n\nPreconditions.checkState(a &gt; 0, \"Arg must be positive, but got \" + a);  // Noncompliant. String concatenation performed even when a &gt; 0\n\nPreconditions.checkState(condition, formatMessage());  // Noncompliant. formatMessage() invoked regardless of condition\n\nPreconditions.checkState(condition, \"message: %s\", formatMessage());  // Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nlogger.log(Level.DEBUG, \"Something went wrong: {0} \", message);  // String formatting only applied if needed\nlogger.log(Level.SEVERE, () -&gt; \"Something went wrong: \" + message); // since Java 8, we can use Supplier , which will be evaluated lazily\n\nlogger.fine(\"An exception occurred with message: {}\", message);  // SLF4J, Log4j\n\nLOG.error(\"Unable to open file {0}\", csvPath, e);\n\nif (LOG.isDebugEnabled()) {\n  LOG.debug(\"Unable to open file \" + csvPath, e);  // this is compliant, because it will not evaluate if log level is above debug.\n}\n\nPreconditions.checkState(arg &gt; 0, \"Arg must be positive, but got %d\", a);  // String formatting only applied if needed\n\nif (!condition) {\n  throw new IllegalStateException(formatMessage());  // formatMessage() only invoked conditionally\n}\n\nif (!condition) {\n  throw new IllegalStateException(\"message: \" + formatMessage());\n}\n</pre>\n<h3>Exceptions</h3>\n<p><code>catch</code> blocks are ignored, because the performance penalty is unimportant on exceptional paths (catch block should not be a part of\nstandard program flow). Getters are ignored as well as methods called on annotations which can be considered as getters. This rule accounts for\nexplicit test-level testing with SLF4J methods <code>isXXXEnabled</code> and ignores the bodies of such <code>if</code> statements.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "EFFICIENT",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S2637",
            "repo": "java",
            "name": "\"@NonNull\" values should not be set to null",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "symbolic-execution",
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Fields, parameters and return values marked <code>@NotNull</code>, <code>@NonNull</code>, or <code>@Nonnull</code> are assumed to have non-null\nvalues and are not typically null-checked before use. Therefore setting one of these values to <code>null</code>, or failing to set such a class field\nin a constructor, could cause <code>NullPointerException</code>s at runtime.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class MainClass {\n\n  @Nonnull\n  private String primary;\n  private String secondary;\n\n  public MainClass(String color) {\n    if (color != null) {\n      secondary = null;\n    }\n    primary = color;  // Noncompliant; \"primary\" is Nonnull but could be set to null here\n  }\n\n  public MainClass() { // Noncompliant; \"primary\" is Nonnull but is not initialized\n  }\n\n  @Nonnull\n  public String indirectMix() {\n    String mix = null;\n    return mix;  // Noncompliant; return value is Nonnull, but null is returned.\n  }\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Standards</h3>\n<ul>\n  <li> CERT - <a href=\"https://wiki.sei.cmu.edu/confluence/x/QdcxBQ\">EXP34-C. Do not dereference null pointers</a> </li>\n  <li> CERT - <a href=\"https://wiki.sei.cmu.edu/confluence/display/java/EXP01-J.+Do+not+use+a+null+in+a+case+where+an+object+is+required\">EXP01-J. Do\n  not use a null in a case where an object is required</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/476\">CWE-476 NULL Pointer Dereference</a> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S2638",
            "repo": "java",
            "name": "Method overrides should not change contracts",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "suspicious"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2638"
                ]
            },
            "descriptionSections": [
                {
                    "key": "introduction",
                    "content": "<p>This rule raises an issue when an overriding method changes a contract defined in a superclass.</p>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> SOLID - <a href=\"https://en.wikipedia.org/wiki/Liskov_substitution_principle\">Wikipedia - Liskov substitution principle</a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Because a subclass instance may be cast to and treated as an instance of the superclass, overriding methods should uphold the aspects of the\nsuperclass contract that relate to the Liskov Substitution Principle. Specifically, if the parameters or return type of the superclass method are\nmarked with any of the following: <code>@Nullable</code>, <code>@CheckForNull</code>, <code>@NotNull</code>, <code>@NonNull</code>, and\n<code>@Nonnull</code>, then subclass parameters are not allowed to tighten the contract, and return values are not allowed to loosen it.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class Fruit {\n\n  private Season ripe;\n  private String color;\n\n  public void setRipe(@Nullable Season ripe) {\n    this.ripe = ripe;\n  }\n\n  public @NotNull Integer getProtein() {\n    return 12;\n  }\n}\n\npublic class Raspberry extends Fruit {\n\n  public void setRipe(@NotNull Season ripe) {  // Noncompliant: the ripe argument annotated as @Nullable in parent class\n    this.ripe = ripe;\n  }\n\n  public @Nullable Integer getProtein() {  // Noncompliant: the return type annotated as @NotNull in parent class\n    return null;\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class Fruit {\n\n  private Season ripe;\n  private String color;\n\n  public void setRipe(@Nullable Season ripe) {\n    this.ripe = ripe;\n  }\n\n  public @NotNull Integer getProtein() {\n    return 12;\n  }\n}\n\npublic class Raspberry extends Fruit {\n\n  public void setRipe(@Nullable Season ripe) {\n    this.ripe = ripe;\n  }\n\n  public @NotNull Integer getProtein() {\n    return 12;\n  }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "COMPLETE",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S2639",
            "repo": "java",
            "name": "Inappropriate regular expressions should not be used",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2639"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Regular expressions are powerful but tricky, and even those long used to using them can make mistakes.</p>\n<p>The following should not be used as regular expressions:</p>\n<ul>\n  <li> <code>.</code> - matches any single character. Used in <code>replaceAll</code>, it matches <em>everything</em> </li>\n  <li> <code>|</code> - normally used as an option delimiter. Used stand-alone, it matches the space between characters </li>\n  <li> <code>File.separator</code> - matches the platform-specific file path delimiter. On Windows, this will be taken as an escape character </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<pre>\nString str = \"/File|Name.txt\";\n\nString clean = str.replaceAll(\".\",\"\"); // Noncompliant; probably meant to remove only dot chars, but returns an empty string\nString clean2 = str.replaceAll(\"|\",\"_\"); // Noncompliant; yields _/_F_i_l_e_|_N_a_m_e_._t_x_t_\nString clean3 = str.replaceAll(File.separator,\"\"); // Noncompliant; exception on Windows\n\nString clean4 = str.replaceFirst(\".\",\"\"); // Noncompliant;\nString clean5 = str.replaceFirst(\"|\",\"_\"); // Noncompliant;\nString clean6 = str.replaceFirst(File.separator,\"\"); // Noncompliant;\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S2755",
            "repo": "java",
            "name": "XML parsers should not be vulnerable to XXE attacks",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "symbolic-execution"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "VULNERABILITY",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "how_to_fix",
                    "content": "<p>The following code contains examples of XML parsers that have external entity processing enabled. As a result, the parsers are vulnerable to XXE\nattacks if an attacker can control the XML file that is processed.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"31\" data-diff-type=\"noncompliant\">\nimport org.xml.sax.XMLReader;\nimport org.xml.sax.helpers.XMLReaderFactory;\n\npublic void decode() {\n    XMLReader reader = XMLReaderFactory.createXMLReader(); // Noncompliant\n}\n</pre>\n<h4>Compliant solution</h4>\n<p>Set <code>disallow-doctype-decl</code> to <code>true</code>.</p>\n<pre data-diff-id=\"31\" data-diff-type=\"compliant\">\nimport org.xml.sax.XMLReader;\nimport org.xml.sax.helpers.XMLReaderFactory;\n\npublic void decode() {\n    XMLReader reader = XMLReaderFactory.createXMLReader();\n    reader.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n}\n</pre>\n<h3>How does this work?</h3>\n<h4>Disable external entities</h4>\n<p>The most effective approach to prevent XXE vulnerabilities is to disable external entity processing entirely, unless it is explicitly required for\nspecific use cases. By default, XML parsers should be configured to reject the processing of external entities. This can be achieved by setting the\nappropriate properties or options in your XML parser library or framework.</p>\n<p>If external entity processing is necessary for certain scenarios, adopt a whitelisting approach to restrict the entities that can be resolved\nduring XML parsing. Create a list of trusted external entities and disallow all others. This approach ensures that only known and safe entities are\nprocessed.<br> You should rely on features provided by your XML parser to restrict the external entities.</p>",
                    "context": {
                        "displayName": "SAX",
                        "key": "sax"
                    }
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>The following code contains examples of XML parsers that have external entity processing enabled. As a result, the parsers are vulnerable to XXE\nattacks if an attacker can control the XML file that is processed.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport javax.xml.XMLConstants;\nimport javax.xml.parsers.DocumentBuilderFactory;\n\npublic void decode() {\n    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance(); // Noncompliant\n}\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nimport javax.xml.stream.XMLInputFactory;\n\npublic void decode() {\n    XMLInputFactory factory = XMLInputFactory.newInstance(); // Noncompliant\n}\n</pre>\n<h4>Compliant solution</h4>\n<p>For <code>DocumentBuilderFactory</code>, <code>SAXParserFactory</code>, <code>TransformerFactory</code>, and <code>SchemaFactory</code> set\n<code>XMLConstants.FEATURE_SECURE_PROCESSING</code> to <code>true</code>.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport javax.xml.XMLConstants;\nimport javax.xml.parsers.DocumentBuilderFactory;\n\npublic void decode() {\n    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n    factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n}\n</pre>\n<p>For <code>XMLInputFactory</code> set <code>SUPPORT_DTD</code> to <code>false</code>.</p>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nimport javax.xml.stream.XMLInputFactory;\n\npublic void decode() {\n    XMLInputFactory factory = XMLInputFactory.newInstance();\n    factory.setProperty(XMLInputFactory.SUPPORT_DTD, false);\n}\n</pre>\n<p>Other combinations of settings are secure, but in general, it is recommendable to use the approaches shown here, as they are the most clear.</p>\n<h3>How does this work?</h3>\n<h4>Disable external entities</h4>\n<p>The most effective approach to prevent XXE vulnerabilities is to disable external entity processing entirely, unless it is explicitly required for\nspecific use cases. By default, XML parsers should be configured to reject the processing of external entities. This can be achieved by setting the\nappropriate properties or options in your XML parser library or framework.</p>\n<p>If external entity processing is necessary for certain scenarios, adopt a whitelisting approach to restrict the entities that can be resolved\nduring XML parsing. Create a list of trusted external entities and disallow all others. This approach ensures that only known and safe entities are\nprocessed.<br> You should rely on features provided by your XML parser to restrict the external entities.</p>\n<h3>Going the extra mile</h3>\n<h4>Disable entity expansion</h4>\n<p>Specifically for <code>DocumentBuilderFactory</code>, it is possible to disable the entity expansion. Note, however, that this does not prevent the\nretrieval of external entities.</p>\n<pre>\nfactory.setExpandEntityReferences(false);\n</pre>",
                    "context": {
                        "displayName": "Java SE",
                        "key": "java_se"
                    }
                },
                {
                    "key": "resources",
                    "content": "<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">Top 10 2021 Category A5 - Security Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A4_2017-XML_External_Entities_(XXE)\">Top 10 2017 Category A4 - XML External\n  Entities (XXE)</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/611\">CWE-611 - Information Exposure Through XML External Entity Reference</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/827\">CWE-827 - Improper Control of Document Type Definition</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222608\">Application Security and\n  Development: V-222608</a> - The application must not be vulnerable to XML-oriented attacks. </li>\n</ul>"
                },
                {
                    "key": "introduction",
                    "content": "<p>This vulnerability allows the usage of external entities in XML.</p>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>External Entity Processing allows for XML parsing with the involvement of external entities. However, when this functionality is enabled without\nproper precautions, it can lead to a vulnerability known as XML External Entity (XXE) attack.</p>\n<h3>What is the potential impact?</h3>\n<h4>Exposing sensitive data</h4>\n<p>One significant danger of XXE vulnerabilities is the potential for sensitive data exposure. By crafting malicious XML payloads, attackers can\nreference external entities that contain sensitive information, such as system files, database credentials, or configuration files. When these\nentities are processed during XML parsing, the attacker can extract the contents and gain unauthorized access to sensitive data. This poses a severe\nthreat to the confidentiality of critical information.</p>\n<h4>Exhausting system resources</h4>\n<p>Another consequence of XXE vulnerabilities is the potential for denial-of-service attacks. By exploiting the ability to include external entities,\nattackers can construct XML payloads that cause resource exhaustion. This can overwhelm the system’s memory, CPU, or other critical resources, leading\nto system unresponsiveness or crashes. A successful DoS attack can disrupt the availability of services and negatively impact the user experience.</p>\n<h4>Forging requests</h4>\n<p>XXE vulnerabilities can also enable Server-Side Request Forgery (SSRF) attacks. By leveraging the ability to include external entities, an attacker\ncan make the vulnerable application send arbitrary requests to other internal or external systems. This can result in unintended actions, such as\nretrieving data from internal resources, scanning internal networks, or attacking other systems. SSRF attacks can lead to severe consequences,\nincluding unauthorized data access, system compromise, or even further exploitation within the network infrastructure.</p>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>The following code contains examples of XML parsers that have external entity processing enabled. As a result, the parsers are vulnerable to XXE\nattacks if an attacker can control the XML file that is processed.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"noncompliant\">\nimport org.jdom2.input.SAXBuilder;\n\npublic void decode() {\n    SAXBuilder builder = new SAXBuilder(); // Noncompliant\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"compliant\">\nimport org.jdom2.input.SAXBuilder;\n\npublic void decode() {\n    SAXBuilder builder = new SAXBuilder();\n    builder.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, \"\");\n}\n</pre>\n<h3>How does this work?</h3>\n<h4>Disable external entities</h4>\n<p>The most effective approach to prevent XXE vulnerabilities is to disable external entity processing entirely, unless it is explicitly required for\nspecific use cases. By default, XML parsers should be configured to reject the processing of external entities. This can be achieved by setting the\nappropriate properties or options in your XML parser library or framework.</p>\n<p>If external entity processing is necessary for certain scenarios, adopt a whitelisting approach to restrict the entities that can be resolved\nduring XML parsing. Create a list of trusted external entities and disallow all others. This approach ensures that only known and safe entities are\nprocessed.<br> You should rely on features provided by your XML parser to restrict the external entities.</p>",
                    "context": {
                        "displayName": "Jdom2",
                        "key": "jdom2"
                    }
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>The following code contains examples of XML parsers that have external entity processing enabled. As a result, the parsers are vulnerable to XXE\nattacks if an attacker can control the XML file that is processed.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"21\" data-diff-type=\"noncompliant\">\nimport org.dom4j.io.SAXReader;\n\npublic void decode() {\n    SAXReader xmlReader = new SAXReader(); // Noncompliant\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"21\" data-diff-type=\"compliant\">\nimport org.dom4j.io.SAXReader;\n\npublic void decode() {\n    SAXReader xmlReader = new SAXReader();\n    xmlReader.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n}\n</pre>\n<h3>How does this work?</h3>\n<h4>Disable external entities</h4>\n<p>The most effective approach to prevent XXE vulnerabilities is to disable external entity processing entirely, unless it is explicitly required for\nspecific use cases. By default, XML parsers should be configured to reject the processing of external entities. This can be achieved by setting the\nappropriate properties or options in your XML parser library or framework.</p>\n<p>If external entity processing is necessary for certain scenarios, adopt a whitelisting approach to restrict the entities that can be resolved\nduring XML parsing. Create a list of trusted external entities and disallow all others. This approach ensures that only known and safe entities are\nprocessed.<br> You should rely on features provided by your XML parser to restrict the external entities.</p>",
                    "context": {
                        "displayName": "Dom4j",
                        "key": "dom4j"
                    }
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "COMPLETE",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "SECURITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S2757",
            "repo": "java",
            "name": "Non-existent operators like \"=+\" should not be used",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2757"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Using operator pairs (<code>=+</code>, <code>=-</code>, or <code>=!</code>) that look like reversed single operators (<code>+=</code>,\n<code>-=</code> or <code>!=</code>) is confusing. They compile and run but do not produce the same result as their mirrored counterpart.</p>\n<pre>\nint target = -5;\nint num = 3;\n\ntarget =- num;  // Noncompliant: target = -3. Is that the intended behavior?\ntarget =+ num; // Noncompliant: target = 3\n</pre>\n<p>This rule raises an issue when <code>=+</code>, <code>=-</code>, or <code>=!</code> are used without any space between the operators and when there\nis at least one whitespace after.</p>\n<p>Replace the operators with a single one if that is the intention</p>\n<pre>\nint target = -5;\nint num = 3;\n\ntarget -= num;  // target = -8\n</pre>\n<p>Or fix the spacing to avoid confusion</p>\n<pre>\nint target = -5;\nint num = 3;\n\ntarget = -num;  // target = -3\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S2864",
            "repo": "java",
            "name": "\"entrySet()\" should be iterated when both the key and value are needed",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "performance"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2864"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p><code>Map</code> is an object that maps keys to values. A map cannot contain duplicate keys, which means each key can map to at most one value.</p>\n<p>When both the key and the value are needed, it is more efficient to iterate the <code>entrySet()</code>, which will give access to both instead of\niterating over the <code>keySet()</code> and then getting the value.</p>\n<p>If the <code>entrySet()</code> method is not iterated when both the key and value are needed, it can lead to unnecessary lookups. This is because\neach lookup requires two operations: one to retrieve the key and another to retrieve the value. By iterating the <code>entrySet()</code> method, the\nkey-value pair can be retrieved in a single operation, which can improve performance.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic void doSomethingWithMap(Map&lt;String,Object&gt; map) {\n  for (String key : map.keySet()) {  // Noncompliant; for each key the value is retrieved\n    Object value = map.get(key);\n    // ...\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic void doSomethingWithMap(Map&lt;String,Object&gt; map) {\n  for (Map.Entry&lt;String,Object&gt; entry : map.entrySet()) {\n    String key = entry.getKey();\n    Object value = entry.getValue();\n    // ...\n  }\n}\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/util/Map.html\">Oracle SE 20 - Map</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://www.baeldung.com/java-map-entries-methods\">Baeldung - Java Map methods</a> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "EFFICIENT",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S3725",
            "repo": "java",
            "name": "Java 8's \"Files.exists\" should not be used",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "performance",
                "java8"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S3725"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>The <code>Files.exists</code> method has noticeably poor performance in JDK 8, and can slow an application significantly when used to check files\nthat don’t actually exist.</p>\n<p>The same goes for <code>Files.notExists</code>, <code>Files.isDirectory</code> and <code>Files.isRegularFile</code> from <code>java.nio.file</code>\npackage.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project’s <code>sonar.java.source</code> is not 8.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nPath myPath;\nif(java.nio.file.Files.exists(myPath)) {  // Noncompliant\n // do something\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nPath myPath;\nif(myPath.toFile().exists())) {\n // do something\n}\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://bugs.openjdk.java.net/browse/JDK-8153414\">https://bugs.openjdk.java.net/browse/JDK-8153414</a> </li>\n  <li> <a href=\"https://bugs.openjdk.java.net/browse/JDK-8154077\">https://bugs.openjdk.java.net/browse/JDK-8154077</a> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "EFFICIENT",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S3937",
            "repo": "java",
            "name": "Number patterns should be regular",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "suspicious"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S3937"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>The use of punctuation characters to separate subgroups in a number can make the number more readable. For instance consider 1,000,000,000 versus\n1000000000. But when the grouping is irregular, such as 1,000,00,000; it indicates an error.</p>\n<p>This rule raises an issue when underscores (<code>_</code>) are used to break a number into irregular subgroups.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nint thousand = 100_0;\nint tenThousand = 100_00;\nint million = 1_000_00_000;\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nint thousand = 1000;\nint tenThousand = 10_000;\nint tenThousandWithout = 10000;\nint duos = 1_00_00;\nint million = 100_000_000;\n</pre>\n<h3>Exceptions</h3>\n<p>No issue will be raised on binary numbers (starting with <code>0b</code> or <code>0B</code>). Binary number bits are often grouped corresponding to\ncertain meanings, resulting in irregular bit group sizes.</p>\n<pre>\nint configValue1 = 0b00_000_10_1; // Compliant\nint configValue2 = 0B00_000_10_1; // Compliant\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "FORMATTED",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S3958",
            "repo": "java",
            "name": "Intermediate Stream methods should not be left unused",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "symbolic-execution",
                "java8"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html#StreamOps\">Stream Operations</a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>There are two types of stream operations: intermediate operations, which return another stream, and terminal operations, which return something\nother than a stream. Intermediate operations are lazy, meaning they aren’t actually executed until and unless a terminal stream operation is performed\non their results. Consequently, if the result of an intermediate stream operation is not fed to a terminal operation, it serves no purpose, which is\nalmost certainly an error.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nwidgets.stream().filter(b -&gt; b.getColor() == RED); // Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nint sum = widgets.stream()\n                      .filter(b -&gt; b.getColor() == RED)\n                      .mapToInt(b -&gt; b.getWeight())\n                      .sum();\nStream&lt;Widget&gt; pipeline = widgets.stream()\n                                 .filter(b -&gt; b.getColor() == GREEN)\n                                 .mapToInt(b -&gt; b.getWeight());\nsum = pipeline.sum();\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S3959",
            "repo": "java",
            "name": "Consumed Stream pipelines should not be reused",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "symbolic-execution",
                "java8"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<p><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html#StreamOps\">Stream Operations</a></p>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Stream operations are divided into intermediate and terminal operations, and are combined to form stream pipelines. After the terminal operation is\nperformed, the stream pipeline is considered consumed, and cannot be used again. Such a reuse will yield unexpected results.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nStream&lt;Widget&gt; pipeline = widgets.stream().filter(b -&gt; b.getColor() == RED);\nint sum1 = pipeline.sum();\nint sum2 = pipeline.mapToInt(b -&gt; b.getWeight()).sum(); // Noncompliant\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S4792",
            "repo": "java",
            "name": "Configuring loggers is security-sensitive",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "DEPRECATED",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "type": "SECURITY_HOTSPOT",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S4792"
                ]
            },
            "descriptionSections": [
                {
                    "key": "default",
                    "content": "<p>This rule is deprecated, and will eventually be removed.</p>\n<p>Configuring loggers is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0285\">CVE-2018-0285</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-1127\">CVE-2000-1127</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-15113\">CVE-2017-15113</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-5742\">CVE-2015-5742</a> </li>\n</ul>\n<p>Logs are useful before, during and after a security incident.</p>\n<ul>\n  <li> Attackers will most of the time start their nefarious work by probing the system for vulnerabilities. Monitoring this activity and stopping it\n  is the first step to prevent an attack from ever happening. </li>\n  <li> In case of a successful attack, logs should contain enough information to understand what damage an attacker may have inflicted. </li>\n</ul>\n<p>Logs are also a target for attackers because they might contain sensitive information. Configuring loggers has an impact on the type of information\nlogged and how they are logged.</p>\n<p>This rule flags for review code that initiates loggers configuration. The goal is to guide security code reviews.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> unauthorized users might have access to the logs, either because they are stored in an insecure location or because the application gives\n  access to them. </li>\n  <li> the logs contain sensitive information on a production server. This can happen when the logger is in debug mode. </li>\n  <li> the log can grow without limit. This can happen when additional information is written into logs every time a user performs an action and the\n  user can perform the action as many times as he/she wants. </li>\n  <li> the logs do not contain enough information to understand the damage an attacker might have inflicted. The loggers mode (info, warn, error)\n  might filter out important information. They might not print contextual information like the precise time of events or the server hostname. </li>\n  <li> the logs are only stored locally instead of being backuped or replicated. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Check that your production deployment doesn’t have its loggers in \"debug\" mode as it might write sensitive information in logs. </li>\n  <li> Production logs should be stored in a secure location which is only accessible to system administrators. </li>\n  <li> Configure the loggers to display all warnings, info and error messages. Write relevant information such as the precise time of events and the\n  hostname. </li>\n  <li> Choose log format which is easy to parse and process automatically. It is important to process logs rapidly in case of an attack so that the\n  impact is known and limited. </li>\n  <li> Check that the permissions of the log files are correct. If you index the logs in some other service, make sure that the transfer and the\n  service are secure too. </li>\n  <li> Add limits to the size of the logs and make sure that no user can fill the disk with logs. This can happen even when the user does not control\n  the logged information. An attacker could just repeat a logged action many times. </li>\n</ul>\n<p>Remember that configuring loggers properly doesn’t make them bullet-proof. Here is a list of recommendations explaining on how to use your\nlogs:</p>\n<ul>\n  <li> Don’t log any sensitive information. This obviously includes passwords and credit card numbers but also any personal information such as user\n  names, locations, etc…​ Usually any information which is protected by law is good candidate for removal. </li>\n  <li> Sanitize all user inputs before writing them in the logs. This includes checking its size, content, encoding, syntax, etc…​ As for any user\n  input, validate using whitelists whenever possible. Enabling users to write what they want in your logs can have many impacts. It could for example\n  use all your storage space or compromise your log indexing service. </li>\n  <li> Log enough information to monitor suspicious activities and evaluate the impact an attacker might have on your systems. Register events such as\n  failed logins, successful logins, server side input validation failures, access denials and any important transaction. </li>\n  <li> Monitor the logs for any suspicious activity. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<p>This rule supports the following libraries: Log4J, <code>java.util.logging</code> and Logback</p>\n<pre>\n// === Log4J 2 ===\nimport org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilderFactory;\nimport org.apache.logging.log4j.Level;\nimport org.apache.logging.log4j.core.*;\nimport org.apache.logging.log4j.core.config.*;\n\n// Sensitive: creating a new custom configuration\nabstract class CustomConfigFactory extends ConfigurationFactory {\n    // ...\n}\n\nclass A {\n    void foo(Configuration config, LoggerContext context, java.util.Map&lt;String, Level&gt; levelMap,\n            Appender appender, java.io.InputStream stream, java.net.URI uri,\n            java.io.File file, java.net.URL url, String source, ClassLoader loader, Level level, Filter filter)\n            throws java.io.IOException {\n        // Creating a new custom configuration\n        ConfigurationBuilderFactory.newConfigurationBuilder();  // Sensitive\n\n        // Setting loggers level can result in writing sensitive information in production\n        Configurator.setAllLevels(\"com.example\", Level.DEBUG);  // Sensitive\n        Configurator.setLevel(\"com.example\", Level.DEBUG);  // Sensitive\n        Configurator.setLevel(levelMap);  // Sensitive\n        Configurator.setRootLevel(Level.DEBUG);  // Sensitive\n\n        config.addAppender(appender); // Sensitive: this modifies the configuration\n\n        LoggerConfig loggerConfig = config.getRootLogger();\n        loggerConfig.addAppender(appender, level, filter); // Sensitive\n        loggerConfig.setLevel(level); // Sensitive\n\n        context.setConfigLocation(uri); // Sensitive\n\n        // Load the configuration from a stream or file\n        new ConfigurationSource(stream);  // Sensitive\n        new ConfigurationSource(stream, file);  // Sensitive\n        new ConfigurationSource(stream, url);  // Sensitive\n        ConfigurationSource.fromResource(source, loader);  // Sensitive\n        ConfigurationSource.fromUri(uri);  // Sensitive\n    }\n}\n</pre>\n<pre>\n// === java.util.logging ===\nimport java.util.logging.*;\n\nclass M {\n    void foo(LogManager logManager, Logger logger, java.io.InputStream is, Handler handler)\n            throws SecurityException, java.io.IOException {\n        logManager.readConfiguration(is); // Sensitive\n\n        logger.setLevel(Level.FINEST); // Sensitive\n        logger.addHandler(handler); // Sensitive\n    }\n}\n</pre>\n<pre>\n// === Logback ===\nimport ch.qos.logback.classic.util.ContextInitializer;\nimport ch.qos.logback.core.Appender;\nimport ch.qos.logback.classic.joran.JoranConfigurator;\nimport ch.qos.logback.classic.spi.ILoggingEvent;\nimport ch.qos.logback.classic.*;\n\nclass M {\n    void foo(Logger logger, Appender&lt;ILoggingEvent&gt; fileAppender) {\n        System.setProperty(ContextInitializer.CONFIG_FILE_PROPERTY, \"config.xml\"); // Sensitive\n        JoranConfigurator configurator = new JoranConfigurator(); // Sensitive\n\n        logger.addAppender(fileAppender); // Sensitive\n        logger.setLevel(Level.DEBUG); // Sensitive\n    }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Log4J 1.x is not covered as it has reached <a href=\"https://blogs.apache.org/foundation/entry/apache_logging_services_project_announces\">end of\nlife</a>.</p>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/\">Top 10 2021 Category A9 - Security Logging and\n  Monitoring Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A10_2017-Insufficient_Logging%2526Monitoring\">Top 10 2017 Category A10 -\n  Insufficient Logging &amp; Monitoring</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/117\">CWE-117 - Improper Output Neutralization for Logs</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/532\">CWE-532 - Information Exposure Through Log Files</a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>This rule is deprecated, and will eventually be removed.</p>\n<p>Configuring loggers is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0285\">CVE-2018-0285</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-1127\">CVE-2000-1127</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-15113\">CVE-2017-15113</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-5742\">CVE-2015-5742</a> </li>\n</ul>\n<p>Logs are useful before, during and after a security incident.</p>\n<ul>\n  <li> Attackers will most of the time start their nefarious work by probing the system for vulnerabilities. Monitoring this activity and stopping it\n  is the first step to prevent an attack from ever happening. </li>\n  <li> In case of a successful attack, logs should contain enough information to understand what damage an attacker may have inflicted. </li>\n</ul>\n<p>Logs are also a target for attackers because they might contain sensitive information. Configuring loggers has an impact on the type of information\nlogged and how they are logged.</p>\n<p>This rule flags for review code that initiates loggers configuration. The goal is to guide security code reviews.</p>\n<h2>Exceptions</h2>\n<p>Log4J 1.x is not covered as it has reached <a href=\"https://blogs.apache.org/foundation/entry/apache_logging_services_project_announces\">end of\nlife</a>.</p>\n"
                },
                {
                    "key": "how_to_fix",
                    "content": "<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Check that your production deployment doesn’t have its loggers in \"debug\" mode as it might write sensitive information in logs. </li>\n  <li> Production logs should be stored in a secure location which is only accessible to system administrators. </li>\n  <li> Configure the loggers to display all warnings, info and error messages. Write relevant information such as the precise time of events and the\n  hostname. </li>\n  <li> Choose log format which is easy to parse and process automatically. It is important to process logs rapidly in case of an attack so that the\n  impact is known and limited. </li>\n  <li> Check that the permissions of the log files are correct. If you index the logs in some other service, make sure that the transfer and the\n  service are secure too. </li>\n  <li> Add limits to the size of the logs and make sure that no user can fill the disk with logs. This can happen even when the user does not control\n  the logged information. An attacker could just repeat a logged action many times. </li>\n</ul>\n<p>Remember that configuring loggers properly doesn’t make them bullet-proof. Here is a list of recommendations explaining on how to use your\nlogs:</p>\n<ul>\n  <li> Don’t log any sensitive information. This obviously includes passwords and credit card numbers but also any personal information such as user\n  names, locations, etc…​ Usually any information which is protected by law is good candidate for removal. </li>\n  <li> Sanitize all user inputs before writing them in the logs. This includes checking its size, content, encoding, syntax, etc…​ As for any user\n  input, validate using whitelists whenever possible. Enabling users to write what they want in your logs can have many impacts. It could for example\n  use all your storage space or compromise your log indexing service. </li>\n  <li> Log enough information to monitor suspicious activities and evaluate the impact an attacker might have on your systems. Register events such as\n  failed logins, successful logins, server side input validation failures, access denials and any important transaction. </li>\n  <li> Monitor the logs for any suspicious activity. </li>\n</ul>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/\">Top 10 2021 Category A9 - Security Logging and\n  Monitoring Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A10_2017-Insufficient_Logging%2526Monitoring\">Top 10 2017 Category A10 -\n  Insufficient Logging &amp; Monitoring</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/117\">CWE-117 - Improper Output Neutralization for Logs</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/532\">CWE-532 - Information Exposure Through Log Files</a> </li>\n</ul>"
                },
                {
                    "key": "assess_the_problem",
                    "content": "<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> unauthorized users might have access to the logs, either because they are stored in an insecure location or because the application gives\n  access to them. </li>\n  <li> the logs contain sensitive information on a production server. This can happen when the logger is in debug mode. </li>\n  <li> the log can grow without limit. This can happen when additional information is written into logs every time a user performs an action and the\n  user can perform the action as many times as he/she wants. </li>\n  <li> the logs do not contain enough information to understand the damage an attacker might have inflicted. The loggers mode (info, warn, error)\n  might filter out important information. They might not print contextual information like the precise time of events or the server hostname. </li>\n  <li> the logs are only stored locally instead of being backuped or replicated. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Sensitive Code Example</h2>\n<p>This rule supports the following libraries: Log4J, <code>java.util.logging</code> and Logback</p>\n<pre>\n// === Log4J 2 ===\nimport org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilderFactory;\nimport org.apache.logging.log4j.Level;\nimport org.apache.logging.log4j.core.*;\nimport org.apache.logging.log4j.core.config.*;\n\n// Sensitive: creating a new custom configuration\nabstract class CustomConfigFactory extends ConfigurationFactory {\n    // ...\n}\n\nclass A {\n    void foo(Configuration config, LoggerContext context, java.util.Map&lt;String, Level&gt; levelMap,\n            Appender appender, java.io.InputStream stream, java.net.URI uri,\n            java.io.File file, java.net.URL url, String source, ClassLoader loader, Level level, Filter filter)\n            throws java.io.IOException {\n        // Creating a new custom configuration\n        ConfigurationBuilderFactory.newConfigurationBuilder();  // Sensitive\n\n        // Setting loggers level can result in writing sensitive information in production\n        Configurator.setAllLevels(\"com.example\", Level.DEBUG);  // Sensitive\n        Configurator.setLevel(\"com.example\", Level.DEBUG);  // Sensitive\n        Configurator.setLevel(levelMap);  // Sensitive\n        Configurator.setRootLevel(Level.DEBUG);  // Sensitive\n\n        config.addAppender(appender); // Sensitive: this modifies the configuration\n\n        LoggerConfig loggerConfig = config.getRootLogger();\n        loggerConfig.addAppender(appender, level, filter); // Sensitive\n        loggerConfig.setLevel(level); // Sensitive\n\n        context.setConfigLocation(uri); // Sensitive\n\n        // Load the configuration from a stream or file\n        new ConfigurationSource(stream);  // Sensitive\n        new ConfigurationSource(stream, file);  // Sensitive\n        new ConfigurationSource(stream, url);  // Sensitive\n        ConfigurationSource.fromResource(source, loader);  // Sensitive\n        ConfigurationSource.fromUri(uri);  // Sensitive\n    }\n}\n</pre>\n<pre>\n// === java.util.logging ===\nimport java.util.logging.*;\n\nclass M {\n    void foo(LogManager logManager, Logger logger, java.io.InputStream is, Handler handler)\n            throws SecurityException, java.io.IOException {\n        logManager.readConfiguration(is); // Sensitive\n\n        logger.setLevel(Level.FINEST); // Sensitive\n        logger.addHandler(handler); // Sensitive\n    }\n}\n</pre>\n<pre>\n// === Logback ===\nimport ch.qos.logback.classic.util.ContextInitializer;\nimport ch.qos.logback.core.Appender;\nimport ch.qos.logback.classic.joran.JoranConfigurator;\nimport ch.qos.logback.classic.spi.ILoggingEvent;\nimport ch.qos.logback.classic.*;\n\nclass M {\n    void foo(Logger logger, Appender&lt;ILoggingEvent&gt; fileAppender) {\n        System.setProperty(ContextInitializer.CONFIG_FILE_PROPERTY, \"config.xml\"); // Sensitive\n        JoranConfigurator configurator = new JoranConfigurator(); // Sensitive\n\n        logger.addAppender(fileAppender); // Sensitive\n        logger.setLevel(Level.DEBUG); // Sensitive\n    }\n}\n</pre>\n"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "impacts": []
        },
        {
            "key": "java:S4925",
            "repo": "java",
            "name": "\"Class.forName()\" should not load JDBC 4.0+ drivers",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "obsolete"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S4925"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>In the past, it was required to load a JDBC driver before creating a <code>java.sql.Connection</code>. Nowadays, when using JDBC 4.0 drivers, this\nis no longer required and <code>Class.forName()</code> can be safely removed because JDBC 4.0 (JDK 6) drivers available in the classpath are\nautomatically loaded.</p>\n<p>This rule raises an issue when <code>Class.forName()</code> is used with one of the following values:</p>\n<ul>\n  <li> <code>com.mysql.jdbc.Driver</code> </li>\n  <li> <code>oracle.jdbc.driver.OracleDriver</code> </li>\n  <li> <code>com.ibm.db2.jdbc.app.DB2Driver</code> </li>\n  <li> <code>com.ibm.db2.jdbc.net.DB2Driver</code> </li>\n  <li> <code>com.sybase.jdbc.SybDriver</code> </li>\n  <li> <code>com.sybase.jdbc2.jdbc.SybDriver</code> </li>\n  <li> <code>com.teradata.jdbc.TeraDriver</code> </li>\n  <li> <code>com.microsoft.sqlserver.jdbc.SQLServerDriver</code> </li>\n  <li> <code>org.postgresql.Driver</code> </li>\n  <li> <code>sun.jdbc.odbc.JdbcOdbcDriver</code> </li>\n  <li> <code>org.hsqldb.jdbc.JDBCDriver</code> </li>\n  <li> <code>org.h2.Driver</code> </li>\n  <li> <code>org.firebirdsql.jdbc.FBDriver</code> </li>\n  <li> <code>net.sourceforge.jtds.jdbc.Driver</code> </li>\n  <li> <code>com.ibm.db2.jcc.DB2Driver</code> </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<pre>\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n\npublic class Demo {\n  private static final String DRIVER_CLASS_NAME = \"org.postgresql.Driver\";\n  private final Connection connection;\n\n  public Demo(String serverURI) throws SQLException, ClassNotFoundException {\n    Class.forName(DRIVER_CLASS_NAME); // Noncompliant; no longer required to load the JDBC Driver using Class.forName()\n    connection = DriverManager.getConnection(serverURI);\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n\npublic class Demo {\n    private final Connection connection;\n\n    public Demo(String serverURI) throws SQLException {\n        connection = DriverManager.getConnection(serverURI);\n    }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S4926",
            "repo": "java",
            "name": "\"serialVersionUID\" should not be declared blindly",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "serialization",
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S4926"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> Vojtech Ruzicka’s Programming Blog: <a href=\"https://www.vojtechruzicka.com/explicitly-declare-serialversionuid/\">Should I explicitly declare\n  serialVersionUID?</a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Providing a <code>serialVersionUID</code> field on <code>Serializable</code> classes is strongly recommended by the <code>Serializable</code>\ndocumentation but blindly following that recommendation can be harmful.</p>\n<p><code>serialVersionUID</code> value is stored with the serialized data and this field is verified when deserializing the data to ensure that the\ncode reading the data is compatible with the serialized data. In case of failure, it means the serialized data and the code are not in sync and this\nfine because you know what’s wrong.</p>\n<p>When the <code>serialVersionUID</code> is generated by an IDE or blindly hard-coded, there is a high probability that one will forget to update the\n<code>serialVersionUID</code> value when the <code>Serializable</code> class is later enriched with additional fields. As a consequence, old\nserialized data will incorrectly be considered compatible with the newer version of the code creating situations which are hard to debug.</p>\n<p>Therefore, defining <code>serialVersionUID</code> should be done with care. This rule raises an issue on each <code>serialVersionUID</code> field\ndeclared on classes implementing <code>Serializable</code> to be sure the presence and the value of the <code>serialVersionUID</code> field is\nchallenged and validated by the team.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class Foo implements Serializable {\n  private static final long serialVersionUID = 1;\n}\n\npublic class BarException extends RuntimeException {\n  private static final long serialVersionUID = 8582433437601788991L;\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "COMPLETE",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S4929",
            "repo": "java",
            "name": "\"read(byte[],int,int)\" should be overridden",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "performance"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "30min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "30min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S4929"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>When directly subclassing <code>java.io.InputStream</code> or <code>java.io.FilterInputStream</code>, the only requirement is that you implement\nthe method <code>read()</code>. However most uses for such streams don’t read a single byte at a time and the default implementation for\n<code>read(byte[],int,int)</code> will call <code>read(int)</code> for every single byte in the array which can create a lot of overhead and is\nutterly inefficient. It is therefore strongly recommended that subclasses provide an efficient implementation of\n<code>read(byte[],int,int)</code>.</p>\n<p>This rule raises an issue when a direct subclass of <code>java.io.InputStream</code> or <code>java.io.FilterInputStream</code> doesn’t provide an\noverride of <code>read(byte[],int,int)</code>.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class MyInputStream extends java.io.InputStream {\n  private FileInputStream fin;\n\n  public MyInputStream(File file) throws IOException {\n    fin = new FileInputStream(file);\n  }\n\n  @Override\n  public int read() throws IOException {\n    return fin.read();\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic class MyInputStream extends java.io.InputStream {\n  private FileInputStream fin;\n\n  public MyInputStream(File file) throws IOException {\n    fin = new FileInputStream(file);\n  }\n\n  @Override\n  public int read() throws IOException {\n    return fin.read();\n  }\n\n  @Override\n  public int read(byte[] b, int off, int len) throws IOException {\n    return fin.read(b, off, len);\n  }\n}\n</pre>\n<h3>Exceptions</h3>\n<p>This rule doesn’t raise an issue when the class is declared <code>abstract</code>.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "EFFICIENT",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S7190",
            "repo": "java",
            "name": "Methods annotated with \"@BeforeTransaction\" or \"@AfterTransaction\" must respect the contract",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "spring",
                "tests"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "TEST",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S7190"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>In tests configured with Spring’s <code>@Transactional</code> annotation, methods annotated with <code>@BeforeTransaction</code> or\n<code>@AfterTransaction</code> must be void and have no arguments. These methods are executed before or after a transaction, respectively. Deviating\nfrom this contract by having a non-void return type or accepting arguments will cause Spring to throw a runtime error.</p>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> Spring - <a\n  href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/test/context/transaction/BeforeTransaction.html\">BeforeTransaction</a> </li>\n  <li> Spring - <a\n  href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/test/context/transaction/AfterTransaction.html\">AfterTransaction</a> </li>\n</ul>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>Ensure that methods annotated with <code>@BeforeTransaction</code> or <code>@AfterTransaction</code> have a void return type and do not accept any\narguments.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class TransactionalTest {\n\n    @BeforeTransaction\n    public String setupTransaction(int x) { // non-compliant, method should be void and have no argument\n        // Setup logic\n    }\n\n    @AfterTransaction\n    public int cleanupTransaction(int x) { // non-compliant, method should be void and have no argument\n        // Cleanup logic\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class TransactionalTest {\n\n    @BeforeTransaction\n    public void setupTransaction() {\n        // Setup logic\n    }\n\n    @AfterTransaction\n    public void cleanupTransaction() {\n        // Cleanup logic\n    }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                },
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "HIGH"
                },
                {
                    "softwareQuality": "SECURITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S1213",
            "repo": "java",
            "name": "The members of an interface or class declaration should appear in a pre-defined order",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "convention"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1213"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>According to the Java Code Conventions as defined by Oracle, the members of a class or interface declaration should appear in the following order\nin the source files:</p>\n<ul>\n  <li> Class variables </li>\n  <li> Instance variables </li>\n  <li> Constructors </li>\n  <li> Methods </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class Foo{\n   private int field = 0;\n   public boolean isTrue() {...}\n   public Foo() {...}                         // Noncompliant, constructor defined after methods\n   public static final int OPEN = 4;  //Noncompliant, variable defined after constructors and methods\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic class Foo{\n   public static final int OPEN = 4;\n   private int field = 0;\n   public Foo() {...}\n   public boolean isTrue() {...}\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S1214",
            "repo": "java",
            "name": "Interfaces should not solely consist of constants",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "bad-practice"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1214"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>An interface that consists solely of constant definitions is a bad practice. The purpose of interfaces is to provide an API, not implementation\ndetails. That is, they should provide functions in the first place and constants only to assist these functions, for example, as possible\narguments.</p>\n<p>If an interface contains constants only, move them either to somewhere else, or replace the interface with an <em>Enum</em> or a final class with a\nprivate constructor.</p>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://dzone.com/articles/reasons-why-the-constant-interface-pattern-is-disc\">Mohammad Nadeem - Why the Constant Interface Pattern\n  Should Be Discouraged</a> </li>\n  <li> Joshua Bloch - Effective Java, ISBN 9780134686097 </li>\n</ul>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>If the concrete value of the constants is not essential, and they serve as mere identifiers, replace the interface with an <code>enum</code> like\nin the following example:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic interface Status { // Noncompliant, enum should be used\n  int OPEN = 1;\n  int CLOSED = 2;\n}\n</pre>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic enum Status {      // Compliant\n  OPEN,\n  CLOSED\n}\n</pre>\n<p>In some cases, enums are not a suitable option because the concrete constant value is important. Then you should check whether it is appropriate to\nmove them to a specific existing class, for example, if that class is the primary user of the constants:</p>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\ninterface AuxiliaryConstants { // Noncompliant, implementation detail of WordPacker\n  int BITS_PER_WORD = 16;\n  int WORD_MASK = (1 &lt;&lt; BITS_PER_WORD) - 1;\n  int HI_WORD_BK_MASK = ~(WORD_MASK &lt;&lt; BITS_PER_WORD);\n}\n\nclass WordPacker {\n  public static int getHiWord(int value) {\n    return (value &gt;&gt;&gt; AuxiliaryConstants.BITS_PER_WORD);\n  }\n\n  public static int setHiWord(int value, int wordValue) {\n    return (value &amp; AuxiliaryConstants.HI_WORD_BK_MASK) |\n      (wordValue &lt;&lt; AuxiliaryConstants.BITS_PER_WORD);\n  }\n}\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nclass WordPacker { // Compliant\n  private static final int BITS_PER_WORD = 16;\n  private static final int WORD_MASK = (1 &lt;&lt; BITS_PER_WORD) - 1;\n  private static final int HI_WORD_BK_MASK = ~(WORD_MASK &lt;&lt; BITS_PER_WORD);\n\n  public static int getHiWord(int value) {\n      return (value &gt;&gt;&gt; BITS_PER_WORD);\n  }\n\n  public static int setHiWord(int value, int wordValue) {\n    return (value &amp; HI_WORD_BK_MASK) | (wordValue &lt;&lt; BITS_PER_WORD);\n  }\n}\n</pre>\n<p>If this is not the case and several classes are using the constants equally, you should use a final class with a private constructor. Unlike\ninterfaces, they can neither be inherited from nor instantiated.</p>\n<pre data-diff-id=\"3\" data-diff-type=\"noncompliant\">\npublic interface ColorTheme { // Noncomplient, final class should be used\n  int COLOR_ERROR = 0xff0000;   // red\n  int COLOR_WARNING = 0xffff00; // yellow\n  int COLOR_OK = 0x00cf00;      // green\n}\n</pre>\n<pre data-diff-id=\"3\" data-diff-type=\"compliant\">\npublic final class ColorTheme { // Compliant\n  public static final int COLOR_ERROR = 0xff0000;   // red\n  public static final int COLOR_WARNING = 0xffff00; // yellow\n  public static final int COLOR_OK = 0x00cf00;      // green\n\n  private ColorTheme() {}\n}\n</pre>"
                },
                {
                    "key": "introduction",
                    "content": "<p>This rule raises an issue when an interface consists only of constant definitions without other members.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "MODULAR",
            "cleanCodeAttributeCategory": "ADAPTABLE",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S1640",
            "repo": "java",
            "name": "Maps with keys that are enum values should use the EnumMap implementation",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "performance"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1640"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>If all the keys in a <code>Map</code> are values from a single enum, it is recommended to use an <code>EnumMap</code> as the specific\nimplementation. An <code>EnumMap</code>, which has the advantage of knowing all possible keys in advance, is more efficient compared to other\nimplementations, as it can use a simple array as its underlying data structure.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic enum Color {\n  RED, GREEN, BLUE, ORANGE;\n}\n\nMap&lt;Color, String&gt; colorMap = new HashMap&lt;&gt;(); // Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic enum Color {\n  RED, GREEN, BLUE, ORANGE;\n}\n\nMap&lt;Color, String&gt; colorMap = new EnumMap&lt;&gt;(Color.class); // Compliant\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://www.baeldung.com/java-enum-map\">A Guide to EnumMap - Baeldung</a> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "EFFICIENT",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S1641",
            "repo": "java",
            "name": "Sets with elements that are enum values should be replaced with EnumSet",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "performance"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1641"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>When all the elements in a Set are values from the same enum, the Set can be replaced with an EnumSet, which can be much more efficient than other\nsets because the underlying data structure is a simple bitmap.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class MyClass {\n\n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void doSomething() {\n    Set&lt;COLOR&gt; warm = new HashSet&lt;COLOR&gt;();\n    warm.add(COLOR.RED);\n    warm.add(COLOR.ORANGE);\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic class MyClass {\n\n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void doSomething() {\n    Set&lt;COLOR&gt; warm = EnumSet.of(COLOR.RED, COLOR.ORANGE);\n  }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "EFFICIENT",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S1643",
            "repo": "java",
            "name": "Strings should not be concatenated using '+' in a loop",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "performance"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1643"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Strings are immutable objects, so concatenation doesn’t simply add the new String to the end of the existing string. Instead, in each loop\niteration, the first String is converted to an intermediate object type, the second string is appended, and then the intermediate object is converted\nback to a String. Further, performance of these intermediate operations degrades as the String gets longer. Therefore, the use of StringBuilder is\npreferred.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nString str = \"\";\nfor (int i = 0; i &lt; arrayOfStrings.length ; ++i) {\n  str = str + arrayOfStrings[i];\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nStringBuilder bld = new StringBuilder();\n  for (int i = 0; i &lt; arrayOfStrings.length; ++i) {\n    bld.append(arrayOfStrings[i]);\n  }\n  String str = bld.toString();\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "EFFICIENT",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S1698",
            "repo": "java",
            "name": "\"==\" and \"!=\" should not be used when \"equals\" is overridden",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "cert",
                "suspicious"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1698"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>It is equivalent to use the equality <code>==</code> operator and the <code>equals</code> method to compare two objects if the <code>equals</code>\nmethod inherited from <code>Object</code> has not been overridden. In this case both checks compare the object references.</p>\n<p>But as soon as <code>equals</code> is overridden, two objects not having the same reference but having the same value can be equal. This rule spots\nsuspicious uses of <code>==</code> and <code>!=</code> operators on objects whose <code>equals</code> methods are overridden.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nString firstName = getFirstName(); // String overrides equals\nString lastName = getLastName();\n\nif (firstName == lastName) { ... }; // Non-compliant; false even if the strings have the same value\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nString firstName = getFirstName();\nString lastName = getLastName();\n\nif (firstName != null &amp;&amp; firstName.equals(lastName)) { ... };\n</pre>\n<h3>Exceptions</h3>\n<p>Comparing two instances of the <code>Class</code> object will not raise an issue:</p>\n<pre>\nClass c;\nif(c == Integer.class) { // No issue raised\n}\n</pre>\n<p>Comparing <code>Enum</code> will not raise an issue:</p>\n<pre>\npublic enum Fruit {\n   APPLE, BANANA, GRAPE\n}\npublic boolean isFruitGrape(Fruit candidateFruit) {\n  return candidateFruit == Fruit.GRAPE; // it's recommended to activate S4551 to enforce comparison of Enums using ==\n}\n</pre>\n<p>Comparing with <code>final</code> reference will not raise an issue:</p>\n<pre>\nprivate static final Type DEFAULT = new Type();\n\nvoid foo(Type other) {\n  if (other == DEFAULT) { // Compliant\n  //...\n  }\n}\n</pre>\n<p>Comparing with <code>this</code> will not raise an issue:</p>\n<pre>\n  public boolean equals(Object other) {\n    if (this == other) {  // Compliant\n      return false;\n    }\n }\n</pre>\n<p>Comparing with <code>java.lang.String</code> and boxed types <code>java.lang.Integer</code>, …​ will not raise an issue.</p>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href='/coding_rules#rule_key=java%3AS4973'>S4973</a> - Strings and Boxed types should be compared using \"equals()\" </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/595\">CWE-595 - Comparison of Object References Instead of Object Contents</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/597\">CWE-597 - Use of Wrong Operator in String Comparison</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/UjdGBQ\">CERT, EXP03-J.</a> - Do not use the equality operators when comparing values of boxed\n  primitives </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/yDdGBQ\">CERT, EXP50-J.</a> - Do not confuse abstract object equality with reference equality\n  </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S1764",
            "repo": "java",
            "name": "Identical expressions should not be used on both sides of a binary operator",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1764"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Using the same value on both sides of a binary operator is a code defect. In the case of logical operators, it is either a copy/paste error and,\ntherefore, a bug, or it is simply duplicated code and should be simplified. In the case of bitwise operators and most binary mathematical operators,\nhaving the same value on both sides of an operator yields predictable results and should be simplified as well.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nif ( a == a ) { // always true\n  doZ();\n}\nif ( a != a ) { // always false\n  doY();\n}\nif ( a == b &amp;&amp; a == b ) { // if the first one is true, the second one is too\n  doX();\n}\nif ( a == b || a == b ) { // if the first one is true, the second one is too\n  doW();\n}\n\nint j = 5 / 5; //always 1\nint k = 5 - 5; //always 0\n\nc.equals(c); //always true\n</pre>\n<h3>Exceptions</h3>\n<ul>\n  <li> This rule ignores <code>*</code>, <code>+</code>, and <code>=</code>. </li>\n  <li> The specific case of testing a floating point value against itself is a valid test for <code>NaN</code> and is therefore ignored. </li>\n  <li> Similarly, left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored. </li>\n</ul>\n<pre>\nfloat f;\nif(f != f) { //test for NaN value\n  System.out.println(\"f is NaN\");\n}\n\nint i = 1 &lt;&lt; 1; // Compliant\nint j = a &lt;&lt; a; // Noncompliant\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/5dUxBQ\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed\n  </li>\n  <li> <a href='/coding_rules#rule_key=java%3AS1656'>S1656</a> - Implements a check on <code>=</code>. </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S2612",
            "repo": "java",
            "name": "Setting loose POSIX file permissions is security-sensitive",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "SECURITY_HOTSPOT",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2612"
                ]
            },
            "descriptionSections": [
                {
                    "key": "how_to_fix",
                    "content": "<h2>Recommended Secure Coding Practices</h2>\n<p>The most restrictive possible permissions should be assigned to files and directories.</p>\n<h2>Compliant Solution</h2>\n<p>On operating systems that implement POSIX standard. This will throw a <code>UnsupportedOperationException</code> on Windows.</p>\n<pre>\n    public void setPermissionsSafe(String filePath) throws IOException {\n        Set&lt;PosixFilePermission&gt; perms = new HashSet&lt;PosixFilePermission&gt;();\n        // user permission\n        perms.add(PosixFilePermission.OWNER_READ);\n        perms.add(PosixFilePermission.OWNER_WRITE);\n        perms.add(PosixFilePermission.OWNER_EXECUTE);\n        // group permissions\n        perms.add(PosixFilePermission.GROUP_READ);\n        perms.add(PosixFilePermission.GROUP_EXECUTE);\n        // others permissions removed\n        perms.remove(PosixFilePermission.OTHERS_READ); // Compliant\n        perms.remove(PosixFilePermission.OTHERS_WRITE); // Compliant\n        perms.remove(PosixFilePermission.OTHERS_EXECUTE); // Compliant\n\n        Files.setPosixFilePermissions(Paths.get(filePath), perms);\n    }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">Top 10 2021 Category A1 - Broken Access Control</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A04_2021-Insecure_Design/\">Top 10 2021 Category A4 - Insecure Design</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\">Top 10 2017 Category A5 - Broken Access Control</a>\n  </li>\n  <li> <a\n  href=\"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission\">OWASP File Permission</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/732\">CWE-732 - Incorrect Permission Assignment for Critical Resource</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/266\">CWE-266 - Incorrect Privilege Assignment</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/display/java/FIO01-J.+Create+files+with+appropriate+access+permissions\">CERT, FIO01-J.</a> -\n  Create files with appropriate access permissions </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/display/c/FIO06-C.+Create+files+with+appropriate+access+permissions\">CERT, FIO06-C.</a> - Create\n  files with appropriate access permissions </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222430\">Application Security and\n  Development: V-222430</a> - The application must execute without excessive account permissions. </li>\n</ul>"
                },
                {
                    "key": "default",
                    "content": "<p>In Unix file system permissions, the \"<code>others</code>\" category refers to all users except the owner of the file system resource and the\nmembers of the group assigned to this resource.</p>\n<p>Granting permissions to this category can lead to unintended access to files or directories that could allow attackers to obtain sensitive\ninformation, disrupt services or elevate privileges.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The application is designed to be run on a multi-user environment. </li>\n  <li> Corresponding files and directories may contain confidential information. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>The most restrictive possible permissions should be assigned to files and directories.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\n    public void setPermissions(String filePath) {\n        Set&lt;PosixFilePermission&gt; perms = new HashSet&lt;PosixFilePermission&gt;();\n        // user permission\n        perms.add(PosixFilePermission.OWNER_READ);\n        perms.add(PosixFilePermission.OWNER_WRITE);\n        perms.add(PosixFilePermission.OWNER_EXECUTE);\n        // group permissions\n        perms.add(PosixFilePermission.GROUP_READ);\n        perms.add(PosixFilePermission.GROUP_EXECUTE);\n        // others permissions\n        perms.add(PosixFilePermission.OTHERS_READ); // Sensitive\n        perms.add(PosixFilePermission.OTHERS_WRITE); // Sensitive\n        perms.add(PosixFilePermission.OTHERS_EXECUTE); // Sensitive\n\n        Files.setPosixFilePermissions(Paths.get(filePath), perms);\n    }\n</pre>\n<pre>\n    public void setPermissionsUsingRuntimeExec(String filePath) {\n        Runtime.getRuntime().exec(\"chmod 777 file.json\"); // Sensitive\n    }\n</pre>\n<pre>\n    public void setOthersPermissionsHardCoded(String filePath ) {\n        Files.setPosixFilePermissions(Paths.get(filePath), PosixFilePermissions.fromString(\"rwxrwxrwx\")); // Sensitive\n    }\n</pre>\n<h2>Compliant Solution</h2>\n<p>On operating systems that implement POSIX standard. This will throw a <code>UnsupportedOperationException</code> on Windows.</p>\n<pre>\n    public void setPermissionsSafe(String filePath) throws IOException {\n        Set&lt;PosixFilePermission&gt; perms = new HashSet&lt;PosixFilePermission&gt;();\n        // user permission\n        perms.add(PosixFilePermission.OWNER_READ);\n        perms.add(PosixFilePermission.OWNER_WRITE);\n        perms.add(PosixFilePermission.OWNER_EXECUTE);\n        // group permissions\n        perms.add(PosixFilePermission.GROUP_READ);\n        perms.add(PosixFilePermission.GROUP_EXECUTE);\n        // others permissions removed\n        perms.remove(PosixFilePermission.OTHERS_READ); // Compliant\n        perms.remove(PosixFilePermission.OTHERS_WRITE); // Compliant\n        perms.remove(PosixFilePermission.OTHERS_EXECUTE); // Compliant\n\n        Files.setPosixFilePermissions(Paths.get(filePath), perms);\n    }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">Top 10 2021 Category A1 - Broken Access Control</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A04_2021-Insecure_Design/\">Top 10 2021 Category A4 - Insecure Design</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\">Top 10 2017 Category A5 - Broken Access Control</a>\n  </li>\n  <li> <a\n  href=\"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission\">OWASP File Permission</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/732\">CWE-732 - Incorrect Permission Assignment for Critical Resource</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/266\">CWE-266 - Incorrect Privilege Assignment</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/display/java/FIO01-J.+Create+files+with+appropriate+access+permissions\">CERT, FIO01-J.</a> -\n  Create files with appropriate access permissions </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/display/c/FIO06-C.+Create+files+with+appropriate+access+permissions\">CERT, FIO06-C.</a> - Create\n  files with appropriate access permissions </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222430\">Application Security and\n  Development: V-222430</a> - The application must execute without excessive account permissions. </li>\n</ul>"
                },
                {
                    "key": "assess_the_problem",
                    "content": "<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The application is designed to be run on a multi-user environment. </li>\n  <li> Corresponding files and directories may contain confidential information. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\n    public void setPermissions(String filePath) {\n        Set&lt;PosixFilePermission&gt; perms = new HashSet&lt;PosixFilePermission&gt;();\n        // user permission\n        perms.add(PosixFilePermission.OWNER_READ);\n        perms.add(PosixFilePermission.OWNER_WRITE);\n        perms.add(PosixFilePermission.OWNER_EXECUTE);\n        // group permissions\n        perms.add(PosixFilePermission.GROUP_READ);\n        perms.add(PosixFilePermission.GROUP_EXECUTE);\n        // others permissions\n        perms.add(PosixFilePermission.OTHERS_READ); // Sensitive\n        perms.add(PosixFilePermission.OTHERS_WRITE); // Sensitive\n        perms.add(PosixFilePermission.OTHERS_EXECUTE); // Sensitive\n\n        Files.setPosixFilePermissions(Paths.get(filePath), perms);\n    }\n</pre>\n<pre>\n    public void setPermissionsUsingRuntimeExec(String filePath) {\n        Runtime.getRuntime().exec(\"chmod 777 file.json\"); // Sensitive\n    }\n</pre>\n<pre>\n    public void setOthersPermissionsHardCoded(String filePath ) {\n        Files.setPosixFilePermissions(Paths.get(filePath), PosixFilePermissions.fromString(\"rwxrwxrwx\")); // Sensitive\n    }\n</pre>\n"
                },
                {
                    "key": "root_cause",
                    "content": "<p>In Unix file system permissions, the \"<code>others</code>\" category refers to all users except the owner of the file system resource and the\nmembers of the group assigned to this resource.</p>\n<p>Granting permissions to this category can lead to unintended access to files or directories that could allow attackers to obtain sensitive\ninformation, disrupt services or elevate privileges.</p>\n"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "impacts": []
        },
        {
            "key": "java:S2737",
            "repo": "java",
            "name": "\"catch\" clauses should do more than rethrow",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "error-handling",
                "unused",
                "finding",
                "clumsy"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2737"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>A <code>catch</code> clause that only rethrows the caught exception has the same effect as omitting the <code>catch</code> altogether and letting\nit bubble up automatically.</p>\n<pre>\npublic String readFile(File f) throws IOException {\n  String content;\n  try {\n    content = readFromDisk(f);\n  } catch (IOException e) {\n    throw e;\n  }\n  return content;\n}\n</pre>\n<p>Such clauses should either be removed or populated with the appropriate logic.</p>\n<pre>\npublic String readFile(File f) throws IOException {\n  return readFromDisk(f);\n}\n</pre>\n<p>or</p>\n<pre>\npublic String readFile(File f) throws IOException {\n  String content;\n  try {\n    content = readFromDisk(f);\n  } catch (IOException e) {\n    logger.LogError(e);\n    throw e;\n  }\n  return content;\n}\n</pre>\n<p>In the case of try-with-resources, the try should remain even without a catch clause, to keep the resource management</p>\n<pre>\nString readFirstLine(FileReader fileReader) throws IOException {\n  try (BufferedReader br = new BufferedReader(fileReader)) {\n     return br.readLine();\n  } catch (IOException e) { // Noncompliant\n  throw e;\n}\n</pre>\n<p>becomes</p>\n<pre>\nString readFirstLine(FileReader fileReader) throws IOException {\n  try (BufferedReader br = new BufferedReader(fileReader)) {\n     return br.readLine();\n  }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S2786",
            "repo": "java",
            "name": "Nested \"enum\"s should not be declared static",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "redundant"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2786"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>In Java, an enum is a special data type that allows you to define a set of constants. Nested enum types, also known as inner enum types, are enum\ntypes that are defined within another class or interface.</p>\n<p>Nested enum types are implicitly static, so there is no need to declare them <code>static</code> explicitly.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class Flower {\n  static enum Color { // Noncompliant; static is redundant here\n    RED, YELLOW, BLUE, ORANGE\n  }\n  // ...\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class Flower {\n  enum Color { // Compliant\n    RED, YELLOW, BLUE, ORANGE\n  }\n  // ...\n}\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/specs/jls/se20/html/jls-8.html#jls-8.9\">Java Language Specification-8.9</a> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S2970",
            "repo": "java",
            "name": "Assertions should be complete",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "tests",
                "assertj",
                "mockito"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "TEST",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2970"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>It is very easy to write incomplete assertions when using some test frameworks. This rule enforces complete assertions in the following cases:</p>\n<ul>\n  <li> Fest: <code>assertThat</code> is not followed by an assertion invocation </li>\n  <li> AssertJ: <code>assertThat</code> is not followed by an assertion invocation </li>\n  <li> Mockito: <code>verify</code> is not followed by a method invocation </li>\n  <li> Truth: <code>assertXXX</code> is not followed by an assertion invocation </li>\n</ul>\n<p>In such cases, what is intended to be a test doesn’t actually verify anything</p>\n<h3>Noncompliant code example</h3>\n<pre>\n// Fest\nboolean result = performAction();\n// let's now check that result value is true\nassertThat(result); // Noncompliant; nothing is actually checked, the test passes whether \"result\" is true or false\n\n// Mockito\nList mockedList = Mockito.mock(List.class);\nmockedList.add(\"one\");\nmockedList.clear();\n// let's check that \"add\" and \"clear\" methods are actually called\nMockito.verify(mockedList); // Noncompliant; nothing is checked here, oups no call is chained to verify()\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n// Fest\nboolean result = performAction();\n// let's now check that result value is true\nassertThat(result).isTrue();\n\n// Mockito\nList mockedList = Mockito.mock(List.class);\nmockedList.add(\"one\");\nmockedList.clear();\n// let's check that \"add\" and \"clear\" methods are actually called\nMockito.verify(mockedList).add(\"one\");\nMockito.verify(mockedList).clear();\n</pre>\n<h3>Exceptions</h3>\n<p>Variable assignments and return statements are skipped to allow helper methods.</p>\n<pre>\nprivate BooleanAssert check(String filename, String key) {\n  String fileContent = readFileContent(filename);\n  performReplacements(fileContent);\n  return assertThat(fileContent.contains(key)); // No issue is raised here\n}\n\n@Test\npublic void test() {\n  check(\"foo.txt\", \"key1\").isTrue();\n  check(\"bar.txt\", \"key2\").isTrue();\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "TESTED",
            "cleanCodeAttributeCategory": "ADAPTABLE",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "BLOCKER"
                }
            ]
        },
        {
            "key": "java:S2972",
            "repo": "java",
            "name": "Inner classes should not have too many lines of code",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "brain-overload"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "Max",
                    "htmlDesc": "The maximum number of lines allowed",
                    "defaultValue": "25",
                    "type": "INTEGER"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2972"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Inner classes should be short and sweet, to manage complexity in the overall file. An inner class that has grown longer than a certain threshold\nshould probably be externalized to its own file.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "FOCUSED",
            "cleanCodeAttributeCategory": "ADAPTABLE",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S2973",
            "repo": "java",
            "name": "Escaped Unicode characters should not be used",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "confusing"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2973"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content":"<p>The use of Unicode escape sequences should be reserved for characters that would otherwise be ambiguous, such as unprintable characters.</p>\n<p>This rule ignores sequences composed entirely of Unicode characters, but otherwise raises an issue for each Unicode character that represents a\nprintable character.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nString prefix = \"née\"; // Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nString prefix = \"née\";\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S2974",
            "repo": "java",
            "name": "Classes without \"public\" constructors should be \"final\"",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "design"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2974"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Classes with only <code>private</code> constructors should be marked <code>final</code> to prevent any mistaken extension attempts.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class PrivateConstructorClass {  // Noncompliant\n  private PrivateConstructorClass() {\n    // ...\n  }\n\n  public static int magic(){\n    return 42;\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic final class PrivateConstructorClass {  // Compliant\n  private PrivateConstructorClass() {\n    // ...\n  }\n\n  public static int magic(){\n    return 42;\n  }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S2975",
            "repo": "java",
            "name": "\"clone\" should not be overridden",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "suspicious"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "30min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "30min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2975"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>The <code>Object.clone</code> / <code>java.lang.Cloneable</code> mechanism in Java should be considered broken for the following reasons and\nshould, consequently, not be used:</p>\n<ul>\n  <li> <code>Cloneable</code> is a <em>marker interface</em> without API but with a contract about class behavior that the compiler cannot enforce.\n  This is a bad practice. </li>\n  <li> Classes are instantiated without calling their constructor, so possible preconditions cannot be enforced. </li>\n  <li> There are implementation flaws by design when overriding <code>Object.clone</code>, like type casts or the handling of\n  <code>CloneNotSupportedException</code> exceptions. </li>\n</ul>"
                },
                {
                    "key": "introduction",
                    "content": "<p>This rule raises an issue when a class overrides the <code>Object.clone</code> method instead of resorting to a copy constructor or other copy\nmechanisms.</p>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>A copy constructor, copy factory or a custom copy function are suitable alternatives to the <code>Object.clone</code> /\n<code>java.lang.Cloneable</code> mechanism.</p>\n<p>Consider the following example:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass Entity implements Cloneable { // Noncompliant, using `Cloneable`\n\n  public int value;\n  public List&lt;Entity&gt; children; // deep copy wanted\n\n  Entity() {\n    EntityManager.register(this); // invariant\n  }\n\n  @Override\n  public Entity clone() {\n    try {\n      Entity copy = (Entity) super.clone(); // invariant not enforced, because no constructor is caled\n      copy.children = children.stream().map(Entity::clone).toList();\n      return copy;\n    } catch (CloneNotSupportedException e) { // this will not happen due to behavioral contract\n      throw new AssertionError();\n    }\n  }\n}\n</pre>\n<p>The <code>Cloneable</code> / <code>Object.clone</code> mechanism could easily be replaced by copy constructor:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass Entity { // Compliant\n\n  public int value;\n  public List&lt;Entity&gt; children; // deep copy wanted\n\n  Entity() {\n    EntityManager.register(this); // invariant\n  }\n\n  Entity(Entity template) {\n    value = template.value;\n    children = template.children.stream().map(Entity::new).toList();\n  }\n}\n</pre>\n<p>Or by a factory method:</p>\n<pre>\nclass Entity { // Compliant\n\n  public int value;\n  public List&lt;Entity&gt; children; // deep copy wanted\n\n  Entity() {\n    EntityManager.register(this); // invariant\n  }\n\n  public static Entity create(Entity template) {\n    Entity entity = new Entity();\n    entity.value = template.value;\n    entity.children = template.children.stream().map(Entity::new).toList();\n    return Entity;\n  }\n}\n</pre>\n<p>Or by a custom <code>copy</code> function:</p>\n<pre>\nclass Entity { // Compliant\n\n  public int value;\n  public List&lt;Entity&gt; children; // deep copy wanted\n\n  Entity() {\n    EntityManager.register(this); // invariant\n  }\n\n  public Entity copy() {\n    Entity entity = new Entity();\n    entity.value = value;\n    entity.children = children.stream().map(Entity::new).toList();\n    return Entity;\n  }\n}\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://www.artima.com/intv/bloch13.html\">Joshua Bloch - Copy Constructor versus Cloning</a> </li>\n  <li> <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Cloneable.html\">Interface Cloneable - Java™ Platform, Standard Edition 8 API\n  Specification</a> </li>\n  <li> <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">Object.clone - Java™ Platform, Standard Edition 8 API\n  Specification</a> </li>\n</ul>\n<h3>Related rules</h3>\n<ul>\n  <li> <a href='/coding_rules#rule_key=java%3AS2157'>S2157</a> - \"Cloneables\" should implement \"clone\" </li>\n  <li> <a href='/coding_rules#rule_key=java%3AS1182'>S1182</a> - Classes that override \"clone\" should be \"Cloneable\" and call \"super.clone()\" </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "BLOCKER"
                }
            ]
        },
        {
            "key": "java:S3824",
            "repo": "java",
            "name": "\"Map.get\" and value test should be replaced with single method call",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "symbolic-execution",
                "java8"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>It’s a common pattern to test the result of a <code>java.util.Map.get()</code> against <code>null</code> or calling\n<code>java.util.Map.containsKey()</code> before proceeding with adding or changing the value in the map. However the <code>java.util.Map</code> API\noffers a significantly better alternative in the form of the <code>computeIfPresent()</code> and <code>computeIfAbsent()</code> methods. Using these\ninstead leads to cleaner and more readable code.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project’s <code>sonar.java.source</code> is not 8.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nV value = map.get(key);\nif (value == null) {  // Noncompliant\n  value = V.createFor(key);\n  if (value != null) {\n    map.put(key, value);\n  }\n}\nif (!map.containsKey(key)) {  // Noncompliant\n  value = V.createFor(key);\n  if (value != null) {\n    map.put(key, value);\n  }\n}\nreturn value;\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nreturn map.computeIfAbsent(key, k -&gt; V.createFor(k));\n</pre>\n<h3>Exceptions</h3>\n<p>This rule will not raise an issue when trying to add <code>null</code> to a map, because <code>computeIfAbsent</code> will not add the entry if the\nvalue returned by the function is <code>null</code>.</p>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Related rules</h3>\n<ul>\n  <li> <a href='/coding_rules#rule_key=java%3AS6104'>S6104</a> - Map \"computeIfAbsent()\" and \"computeIfPresent()\" should not be used to add \"null\" values. </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S4602",
            "repo": "java",
            "name": "\"@SpringBootApplication\" and \"@ComponentScan\" should not be used in the default package",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "spring"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S4602"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p><code>@ComponentScan</code> is used to determine which Spring Beans are available in the application context. The packages to scan can be\nconfigured thanks to the <code>basePackageClasses</code> or <code>basePackages</code> (or its alias <code>value</code>) parameters. If neither\nparameter is configured, <code>@ComponentScan</code> will consider only the package of the class annotated with it. When <code>@ComponentScan</code>\nis used on a class belonging to the default package, the entire classpath will be scanned.</p>\n<p>This will slow-down the start-up of the application and it is likely the application will fail to start with an\n<code>BeanDefinitionStoreException</code> because you ended up scanning the Spring Framework package itself.</p>\n<p>This rule raises an issue when:</p>\n<ul>\n  <li> <code>@ComponentScan</code>, <code>@SpringBootApplication</code> and <code>@ServletComponentScan</code> are used on a class belonging to the\n  default package </li>\n  <li> <code>@ComponentScan</code> is explicitly configured with the default package </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<pre>\nimport org.springframework.boot.SpringApplication;\n\n@SpringBootApplication // Noncompliant; RootBootApp is declared in the default package\npublic class RootBootApp {\n...\n}\n</pre>\n<pre>\n@ComponentScan(\"\")\npublic class Application {\n...\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npackage hello;\n\nimport org.springframework.boot.SpringApplication;\n\n@SpringBootApplication // Compliant; RootBootApp belongs to the \"hello\" package\npublic class RootBootApp {\n...\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "BLOCKER"
                }
            ]
        },
        {
            "key": "java:S5810",
            "repo": "java",
            "name": "JUnit5 test classes and methods should not be silently ignored",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "junit",
                "tests"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "TEST",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5810"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>JUnit5 is more tolerant regarding the visibilities of Test classes and methods than JUnit4, which required everything to be public. JUnit5 supports\ndefault package, public and protected visibility, even if it is recommended to use the default package visibility, which improves the readability of\ncode.</p>\n<p>But JUnit5 ignores without any warning:</p>\n<ul>\n  <li> private classes and private methods </li>\n  <li> static methods </li>\n  <li> methods returning a value without being a TestFactory </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<pre>\nimport org.junit.jupiter.api.Test;\n\nclass MyClassTest {\n  @Test\n  private void test1() { // Noncompliant - ignored by JUnit5\n    // ...\n  }\n  @Test\n  static void test2() { // Noncompliant - ignored by JUnit5\n    // ...\n  }\n  @Test\n  boolean test3() { // Noncompliant - ignored by JUnit5\n    // ...\n  }\n  @Nested\n  private class MyNestedClass { // Noncompliant - ignored by JUnit5\n    @Test\n    void test() {\n      // ...\n    }\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nimport org.junit.jupiter.api.Test;\n\nclass MyClassTest {\n  @Test\n  void test1() {\n    // ...\n  }\n  @Test\n  void test2() {\n    // ...\n  }\n  @Test\n  void test3() {\n    // ...\n  }\n  @Nested\n  class MyNestedClass {\n    @Test\n    void test() {\n      // ...\n    }\n  }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "TESTED",
            "cleanCodeAttributeCategory": "ADAPTABLE",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S7177",
            "repo": "java",
            "name": "Use appropriate @DirtiesContext modes",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "spring",
                "tests"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "TEST",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S7177"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>In a Spring application, the <code>@DirtiesContext</code> annotation marks the ApplicationContext as dirty and indicates that it should be cleared\nand recreated. This is important in tests that modify the context, such as altering the state of singleton beans or databases.</p>\n<p>Misconfiguring <code>@DirtiesContext</code> by setting the <code>methodMode</code> at the class level or the <code>classMode</code> at the method\nlevel will make the annotation have no effect.</p>\n<p>This rule will raise an issue when the incorrect mode is configured on a @DirtiesContext annotation targeting a different scope.</p>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@ContextConfiguration\n@DirtiesContext(methodMode = MethodMode.AFTER_METHOD) // Noncompliant, for class-level control, use classMode instead.\npublic class TestClass {\n  @DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_CLASS) // Non compliant, for method-level control use methodMode instead\n  public void test() {...}\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@ContextConfiguration\n@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_CLASS)\npublic class TestClass {\n  @DirtiesContext(methodMode = MethodMode.AFTER_METHOD)\n  public void test() {...}\n}\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> Spring documentation - <a\n  href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/test/annotation/DirtiesContext.html\">@DirtiesContext</a>\n  </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S7178",
            "repo": "java",
            "name": "Injecting data into static fields is not supported by Spring",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "spring"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S7178"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Spring dependency injection framework does not support injecting data into static fields. When @Value, @Inject, or @Autowired are applied to static\nfields, they are ignored.</p>\n<h3>What is the potential impact?</h3>\n<ul>\n  <li> <strong>Null Values</strong>: Uninitialized static fields annotated with @Value, @Inject, or @Autowired will not be initialized by Spring,\n  potentially causing NullPointerException at runtime. </li>\n  <li> <strong>Confusing Code</strong>: The presence of injection annotations on static fields can mislead developers into believing that the fields\n  will be populated by Spring. </li>\n</ul>\n<p>This rule raises an issue when a static field is annotated with @Value, @Inject, or @Autowired.</p>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> Java Guides - <a href=\"https://www.baeldung.com/spring-inject-static-field\">Injecting a Value in a Static Field in Spring</a> </li>\n</ul>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>Either use an instance field instead of a static field or remove the @Value, @Inject, or @Autowired annotation and initialize the field.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@Component\npublic class MyComponent {\n\n    @Value(\"${my.app.prop}\")\n    private static SomeDependency dependency; // non compliant, @Value will be ignored and no value will be injected\n    // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@Component\npublic class MyComponent {\n\n    @Value(\"${my.app.prop}\")\n    private final SomeDependency dependency;\n    // ...\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                },
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "HIGH"
                },
                {
                    "softwareQuality": "SECURITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S7179",
            "repo": "java",
            "name": "@Cacheable and @CachePut should not be combined",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "spring"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S7179"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> Spring Documentation - <a\n  href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/cache/annotation/CachePut.html\">@CachePut</a> </li>\n  <li> Spring Documentation - <a\n  href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/cache/annotation/Cacheable.html\">@Cacheable</a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p><code>@Cacheable</code> annotation is used to store the result of a method and avoid executing it for the same inputs. <code>@CachePut</code>\ninstead is used to force the execution of a method and store the result in the cache. Annotating a method with both will produce unreliable behavior,\nexcept for specific corner-cases when their <code>condition()</code> or <code>unless()</code> expressions are mutually exclusive. Hence this pattern\nis strongly discouraged and an issue will be raised on such cases.</p>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@Cacheable\n@CachePut\nvoid getBook(String isbn){ // Non compliant, methods annotated with both @Cacheable and @CachePut will not behave as intended\n    ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@Cacheable\nvoid getBook(String isbn){\n    ...\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S7180",
            "repo": "java",
            "name": "\"@Cache*\" annotations should only be applied on concrete classes",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "spring"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S7180"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Annotating interfaces or interface methods with <code>@Cache*</code> annotations is not recommended by the official Spring documentation. If you\nuse the weaving-based aspect (mode=\"aspectj\"), the <code>@Cache*</code> annotations will be ignored, and no caching proxy will be created.</p>\n<h3>What is the potential impact?</h3>\n<ul>\n  <li> <strong>Confusing Code</strong>: Developers may mistakenly believe that caching is in effect, leading to confusion and incorrect assumptions\n  about application performance. </li>\n</ul>\n<p>This rule raises an issue when an interface or an interface method is annotated with a <code>@Cache*</code> annotation.</p>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>Move <code>@Cache*</code> annotation from interface or interface method to the concrete class.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic interface ExampleService {\n\n    @Cacheable(\"exampleCache\") //non compliant, interface method is annotated with @Cacheable\n    String getData(String id);\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@Service\npublic class ExampleServiceImpl implements ExampleService {\n\n    @Cacheable(\"exampleCache\")\n    @Override\n    public String getData(String id) {\n        // Implementation here\n    }\n}\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> Spring - <a href=\"https://docs.spring.io/spring-framework/reference/integration/cache/annotations.html#cache-annotation-enable\">Declarative\n  Annotation-based Caching</a> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                },
                {
                    "softwareQuality": "SECURITY",
                    "severity": "LOW"
                },
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S7183",
            "repo": "java",
            "name": "@InitBinder methods should have void return type",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "spring"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S7183"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Spring provides the <code>@InitBinder</code> annotation to initialize a <code>WebDataBinder</code> instance for controllers. This is useful to bind\nrequest parameters to a model object, and to plug converters and formatters into this process.</p>\n<p>Methods annotated with <code>@InitBinder</code> must not have a return value, otherwise the controller containing them will throw an exception when\ninvoked.</p>\n<p>This rule raises an issue when a method annotated with <code>@InitBinder</code> does not have a <code>void</code> return type</p>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@Controller\npublic class MyController {\n\n\t@InitBinder\n\tpublic String initBinder(WebDataBinder binder) { // Non compliant, make the @InitBinder method return void\n\t\tSimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\n\t\tdateFormat.setLenient(false);\n\t\tbinder.registerCustomEditor(Date.class, new CustomDateEditor(dateFormat, false));\n        return \"OK\";\n\t}\n\n\t// ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@Controller\npublic class MyController {\n\n\t@InitBinder\n\tpublic void initBinder(WebDataBinder binder) {\n\t\tSimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\n\t\tdateFormat.setLenient(false);\n\t\tbinder.registerCustomEditor(Date.class, new CustomDateEditor(dateFormat, false));\n\t}\n\n\t// ...\n}\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> Spring api - <a\n  href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/InitBinder.html\">@InitBinder api</a>\n  </li>\n  <li> String documentation - <a href=\"https://docs.spring.io/spring-framework/reference/web/webmvc/mvc-controller/ann-initbinder.html\">@InitBinder\n  docs</a> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "SECURITY",
                    "severity": "LOW"
                },
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S7184",
            "repo": "java",
            "name": "\"@Scheduled\" annotation should only be applied to no-arg methods",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "spring"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S7184"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>According to Spring documentation, the <code>@Scheduled</code> annotation can only be applied to methods without arguments. Applying @Scheduled to\na method with arguments will result in a runtime error.</p>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>Transform method annotated with <code>@Scheduled</code> into a no-arg method.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class ExampleService {\n\n    @Scheduled(fixedRate = 5000)\n    public void scheduledTask(String param) { // non compliant, method has an argument. It will raise a runtime error.\n        // Task implementation\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class ExampleService {\n\n    @Scheduled(fixedRate = 5000)\n    public void scheduledTask() { // compliant, no-arg method\n        // Task implementation\n    }\n}\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> Spring - <a\n  href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/scheduling/annotation/Scheduled.html\">scheduled</a> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                },
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "HIGH"
                },
                {
                    "softwareQuality": "SECURITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S7185",
            "repo": "java",
            "name": "@EventListener methods should have one parameter at most",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "spring"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S7185"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<p>Spring API - <a\nhref=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/event/EventListener.html\">@EventListener</a></p>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Spring provides the <code>@EventListener</code> annotation as a simpler alternative to implementing the <code>ApplicationListener</code> interface\nfor handling events. The <code>@EventListener</code> annotation registers a method as an event handler. This allows to skip the implementation of the\n<code>ApplicationListener</code> interface, making it easier to handle events.</p>\n<p>The <code>@EventListener</code> annotation can only be used on methods that have at most one parameter, which should be the specific event that we\nwant to handle. To listen to several types of events, use the <code>classes</code> argument of the <code>@EventListener</code> annotation.</p>\n<p>This rule raises an issue on all methods annotated with <code>@EventListener</code> that have more than one parameter.</p>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@EventListener\nvoid handleEvent(CustomerEvent customerEvent, ExceptionalEvent exceptionalEvent) { // Non compliant, this will cause a runtime error\n    //... some event handling\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@EventListener(classes = {CustomerEvent.class, ExceptionalEvent.class})\nvoid handleEvent(ApplicationEvent event) { // Only one parameter, of the super type `ApplicationEvent`\n    //... some event handling\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S7186",
            "repo": "java",
            "name": "Methods returning \"Page\" or \"Slice\" must take \"Pageable\" as an input parameter",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "spring"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S7186"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> Spring - <a href=\"https://docs.spring.io/spring-data/jpa/reference/jpa/query-methods.html\">JPA Query Methods</a> </li>\n  <li> Spring - <a\n  href=\"https://docs.spring.io/spring-data/jpa/reference/repositories/query-methods-details.html#repositories.paging-and-sorting\">Defining Query\n  Methods</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> Spring Guides - <a href=\"https://reflectoring.io/spring-boot-paging/\">Paging with Spring Boot</a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Spring Data Repository supports paging for queries, allowing you to return results in small, manageable chunks rather than retrieving an entire\nlarge result set.</p>\n<p>The conventional approach to paginating data in Spring is to use the <code>Pageable</code> interface to control pagination and to store the query\nresults into a <code>Page</code> or <code>Slice</code>. If a query method in a <code>Repository</code> returns a <code>Page</code> or\n<code>Slice</code> without taking a <code>Pageable</code> as an input, it raises a runtime exception.</p>\n<p>This rule raises an issue on queries in a <code>Repository</code> that return a <code>Page</code> or <code>Slice</code> without taking a\n<code>Pageable</code> as an input.</p>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>Ensure that query methods returning a <code>Page</code> or <code>Slice</code> include a <code>Pageable</code> parameter in their method\nsignature.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic Page&lt;Item&gt; findItems() { //non compliant, no Pageable parameter\n    // query\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic Page&lt;Item&gt; findItems(Pageable pageable) {\n    // query\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                },
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "HIGH"
                },
                {
                    "softwareQuality": "SECURITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S1210",
            "repo": "java",
            "name": "\"equals(Object obj)\" should be overridden along with the \"compareTo(T obj)\" method",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1210"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>According to the Java <code>Comparable.compareTo(T o)</code> documentation:</p>\n<blockquote>\n  <p>It is strongly recommended, but not strictly required that <code>(x.compareTo(y)==0) == (x.equals(y))</code>.</p>\n  <p>Generally speaking, any class that implements the Comparable interface and violates this condition should clearly indicate this fact.</p>\n  <p>The recommended language is \"Note: this class has a natural ordering that is inconsistent with equals.\"</p>\n</blockquote>\n<p>If this rule is violated, weird and unpredictable failures can occur.</p>\n<p>For example, in Java 5 the <code>PriorityQueue.remove()</code> method relied on <code>compareTo()</code>, but since Java 6 it has relied on\n<code>equals()</code>.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class Foo implements Comparable&lt;Foo&gt; {\n  @Override\n  public int compareTo(Foo foo) { /* ... */ }      // Noncompliant as the equals(Object obj) method is not overridden\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic class Foo implements Comparable&lt;Foo&gt; {\n  @Override\n  public int compareTo(Foo foo) { /* ... */ }      // Compliant\n\n  @Override\n  public boolean equals(Object obj) { /* ... */ }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "COMPLETE",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S1217",
            "repo": "java",
            "name": "\"Thread.run()\" should not be called directly",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "multi-threading",
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1217"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>The likely intention of a user calling <code>Thread.run()</code> is to start the execution of code within a new thread. This, however, is not what\nhappens when this method is called.</p>\n<p>The purpose of <code>Thread.run()</code> is to provide a method that users can overwrite to specify the code to be executed. The actual thread is\nthen started by calling <code>Thread.start()</code>. When <code>Thread.run()</code> is called directly, it will be executed as a regular method within\nthe current thread.</p>"
                },
                {
                    "key": "introduction",
                    "content": "<p>This rule raises an issue when <code>Thread.run()</code> is called instead of <code>Thread.start()</code>.</p>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>If you intend to execute the contents of the <code>Thread.run()</code> method within a new thread, call <code>Thread.start()</code> instead.</p>\n<p>If your intention is only to have a container for a method but execute this method within the current thread, do not use <code>Thread</code> but\n<code>Runnable</code> or another functional interface.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nThread myThread = new Thread(runnable);\nmyThread.run(); // Noncompliant, does not start a thread\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nThread myThread = new Thread(runnable);\nmyThread.start(); // Compliant\n</pre>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nclass ComputePrimesThread extends Thread {\n    @Override\n    public void run() {\n        // ...\n    }\n}\nnew ComputePrimesThread().run(); // Noncompliant, does not start a thread\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nclass ComputePrimesThread extends Thread {\n    @Override\n    public void run() {\n        // ...\n    }\n}\nnew ComputePrimesThread().start(); // Compliant\n</pre>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"3\" data-diff-type=\"noncompliant\">\nclass Button {\n\n    private Thread onClick;\n\n    Button(Thread onClick) {\n        this.onClick = onClick;\n    }\n\n    private void clicked() {\n        if (onClick != null) onClick.run(); // Noncompliant, use functional interface\n    }\n}\n\nnew Button(new Thread() {\n    @Override public void run() {\n        System.out.println(\"clicked!\");\n    }\n});\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"3\" data-diff-type=\"compliant\">\nclass Button {\n\n    private Runnable onClick;\n\n    Button(Runnable onClick) {\n        this.onClick = onClick;\n    }\n\n    private void clicked() {\n        if (onClick != null) onClick.run(); // compliant\n    }\n}\n\nnew Button(() -&gt; System.out.println(\"clicked!\"));\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html#start--\">Java™ Platform, Standard Edition 8 API Specification -\n  Thread.start()</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://www.javatpoint.com/what-if-we-call-java-run-method-directly\">JavaTPoint - What if we call Java run() method directly instead\n  start() method?</a> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S1219",
            "repo": "java",
            "name": "\"switch\" statements should not contain non-case labels",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "suspicious"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1219"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Even if it is legal, mixing case and non-case labels in the body of a switch statement is very confusing and can even be the result of a typing\nerror.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  WEDNESDAY:   // Noncompliant; syntactically correct, but behavior is not what's expected\n    doSomething();\n    break;\n  ...\n}\n\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    foo:for(int i = 0 ; i &lt; X ; i++) {  // Noncompliant; the code is correct and behaves as expected but is barely readable\n         /* ... */\n        break foo;  // this break statement doesn't relate to the nesting case TUESDAY\n         /* ... */\n    }\n    break;\n    /* ... */\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  case WEDNESDAY:\n    doSomething();\n    break;\n  ...\n}\n\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    compute(args); // put the content of the labelled \"for\" statement in a dedicated method\n    break;\n\n    /* ... */\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "BLOCKER"
                }
            ]
        },
        {
            "key": "java:S1450",
            "repo": "java",
            "name": "Private fields only used as local variables in methods should become local variables",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1450"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>When the value of a private field is always assigned to in a class' methods before being read, then it is not being used to store class\ninformation. Therefore, it should become a local variable in the relevant methods to prevent any misunderstanding.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class Foo {\n  private int a;\n  private int b;\n\n  public void doSomething(int y) {\n    a = y + 5;\n    ...\n    if(a == 0) {\n      ...\n    }\n    ...\n  }\n\n  public void doSomethingElse(int y) {\n    b = y + 3;\n    ...\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic class Foo {\n\n  public void doSomething(int y) {\n    int a = y + 5;\n    ...\n    if(a == 0) {\n      ...\n    }\n  }\n\n  public void doSomethingElse(int y) {\n    int b = y + 3;\n    ...\n  }\n}\n</pre>\n<h3>Exceptions</h3>\n<p>This rule doesn’t raise any issue on annotated field.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S1451",
            "repo": "java",
            "name": "Track lack of copyright and license headers",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "convention"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "headerFormat",
                    "htmlDesc": "Expected copyright and license header",
                    "type": "TEXT"
                },
                {
                    "key": "isRegularExpression",
                    "htmlDesc": "Whether the headerFormat is a regular expression",
                    "defaultValue": "false",
                    "type": "BOOLEAN"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1451"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Each source file should start with a header stating file ownership and the license which must be used to distribute the application.</p>\n<p>This rule must be fed with the header text that is expected at the beginning of every file.</p>\n<h3>Compliant solution</h3>\n<pre>\n/*\n * SonarQube, open source software quality management tool.\n * Copyright (C) 2008-2013 SonarSource\n * mailto:contact AT sonarsource DOT com\n *\n * SonarQube is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * SonarQube is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LAWFUL",
            "cleanCodeAttributeCategory": "RESPONSIBLE",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "BLOCKER"
                }
            ]
        },
        {
            "key": "java:S1452",
            "repo": "java",
            "name": "Generic wildcard types should not be used in return types",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1452"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>A return type containing wildcards cannot be narrowed down in any context. This indicates that the developer’s intention was likely something\nelse.</p>\n<p>The core problem lies in type variance. Expressions at an input position, such as arguments passed to a method, can have a more specific type than\nthe type expected by the method, which is called <em>covariance</em>. Expressions at an output position, such as a variable that receives the return\nresult from a method, can have a more general type than the method’s return type, which is called <em>contravariance</em>. This can be traced back to\nthe Liskov substitution principle.</p>\n<p>In Java, type parameters of a generic type are invariant by default due to their potential occurrence in both input and output positions at the\nsame time. A classic example of this is the methods <code>T get()</code> (output position) and <code>add(T element)</code> (input position) in\ninterface <code>java.util.List</code>. We could construct cases with invalid typing in <code>List</code> if <code>T</code> were not invariant.</p>\n<p>Wildcards can be employed to achieve covariance or contravariance in situations where the type parameter appears in one position only:</p>\n<ul>\n  <li> <code>&lt;? extends Foo&gt;</code> for covariance (input positions) </li>\n  <li> <code>&lt;? super Foo&gt;</code> for contravariance (output positions) </li>\n</ul>\n<p>However, covariance is ineffective for the return type of a method since it is not an input position. Making it contravariant also has no effect\nsince it is the receiver of the return value which must be contravariant (use-site variance in Java). Consequently, a return type containing wildcards\nis generally a mistake.</p>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>The solution to this problem depends on the original intention of the developer. Given the examples:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nList&lt;? extends Animal&gt; getAnimals() { ... } // Noncompliant, wildcard with no use\nList&lt;? super Plant&gt; getLifeforms() { ... }  // Noncompliant, wildcard with no use\n</pre>\n<p>You can remove the wildcards to make the types invariant:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nList&lt;Animal&gt; getAnimals() { ... }           // Compliant, using invariant type instead\nList&lt;Plant&gt; getLifeforms() { ... }          // Compliant, using invariant type instead\n</pre>\n<p>Or replace them with a super- or subtypes (still invariant):</p>\n<pre>\nList&lt;Dog&gt; getAnimals() { ... }              // Compliant, using subtype instead\nList&lt;Lifeform&gt; getLifeforms() { ... }       // Compliant, using supertype instead\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/tutorial/extra/generics/wildcards.html\">The Java™ Tutorials - Wildcards</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://medium.com/javarevisited/variance-in-java-and-scala-63af925d21dc\">Sinisa Louc - A Complete Guide to Variance in Java and\n  Scala</a> </li>\n  <li> <a href=\"https://web.archive.org/web/20240206045705/https://kotlinexpertise.com/kotlin-generics-and-variance-vs-java/\">Kotlin Expertise Blog -\n  Kotlin Generics and Variance (Compared to Java)</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Covariance_and_contravariance_(computer_science)\">Wikipedia - Covariance and contravariance (computer\n  science)</a> </li>\n  <li> <a href=\"https://schneide.blog/2015/05/11/declaration-site-and-use-site-variance-explained/\">Schneide Blog - Declaration-site and use-site\n  variance explained</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Liskov_substitution_principle\">Wikipedia - Liskov substitution principle</a> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S1694",
            "repo": "java",
            "name": "An abstract class should have both abstract and concrete methods",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "convention"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1694"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes.</p>\n<p>A class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a concrete class (i.e. remove the\n<code>abstract</code> keyword) with a private constructor.</p>\n<p>A class with only abstract methods and no inheritable behavior should be converted to an interface.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic abstract class Animal {  // Noncompliant; should be an interface\n  abstract void move();\n  abstract void feed();\n}\n\npublic abstract class Color {  // Noncompliant; should be concrete with a private constructor\n  private int red = 0;\n  private int green = 0;\n  private int blue = 0;\n\n  public int getRed() {\n    return red;\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic interface Animal {\n  void move();\n  void feed();\n}\n\npublic class Color {\n  private int red = 0;\n  private int green = 0;\n  private int blue = 0;\n\n  private Color () {}\n\n  public int getRed() {\n    return red;\n  }\n}\n\npublic abstract class Lamp {\n\n  private boolean switchLamp=false;\n\n  public abstract void glow();\n\n  public void flipSwitch() {\n    switchLamp = !switchLamp;\n    if (switchLamp) {\n      glow();\n    }\n  }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S1695",
            "repo": "java",
            "name": "\"NullPointerException\" should not be explicitly thrown",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "error-handling",
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1695"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>A <code>NullPointerException</code> should indicate that a <code>null</code> value was unexpectedly encountered. Good programming practice dictates\nthat code is structured to avoid NPE’s.</p>\n<p>Explicitly throwing <code>NullPointerException</code> forces a method’s callers to explicitly catch it, rather than coding to avoid it. Further, it\nmakes it difficult to distinguish between the unexpectedly-encountered <code>null</code> value and the condition which causes the method to purposely\nthrow an NPE.</p>\n<p>If an NPE is being thrown to indicate that a parameter to the method should not have been null, use the <code>@NotNull</code> annotation\ninstead.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic void doSomething (String aString) throws NullPointerException {\n     throw new NullPointerException();\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic void doSomething (@NotNull String aString) {\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S1696",
            "repo": "java",
            "name": "\"NullPointerException\" should not be caught",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "error-handling",
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1696"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/395\">CWE-395 - Use of NullPointerException Catch to Detect NULL Pointer Dereference</a>\n  </li>\n  <li> CERT - <a href=\"https://wiki.sei.cmu.edu/confluence/display/java/ERR08-J.+Do+not+catch+NullPointerException+or+any+of+its+ancestors\">ERR08-J.\n  Do not catch NullPointerException or any of its ancestors</a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p><code>NullPointerException</code> should be avoided, not caught. Any situation in which <code>NullPointerException</code> is explicitly caught can\neasily be converted to a <code>null</code> test, and any behavior being carried out in the catch block can easily be moved to the \"is null\" branch of\nthe conditional.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic int lengthPlus(String str) {\n  int len = 2;\n  try {\n    len += str.length();\n  }\n  catch (NullPointerException e) {\n    log.info(\"argument was null\");\n  }\n  return len;\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic int lengthPlus(String str) {\n  int len = 2;\n\n  if (str != null) {\n    len += str.length();\n  }\n  else {\n    log.info(\"argument was null\");\n  }\n  return len;\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S2301",
            "repo": "java",
            "name": "Public methods should not contain selector arguments",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "design"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2301"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>A selector argument is a <code>boolean</code> argument that’s used to determine which of two paths to take through a method. Specifying such a\nparameter may seem innocuous, particularly if it’s well named.</p>\n<p>Unfortunately, the maintainers of the code calling the method won’t see the parameter name, only its value. They’ll be forced either to guess at\nthe meaning or to take extra time to look the method up.</p>\n<p>Instead, separate methods should be written.</p>\n<p>This rule finds methods with a <code>boolean</code> that’s used to determine which path to take through the method.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic String tempt(String name, boolean ofAge) {\n  if (ofAge) {\n    offerLiquor(name);\n  } else {\n    offerCandy(name);\n  }\n}\n\n// ...\npublic void corrupt() {\n  tempt(\"Joe\", false); // does this mean not to temp Joe?\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic void temptAdult(String name) {\n  offerLiquor(name);\n}\n\npublic void temptChild(String name) {\n    offerCandy(name);\n}\n\n// ...\npublic void corrupt() {\n  age &lt; legalAge ? temptChild(\"Joe\") : temptAdult(\"Joe\");\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "FOCUSED",
            "cleanCodeAttributeCategory": "ADAPTABLE",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S2308",
            "repo": "java",
            "name": "\"deleteOnExit\" should not be used",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "performance"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "30min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "30min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:CallToFileDeleteOnExitMethod"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Use of <code>File.deleteOnExit()</code> is not recommended for the following reasons:</p>\n<ul>\n  <li> The deletion occurs only in the case of a normal JVM shutdown but not when the JVM crashes or is killed. </li>\n  <li> For each file handler, the memory associated with the handler is released only at the end of the process. </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<pre>\nFile file = new File(\"file.txt\");\nfile.deleteOnExit();  // Noncompliant\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "COMPLETE",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S2309",
            "repo": "java",
            "name": "Files should not be empty",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "unused"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:EmptyFile"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Files with no lines of code clutter a project and should be removed.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n//package org.foo;\n//\n//public class Bar {}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S3516",
            "repo": "java",
            "name": "Methods returns should not be invariant",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "symbolic-execution"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "LINEAR",
            "debtRemFnType": "LINEAR",
            "type": "CODE_SMELL",
            "defaultRemFnType": "LINEAR",
            "defaultRemFnGapMultiplier": "2min",
            "remFnType": "LINEAR",
            "remFnGapMultiplier": "2min",
            "remFnOverloaded": false,
            "gapDescription": "Per number of return statements",
            "scope": "MAIN",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>When a method is designed to return an invariant value, it may be poor design, but it shouldn’t adversely affect the outcome of your program.\nHowever, when it happens on all paths through the logic, it is surely a bug.</p>\n<p>This rule raises an issue when a method contains several <code>return</code> statements that all return the same value.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nint foo(int a) {\n  int b = 12;\n  if (a == 1) {\n    return b;\n  }\n  return b;  // Noncompliant\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S3518",
            "repo": "java",
            "name": "Zero should not be a possible denominator",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "symbolic-execution",
                "denial-of-service",
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "introduction",
                    "content": "<p>If the denominator to an integer division or remainder operation is zero, a <code>ArithmeticException</code> is thrown.</p>\n<p>This error will crash your program in most cases. To fix it, you need to ensure that the denominator value in all division operations is always\nnon-zero, or check the value against zero before performing the division.</p>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/ArithmeticException.html\">ArithmeticException</a> </li>\n  <li> <a href=\"https://docs.oracle.com/javase/specs/jls/se17/html/jls-15.html#jls-15.17.2\">The Division Operator in the JLS</a> </li>\n  <li> <a href=\"https://docs.oracle.com/javase/specs/jls/se17/html/jls-15.html#jls-15.17.3\">The Remainder Operator in the JLS</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/369\">CWE-369 - Divide by zero</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/CTZGBQ\">CERT, NUM02-J.</a> - Ensure that division and remainder operations do not result in\n  divide-by-zero errors </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222612\">Application Security and\n  Development: V-222612</a> - The application must not be vulnerable to overflow attacks. </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>A division (<code>/</code>) or remainder operation (<code>%</code>) by zero indicates a bug or logical error. This is because in Java, a division\nor remainder operation where the denominator is zero and not a floating point value always results in an <code>ArithmeticException</code> being\nthrown.</p>\n<p>When working with <code>double</code> or <code>float</code> values, no exception will be thrown, but the operation will result in special floating\npoint values representing either positive infinity, negative infinity, or <code>NaN</code>. Unless these special values are explicitly handled by a\nprogram, zero denominators should be avoided in floating point operations, too. Otherwise, the application might produce unexpected results.</p>\n<h3>What is the potential impact?</h3>\n<p>Issues of this type interrupt the normal execution of a program, causing it to crash or putting it into an inconsistent state. Therefore, this\nissue might impact the availability and reliability of your application, or even result in data loss.</p>\n<p>If the computation of the denominator is tied to user input data, this issue can potentially even be exploited by attackers to disrupt your\napplication.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nvoid test_divide() {\n  int z = 0;\n  if (unknown()) {\n    // ..\n    z = 3;\n  } else {\n    // ..\n  }\n  z = 1 / z; // Noncompliant, possible division by zero\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nvoid test_divide() {\n  int z = 0;\n  if (unknown()) {\n    // ..\n    z = 3;\n  } else {\n    // ..\n    z = 1;\n  }\n  z = 1 / z;\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S3631",
            "repo": "java",
            "name": "\"Arrays.stream\" should be used for primitive arrays",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "performance"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S3631"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>For arrays of objects, <code>Arrays.asList(T ... a).stream()</code> and <code>Arrays.stream(array)</code> are basically equivalent in terms of\nperformance. However, for arrays of primitives, using <code>Arrays.asList</code> will force the construction of a list of boxed types, and then use\n<em>that</em> list as a stream. On the other hand, <code>Arrays.stream</code> uses the appropriate primitive stream type (<code>IntStream</code>,\n<code>LongStream</code>, <code>DoubleStream</code>) when applicable, with much better performance.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nArrays.asList(\"a1\", \"a2\", \"b1\", \"c2\", \"c1\").stream()\n    .filter(...)\n    .forEach(...);\n\nArrays.asList(1, 2, 3, 4).stream() // Noncompliant\n    .filter(...)\n    .forEach(...);\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nArrays.asList(\"a1\", \"a2\", \"b1\", \"c2\", \"c1\").stream()\n    .filter(...)\n    .forEach(...);\n\nint[] intArray = new int[]{1, 2, 3, 4};\nArrays.stream(intArray)\n    .filter(...)\n    .forEach(...);\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "EFFICIENT",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S3750",
            "repo": "java",
            "name": "Spring \"@Controller\" classes should not use \"@Scope\"",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "spring"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S3750"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Spring <code>@Controller</code>s, <code>@Service</code>s, and <code>@Repository</code>s have <code>singleton</code> scope by default, meaning only\none instance of the class is ever instantiated in the application. Defining any other scope for one of these class types will result in needless churn\nas new instances are created and destroyed. In a busy web application, this could cause a significant amount of needless additional load on the\nserver.</p>\n<p>This rule raises an issue when the <code>@Scope</code> annotation is applied to a <code>@Controller</code>, <code>@Service</code>, or\n<code>@Repository</code> with any value but \"singleton\". <code>@Scope(\"singleton\")</code> is redundant, but ignored.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n@Scope(\"prototype\")  // Noncompliant\n@Controller\npublic class HelloWorld {\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n@Controller\npublic class HelloWorld {\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "EFFICIENT",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S3751",
            "repo": "java",
            "name": "\"@RequestMapping\" methods should not be \"private\"",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "spring"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S3751"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>A method with a <code>@RequestMapping</code> annotation part of a class annotated with <code>@Controller</code> (directly or indirectly through a\nmeta annotation - <code>@RestController</code> from Spring Boot is a good example) will be called to handle matching web requests. That will happen\neven if the method is <code>private</code>, because Spring invokes such methods via reflection, without checking visibility.</p>\n<p>So marking a sensitive method <code>private</code> may seem like a good way to control how such code is called. Unfortunately, not all Spring\nframeworks ignore visibility in this way. For instance, if you’ve tried to control web access to your sensitive, <code>private</code>,\n<code>@RequestMapping</code> method by marking it <code>@Secured</code> …​ it will still be called, whether or not the user is authorized to access\nit. That’s because AOP proxies are not applied to private methods.</p>\n<p>In addition to <code>@RequestMapping</code>, this rule also considers the annotations introduced in Spring Framework 4.3: <code>@GetMapping</code>,\n<code>@PostMapping</code>, <code>@PutMapping</code>, <code>@DeleteMapping</code>, <code>@PatchMapping</code>.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n@RequestMapping(\"/greet\", method = GET)\nprivate String greet(String greetee) {  // Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n@RequestMapping(\"/greet\", method = GET)\npublic String greet(String greetee) {\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S3752",
            "repo": "java",
            "name": "Allowing both safe and unsafe HTTP methods is security-sensitive",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "spring"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "SECURITY_HOTSPOT",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S3752"
                ]
            },
            "descriptionSections": [
                {
                    "key": "how_to_fix",
                    "content": "<h2>Recommended Secure Coding Practices</h2>\n<p>For all the routes/controllers of an application, the authorized HTTP methods should be explicitly defined and safe HTTP methods should only be\nused to perform read-only operations.</p>\n<h2>Compliant Solution</h2>\n<pre>\n@RequestMapping(\"/delete_user\", method = RequestMethod.POST)  // Compliant\npublic String delete1(String username) {\n// state of the application will be changed here\n}\n\n@RequestMapping(path = \"/delete_user\", method = RequestMethod.POST) // Compliant\nString delete2(@RequestParam(\"id\") String id) {\n// state of the application will be changed here\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">Top 10 2021 Category A1 - Broken Access Control</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A04_2021-Insecure_Design/\">Top 10 2021 Category A4 - Insecure Design</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\">Top 10 2017 Category A5 - Broken Access Control</a>\n  </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/352\">CWE-352 - Cross-Site Request Forgery (CSRF)</a> </li>\n  <li> <a href=\"https://owasp.org/www-community/attacks/csrf\">OWASP: Cross-Site Request Forgery</a> </li>\n  <li> <a href=\"https://docs.spring.io/spring-security/site/docs/5.0.x/reference/html/csrf.html#csrf-use-proper-verbs\">Spring Security Official\n  Documentation: Use proper HTTP verbs (CSRF protection)</a> </li>\n</ul>"
                },
                {
                    "key": "assess_the_problem",
                    "content": "<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> HTTP methods are not defined at all for a route/controller of the application. </li>\n  <li> Safe HTTP methods are defined and used for a route/controller that can change the state of an application. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\n@RequestMapping(\"/delete_user\")  // Sensitive: by default all HTTP methods are allowed\npublic String delete1(String username) {\n// state of the application will be changed here\n}\n\n@RequestMapping(path = \"/delete_user\", method = {RequestMethod.GET, RequestMethod.POST}) // Sensitive: both safe and unsafe methods are allowed\nString delete2(@RequestParam(\"id\") String id) {\n// state of the application will be changed here\n}\n</pre>\n"
                },
                {
                    "key": "root_cause",
                    "content": "<p>An HTTP method is safe when used to perform a read-only operation, such as retrieving information. In contrast, an unsafe HTTP method is used to\nchange the state of an application, for instance to update a user’s profile on a web application.</p>\n<p>Common safe HTTP methods are GET, HEAD, or OPTIONS.</p>\n<p>Common unsafe HTTP methods are POST, PUT and DELETE.</p>\n<p>Allowing both safe and unsafe HTTP methods to perform a specific operation on a web application could impact its security, for example CSRF\nprotections are most of the time only protecting operations performed by unsafe HTTP methods.</p>\n"
                },
                {
                    "key": "default",
                    "content": "<p>An HTTP method is safe when used to perform a read-only operation, such as retrieving information. In contrast, an unsafe HTTP method is used to\nchange the state of an application, for instance to update a user’s profile on a web application.</p>\n<p>Common safe HTTP methods are GET, HEAD, or OPTIONS.</p>\n<p>Common unsafe HTTP methods are POST, PUT and DELETE.</p>\n<p>Allowing both safe and unsafe HTTP methods to perform a specific operation on a web application could impact its security, for example CSRF\nprotections are most of the time only protecting operations performed by unsafe HTTP methods.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> HTTP methods are not defined at all for a route/controller of the application. </li>\n  <li> Safe HTTP methods are defined and used for a route/controller that can change the state of an application. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>For all the routes/controllers of an application, the authorized HTTP methods should be explicitly defined and safe HTTP methods should only be\nused to perform read-only operations.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\n@RequestMapping(\"/delete_user\")  // Sensitive: by default all HTTP methods are allowed\npublic String delete1(String username) {\n// state of the application will be changed here\n}\n\n@RequestMapping(path = \"/delete_user\", method = {RequestMethod.GET, RequestMethod.POST}) // Sensitive: both safe and unsafe methods are allowed\nString delete2(@RequestParam(\"id\") String id) {\n// state of the application will be changed here\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@RequestMapping(\"/delete_user\", method = RequestMethod.POST)  // Compliant\npublic String delete1(String username) {\n// state of the application will be changed here\n}\n\n@RequestMapping(path = \"/delete_user\", method = RequestMethod.POST) // Compliant\nString delete2(@RequestParam(\"id\") String id) {\n// state of the application will be changed here\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">Top 10 2021 Category A1 - Broken Access Control</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A04_2021-Insecure_Design/\">Top 10 2021 Category A4 - Insecure Design</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\">Top 10 2017 Category A5 - Broken Access Control</a>\n  </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/352\">CWE-352 - Cross-Site Request Forgery (CSRF)</a> </li>\n  <li> <a href=\"https://owasp.org/www-community/attacks/csrf\">OWASP: Cross-Site Request Forgery</a> </li>\n  <li> <a href=\"https://docs.spring.io/spring-security/site/docs/5.0.x/reference/html/csrf.html#csrf-use-proper-verbs\">Spring Security Official\n  Documentation: Use proper HTTP verbs (CSRF protection)</a> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "impacts": []
        },
        {
            "key": "java:S3753",
            "repo": "java",
            "name": "\"@Controller\" classes that use \"@SessionAttributes\" must call \"setComplete\" on their \"SessionStatus\" objects",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "spring"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S3753"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>A Spring <code>@Controller</code> that uses <code>@SessionAttributes</code> is designed to handle a stateful / multi-post form. Such\n<code>@Controller</code>s use the specified <code>@SessionAttributes</code> to store data on the server between requests. That data should be cleaned\nup when the session is over, but unless <code>setComplete()</code> is called on the <code>SessionStatus</code> object from a\n<code>@RequestMapping</code> method, neither Spring nor the JVM will know it’s time to do that. Note that the <code>SessionStatus</code> object must\nbe passed to that method as a parameter.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n@Controller\n@SessionAttributes(\"hello\")  // Noncompliant; this doesn't get cleaned up\npublic class HelloWorld {\n\n  @RequestMapping(\"/greet\", method = GET)\n  public String greet(String greetee) {\n\n    return \"Hello \" + greetee;\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n@Controller\n@SessionAttributes(\"hello\")\npublic class HelloWorld {\n\n  @RequestMapping(\"/greet\", method = GET)\n  public String greet(String greetee) {\n\n    return \"Hello \" + greetee;\n  }\n\n  @RequestMapping(\"/goodbye\", method = POST)\n  public String goodbye(SessionStatus status) {\n    //...\n    status.setComplete();\n  }\n\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "COMPLETE",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "BLOCKER"
                }
            ]
        },
        {
            "key": "java:S4601",
            "repo": "java",
            "name": "\"HttpSecurity\" URL patterns should be correctly ordered",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "spring"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "VULNERABILITY",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S4601"
                ]
            },
            "descriptionSections": [
                {
                    "key": "how_to_fix",
                    "content": "<p>The following code is vulnerable because it defines access control configuration in the wrong order.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nprotected void configure(HttpSecurity http) throws Exception {\n    http.authorizeRequests()\n      .antMatchers(\"/resources/**\", \"/signup\", \"/about\").permitAll()\n      .antMatchers(\"/admin/**\").hasRole(\"ADMIN\")\n      .antMatchers(\"/admin/login\").permitAll() // Noncompliant\n      .antMatchers(\"/**\", \"/home\").permitAll()\n      .antMatchers(\"/db/**\").access(\"hasRole('ADMIN') and hasRole('DBA')\") // Noncompliant\n      .and().formLogin().loginPage(\"/login\").permitAll().and().logout().permitAll();\n  }\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n  protected void configure(HttpSecurity http) throws Exception {\n    http.authorizeRequests()\n      .antMatchers(\"/resources/**\", \"/signup\", \"/about\").permitAll()\n      .antMatchers(\"/admin/login\").permitAll()\n      .antMatchers(\"/admin/**\").hasRole(\"ADMIN\")\n      .antMatchers(\"/db/**\").access(\"hasRole('ADMIN') and hasRole('DBA')\")\n      .antMatchers(\"/**\", \"/home\").permitAll()\n      .and().formLogin().loginPage(\"/login\").permitAll().and().logout().permitAll();\n  }\n</pre>",
                    "context": {
                        "displayName": "Spring",
                        "key": "spring"
                    }
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> Spring Documentation - <a href=\"https://docs.spring.io/spring-security/reference/servlet/authorization/authorize-http-requests.html\">Authorize\n  HttpServletRequests</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">Top 10 2021 - Category A1 - Broken Access Control</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 - Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/285\">CWE-285 - Improper Authorization</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/287\">CWE-287 - Improper Authentication</a> </li>\n</ul>"
                },
                {
                    "key": "introduction",
                    "content": "<p>Spring Framework, and, more precisely, the Spring Security component, allows setting up access control checks at the URI level. This is done by\nadding request matchers to the security configuration, each authorizing access to some resources depending on the incoming request entitlement.</p>\n<p>Similarly to firewall filtering rules, the order in which those matchers are defined is security relevant.</p>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Configured URL matchers are considered in the order they are declared. Especially, for a given resource, if a looser filter is defined before a\nstricter one, only the less secure configuration will apply. No request will ever reach the stricter rule.</p>\n<p>This rule raises an issue when:</p>\n<ul>\n  <li> A URL pattern ending with <code>**</code> precedes another one having the same prefix. E.g. <code>/admin/**</code> is defined before\n  <code>/admin/example/**</code> </li>\n  <li> A pattern without wildcard characters is preceded by another one that matches it. E.g.: <code>/page-index/db</code> is defined after\n  <code>/page*/**</code> </li>\n</ul>\n<h3>What is the potential impact?</h3>\n<p>Access control rules that have been defined but cannot be applied generally indicate an error in the filtering process. In most cases, this will\nhave consequences on the application’s authorization and authentication mechanisms.</p>\n<h4>Authentication bypass</h4>\n<p>When the ignored access control rule is supposed to enforce the authentication on a resource, the consequence is a bypass of the authentication for\nthat resource. Depending on the scope of the ignored rule, a single feature or whole sections of the application can be left unprotected.</p>\n<p>Attackers could take advantage of such an issue to access the affected features without prior authentication, which may impact the confidentiality\nor integrity of sensitive, business, or personal data.</p>\n<h4>Privilege escalation</h4>\n<p>When the ignored access control rule is supposed to verify the role of an authenticated user, the consequence is a privilege escalation or\nauthorization bypass. An authenticated user with low privileges on the application will be able to access more critical features or sections of the\napplication.</p>\n<p>This could have financial consequences if the accessed features are normally accessed by paying users. It could also impact the confidentiality or\nintegrity of sensitive, business, or personal data, depending on the features.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "SECURITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S4604",
            "repo": "java",
            "name": "\"@EnableAutoConfiguration\" should be fine-tuned",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "DEPRECATED",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "30min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "30min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S4604"
                ]
            },
            "descriptionSections": [
                {
                    "key": "introduction",
                    "content": "<p>This rule is deprecated, and will eventually be removed.</p>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>\"@EnableAutoConfiguration\" is a convenient feature to configure the Spring Application Context by attempting to guess the beans that you are likely\nto need. The drawback is that it may load and configure beans the application will never use and therefore consume more CPU and RAM than really\nrequired. <code>@EnableAutoConfiguration</code> should be configured to exclude all the beans not required by the application. Alternatively, use the\n<code>@Import</code> annotation instead of <code>@EnableAutoConfiguration</code>, to explicitly import the useful AutoConfiguration classes.</p>\n<p>This rule applies for <code>@SpringBootApplication</code> as well.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n@SpringBootApplication\npublic class MyApplication {\n...\n}\n</pre>\n<pre>\n@Configuration\n@EnableAutoConfiguration\npublic class MyApplication {\n...\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n@SpringBootApplication(exclude = {\n  MultipartAutoConfiguration.class,\n  JmxAutoConfiguration.class,\n})\npublic class MyApplication {\n...\n}\n</pre>\n<pre>\n@Configuration\n@EnableAutoConfiguration(exclude = {\n  MultipartAutoConfiguration.class,\n  JmxAutoConfiguration.class,\n})\npublic class MyApplication {\n...\n}\n</pre>\n<pre>\n@Configuration\n@Import({\n        DispatcherServletAutoConfiguration.class,\n        EmbeddedServletContainerAutoConfiguration.class,\n        ErrorMvcAutoConfiguration.class,\n        HttpEncodingAutoConfiguration.class,\n        HttpMessageConvertersAutoConfiguration.class,\n        JacksonAutoConfiguration.class,\n        ServerPropertiesAutoConfiguration.class,\n        PropertyPlaceholderAutoConfiguration.class,\n        ThymeleafAutoConfiguration.class,\n        WebMvcAutoConfiguration.class\n})\npublic class MyApplication {\n...\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S6901",
            "repo": "java",
            "name": "\"setDaemon\", \"setPriority\" and \"getThreadGroup\" should not be invoked on virtual threads",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "java21"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S6901"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>The <code>Thread</code> class has some methods that are used to monitor and manage its execution. With the introduction of virtual threads in Java\n21, there are three of these methods that behave differently between the standard platform threads and the virtual ones.</p>\n<p>For virtual threads:</p>\n<ul>\n  <li> <code>Thread.setDaemon(boolean)</code> will throw an <code>IllegalArgumentException</code> if <code>false</code> is passed as an argument as a\n  virtual thread daemon status is always true. </li>\n  <li> <code>Thread.setPriority(int priority)</code> will never change the actual priority of a virtual thread, which is always equal to\n  <code>Thread.NORM_PRIORITY</code> </li>\n  <li> <code>Thread.getThreadGroup()</code> will return a dummy \"VirtualThreads\" group that is empty and should not be used </li>\n</ul>\n<p>This rule reports an issue when one of these methods is invoked on a virtual thread.</p>\n\n<h4>Noncompliant code example</h4>\n<pre>\nThread t = Thread.ofVirtual().unstarted(()-&gt;{/* some task */});\nt.setPriority(1); // Noncompliant; virtual threads' priority cannot be changed\nt.setDaemon(false); // Noncompliant; will throw IllegalArgumentException\nt.setDaemon(true); // Noncompliant; redundant\nt.start();\nvar threadGroup = t.getThreadGroup(); // Noncompliant; virtual thread groups should not be used\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> Java Documentation - <a\n  href=\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/Thread.html#setDaemon(boolean)\">Thread.setDaemon</a> </li>\n  <li> Java Documentation - <a\n  href=\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/Thread.html#setPriority(int)\">Thread.setPriority</a> </li>\n  <li> Java Documentation - <a\n  href=\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/Thread.html#getThreadGroup()\">Thread.getThreadGroup</a> </li>\n  <li> Java Documentation - <a\n  href=\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/ThreadGroup.html#virtualthreadgroup\">Virtual threads group</a> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S6904",
            "repo": "java",
            "name": "Avoid using \"FetchType.EAGER\"",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "jpa",
                "sustainability",
                "sql"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S6904"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javaee/7/api/javax/persistence/FetchType.html\">Java EE 7 API - FetchType</a> </li>\n</ul>"
                },
                {
                    "key": "introduction",
                    "content": "<p><code>FetchType</code> is an enumeration in the Java Persistence API (JPA) that is used to define the fetching strategy for associations\n(relationships) between entities in a relational database.</p>\n<p>There are two main values for FetchType:</p>\n<ul>\n  <li> <code>FetchType.EAGER</code>: the association is loaded immediately when the owning entity is loaded. </li>\n  <li> <code>FetchType.LAZY</code>: the association is not loaded unless it is explicitly accessed. </li>\n</ul>\n<p>This rule raises an issue when the <code>fetch</code> argument is explicitly set to <code>FetchType.EAGER</code>.</p>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>Remove or replace <code>FetchType.EAGER</code> with <code>FetchType.LAZY</code> in JPA annotations.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@OneToMany(mappedBy = \"parent\", fetch = FetchType.EAGER) // Noncompliant\nprivate List&lt;ChildEntity&gt; children;\n\n@OneToMany(mappedBy = \"child\", fetch = FetchType.EAGER) // Noncompliant\nprivate List&lt;ParentEntity&gt; parents;\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@OneToMany(mappedBy = \"parent\", fetch = FetchType.LAZY) // Compliant\nprivate List&lt;ChildEntity&gt; children;\n\n@OneToMany(mappedBy = \"child\") // Compliant\nprivate List&lt;ParentEntity&gt; parents;\n</pre>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Using <code>FetchType.EAGER</code> can lead to inefficient data loading and potential performance issues. Eager Loading initializes associated data\non the spot, potentially fetching more data than needed.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "EFFICIENT",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S6906",
            "repo": "java",
            "name": "Virtual threads should not run tasks that include synchronized code",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "multi-threading",
                "java21"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S6906"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> Java Documentation - <a href=\"https://openjdk.org/jeps/444#:~:text=There%20are%20two,by%20capturing%20carriers\">Virtual threads, pinning\n  scenarios</a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Java 21 virtual threads allow the JVM to optimize the usage of OS threads, by mounting and unmounting them on an OS thread when needed, and making\nthem more efficient when dealing with blocking operations such as HTTP requests or I/O.</p>\n<p>However, when code is executed inside a <code>synchronized</code> block or <code>synchronized</code> method, the virtual thread stays pinned to the\nunderlying OS thread and cannot be unmounted during a blocking operation. This will cause the OS thread to be blocked, which can impact the\nscalability of the application.</p>\n<p>Therefore, virtual threads should not execute code that contains <code>synchronized</code> blocks or invokes <code>synchronized</code> methods.\nPlatform threads should be used in these cases.</p>\n<p>This rule raises an issue when a virtual thread contains <code>synchronized</code> blocks or invokes <code>synchronized</code> methods.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nvoid enqueue(){\n    Thread.startVirtualThread(() -&gt; { // Noncompliant; use a platform thread instead\n            setupOperations();\n            dequeLogic();\n        }\n    });\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nvoid enqueue(){\n    new Thread(() -&gt; {\n        synchronized {\n            setupOperations();\n            dequeLogic();\n        }\n    }).start();\n}\n</pre>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nvoid enqueue2(){\n    Thread.startVirtualThread(() -&gt; { // Noncompliant; use a platform thread instead of a virtual one\n        if(someCondition){\n            synchronizedMethod();\n        }else{\n            defaultLogic();\n        }\n    });\n}\nsynchronized void synchronizedMethod(){}\nvoid defaultLogic(){}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nvoid enqueue2(){\n    new Thread(() -&gt; {\n        if(someCondition){\n            synchronizedMethod();\n        }else{\n            defaultLogic();\n        }\n    }).start();\n}\nsynchronized void synchronizedMethod(){}\nvoid defaultLogic(){}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S6909",
            "repo": "java",
            "name": "Constant parameters in a \"PreparedStatement\" should not be set more than once",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "sustainability",
                "sql"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S6909"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>The <code>PreparedStatement</code> is frequently used in loops because it allows to conveniently set parameters. A small optimization is possible\nby setting constant parameters outside the loop or hard-coding them in the query whenever possible.</p>\n<h3>What is the potential impact?</h3>\n<ul>\n  <li> <em>Performance</em>: the unnecessary calls to the setter methods bring overhead. </li>\n  <li> <em>Sustainability</em>: the extra overhead has a negative impact on the environment. </li>\n</ul>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/21/docs/api/java.sql/java/sql/PreparedStatement.html\">Oracle SDK - PreparedStatement</a> </li>\n  <li> <a href=\"https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html\">Oracle Tutorial - Using Prepared Statements</a> </li>\n</ul>"
                },
                {
                    "key": "introduction",
                    "content": "<p>The <code>java.sql.PreparedStatement</code> represents a precompiled SQL statement that can be efficiently executed multiple times.</p>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>Place calls to setter methods that take a constant argument outside the loop.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class DatabaseExample {\n\n    public record Order(String id, BigDecimal price) {}\n\n    public void updateTodayOrders(Connection connection, List&lt;Order&gt; orders) {\n            Date today = java.sql.Date.valueOf(LocalDate.now());\n            String insertQuery = \"INSERT INTO Order (id, price, executionDate) VALUES (?, ?, ?)\";\n            PreparedStatement preparedStatement = connection.prepareStatement(insertQuery);\n\n            for(Order order: orders) {\n                preparedStatement.setString(1, order.id());\n                preparedStatement.setString(2, order.price());\n                preparedStatement.setDate(3, today); // Noncompliant\n                preparedStatement.executeUpdate();\n            }\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class DatabaseExample {\n\n    public record Order(String id, BigDecimal price) {}\n\n    public void updateTodayOrders(Connection connection, List&lt;Order&gt; orders) {\n            Date today = java.sql.Date.valueOf(LocalDate.now());\n            String insertQuery = \"INSERT INTO Order (id, price, executionDate) VALUES (?, ?, ?)\";\n            PreparedStatement preparedStatement = connection.prepareStatement(insertQuery);\n\n            preparedStatement.setDate(3, today); // Compliant\n            for(Order order: orders) {\n                preparedStatement.setString(1, order.id());\n                preparedStatement.setString(2, order.price());\n                preparedStatement.executeUpdate();\n            }\n    }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "EFFICIENT",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S1104",
            "repo": "java",
            "name": "Class variable fields should not have public accessibility",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:ClassVariableVisibilityCheck"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Public fields in public classes do not respect the encapsulation principle and have three main disadvantages:</p>\n<ul>\n  <li> Additional behavior such as validation cannot be added. </li>\n  <li> The internal representation is exposed, and cannot be changed afterwards. </li>\n  <li> Member values are subject to change from anywhere in the code and may not meet the programmer’s assumptions. </li>\n</ul>\n<p>To prevent unauthorized modifications, private attributes and accessor methods (set and get) should be used.</p>\n<h3>What is the potential impact?</h3>\n<p>Public fields can be modified by any part of the code and this can lead to unexpected changes and hard-to-trace bugs.</p>\n<p>Public fields don’t hide the implementation details. As a consequence, it is no longer possible to change how the data is stored internally without\nimpacting the client code of the class.</p>\n<p>The code is harder to maintain.</p>\n<h3>Exceptions</h3>\n<p>This rule ignores <code>public final</code> fields because they are not modifiable. Also, annotated fields, whatever the annotation(s) will be\nignored, as annotations are often used by injection frameworks, which in exchange require having public fields.</p>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/493\">CWE-493 - Critical Public Variable Without Final Modifier</a> </li>\n</ul>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>Depending on your need there are multiple options:</p>\n<ul>\n  <li> Encapsulate the field\n    <ol>\n      <li> Make the field private. </li>\n      <li> Define methods to get and set the value of the field.<br> These methods are commonly known as getter and setter methods and are prefixed by\n      <code>get</code> and <code>set</code> followed by the name of the field. <em>Note:</em> as a bonus it is now possible to monitor value changes\n      using breakpoints. </li>\n    </ol>  </li>\n  <li> Mark the field as <code>public final</code> if it is not supposed to change. </li>\n</ul>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked\n\n  public String firstName;                       // Noncompliant\n\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked\n\n  private String firstName;\n\n  public String getFirstName() {\n    return firstName;\n  }\n\n  public void setFirstName(String firstName) {\n    this.firstName = firstName;\n  }\n\n}\n</pre>\n<h3>How does this work?</h3>\n<p>By having a setter and a getter the code can control how the field is accessed and modified. For example, adding validation in the setter method\nwill ensure that only valid values are set.</p>\n<p>The access modifiers on the setter can also be changed to <code>private</code> or <code>protected</code> to restrain which code can modify the\nvalue.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "MODULAR",
            "cleanCodeAttributeCategory": "ADAPTABLE",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S1106",
            "repo": "java",
            "name": "An open curly brace should be located at the beginning of a line",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "convention"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "1min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "1min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:LeftCurlyBraceStartLineCheck"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Shared coding conventions make it possible to collaborate efficiently. This rule makes it mandatory to place the open curly brace at the beginning\nof a line.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic void myMethod {  // Noncompliant\n  if(something) {  // Noncompliant\n    executeTask();\n  } else {  // Noncompliant\n    doSomethingElse();\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic void myMethod\n{\n  if(something)\n  {\n    executeTask();\n  } else\n  {\n    doSomethingElse();\n  }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "FORMATTED",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S1107",
            "repo": "java",
            "name": "Close curly brace and the next \"else\", \"catch\" and \"finally\" keywords should be located on the same line",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "convention"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "1min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "1min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:RightCurlyBraceSameLineAsNextBlockCheck"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Shared coding conventions make it possible for a team to collaborate efficiently.</p>\n<p>This rule makes it mandatory to place closing curly braces on the same line as the next <code>else</code>, <code>catch</code> or\n<code>finally</code> keywords.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic void myMethod() {\n  if(something) {\n    executeTask();\n  } else if (somethingElse) {\n    doSomethingElse();\n  }\n  else {                               // Noncompliant\n     generateError();\n  }\n\n  try {\n    generateOrder();\n  } catch (Exception e) {\n    log(e);\n  }\n  finally {                            // Noncompliant\n    closeConnection();\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic void myMethod() {\n  if(something) {\n    executeTask();\n  } else if (somethingElse) {\n    doSomethingElse();\n  } else {\n     generateError();\n  }\n\n  try {\n    generateOrder();\n  } catch (Exception e) {\n    log(e);\n  } finally {\n    closeConnection();\n  }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "FORMATTED",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S1108",
            "repo": "java",
            "name": "Close curly brace and the next \"else\", \"catch\" and \"finally\" keywords should be on two different lines",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "convention"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "1min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "1min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:RightCurlyBraceDifferentLineAsNextBlockCheck"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Shared coding conventions make it possible for a team to collaborate efficiently.</p>\n<p>This rule makes it mandatory to place a closing curly brace and the next <code>else</code>, <code>catch</code> or <code>finally</code> keyword on\ntwo different lines.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic void myMethod() {\n  if(something) {\n    executeTask();\n  } else if (somethingElse) {          // Noncompliant\n    doSomethingElse();\n  }\n  else {                               // Compliant\n     generateError();\n  }\n\n  try {\n    generateOrder();\n  } catch (Exception e) {\n    log(e);\n  }\n  finally {\n    closeConnection();\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic void myMethod() {\n  if(something) {\n    executeTask();\n  }\n  else if (somethingElse) {\n    doSomethingElse();\n  }\n  else {\n     generateError();\n  }\n\n  try {\n    generateOrder();\n  }\n  catch (Exception e) {\n    log(e);\n  }\n  finally {\n    closeConnection();\n  }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "FORMATTED",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S1109",
            "repo": "java",
            "name": "A close curly brace should be located at the beginning of a line",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "convention"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "1min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "1min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:RightCurlyBraceStartLineCheck"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Shared coding conventions make it possible for a team to efficiently collaborate. This rule makes it mandatory to place a close curly brace at the\nbeginning of a line.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nif(condition) {\n  doSomething();}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nif(condition) {\n  doSomething();\n}\n</pre>\n<h3>Exceptions</h3>\n<p>When blocks are inlined (open and close curly braces on the same line), no issue is triggered.</p>\n<pre>\nif(condition) {doSomething();}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "FORMATTED",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S1215",
            "repo": "java",
            "name": "Execution of the Garbage Collector should be triggered only by the JVM",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "unpredictable",
                "bad-practice"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "30min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "30min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1215"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Calling <code>System.gc()</code> or <code>Runtime.getRuntime().gc()</code> is a bad idea for a simple reason: there is no way to know exactly what\nwill be done under the hood by the JVM because the behavior will depend on its vendor, version and options:</p>\n<ul>\n  <li> Will the whole application be frozen during the call? </li>\n  <li> Is the <code>-XX:DisableExplicitGC</code> option activated? </li>\n  <li> Will the JVM simply ignore the call? </li>\n  <li> …​ </li>\n</ul>\n<p>Like for <code>System.gc()</code>, there is no reason to manually call <code>runFinalization()</code> to force the call of finalization methods of\nany objects pending finalization.</p>\n<p>An application relying on these unpredictable methods is also unpredictable and therefore broken. The task of running the garbage collector and\ncalling <code>finalize()</code> methods should be left exclusively to the JVM.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "EFFICIENT",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S1220",
            "repo": "java",
            "name": "The default unnamed package should not be used",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "convention"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1220"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://www.baeldung.com/java-packages\">Baeldung - Guide to Java Packages</a> </li>\n  <li> <a\n  href=\"https://www.tutorialspoint.com/what-are-the-best-practices-to-keep-in-mind-while-using-packages-in-java#:~:text=Naming%20conventions%20and%20best%20practices%20for%20packages\">tutorialspoint - What are the best practices to keep in mind while using packages in Java?</a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Java packages serve two purposes:</p>\n<ol>\n  <li> Structure — Packages give a structure to the set of classes of your project. It is a bad practice to put all classes flat into the source\n  directory of a project without a package structure. A structure helps to mentally break down a project into smaller parts, simplifying readers'\n  understanding of how components are connected and how they interact. </li>\n  <li> Avoiding name clashes — a class part of the <em>default package</em> if no explicit package name is specified. This can easily cause name\n  collisions when other projects define a class of the same name. </li>\n</ol>\n<p>When no package is explicitly specified for the classes in your project, this makes the project harder to understand and may cause name collisions\nwith other projects. Also, classes located in the default package not be accessed from classes within named packages since Java 1.4.</p>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>Move your class to a package directory and explicitly state the package’s name at the top of the class. If your project does not have a package\nstructure, think of a structure that fits your needs. The package names should be unique to your project. You can find some best practices when\nchoosing package names in the Ressources section below.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class MyClass { /* ... */ } // Noncompliant, no package spacified\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npackage org.example; // Compliant\n\npublic class MyClass{ /* ... */ }\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "MODULAR",
            "cleanCodeAttributeCategory": "ADAPTABLE",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S1221",
            "repo": "java",
            "name": "Methods should not be named \"tostring\", \"hashcode\" or \"equal\"",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1221"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Due to the similar name with the methods <code>Object.toString</code>, <code>Object.hashCode</code> and <code>Object.equals</code>, there is a\nsignificant likelihood that a developer intended to override one of these methods but made a spelling error.</p>\n<p>Even if no such error exists and the naming was done on purpose, these method names can be misleading. Readers might not notice the difference, or\nif they do, they may falsely assume that the developer made a mistake.</p>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>If you intended to override one of the methods <code>Object.toString</code>, <code>Object.hashCode</code>, or <code>Object.equals</code>, correct\nthe spelling. Also, you should add the <code>@Override</code> modifier, which causes a compiler error message in case the annotated method does not\noverride anything.</p>\n<p>If the naming was done on purpose, you should rename the methods to be more distinctive.</p>\n\n<h4>Noncompliant code example</h4>\n<pre>\npublic int hashcode() { /* ... */ }             // Noncompliant\n\npublic String tostring() { /* ... */ }          // Noncompliant\n\npublic boolean equal(Object obj) { /* ... */ }  // Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre>\n@Override\npublic int hashCode() { /* ... */ }             // Compliant\n\n@Override\npublic String toString() { /* ... */ }          // Compliant\n\n@Override\npublic boolean equals(Object obj) { /* ... */ } // Compliant\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S1223",
            "repo": "java",
            "name": "Non-constructor methods should not have the same name as the enclosing class",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1223"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Having a class and some of its methods sharing the same name is misleading, and leaves others to wonder whether it was done that way on purpose, or\nwas the methods supposed to be a constructor.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class Foo {\n   public Foo() {...}\n   public void Foo(String label) {...}  // Noncompliant\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic class Foo {\n   public Foo() {...}\n   public void foo(String label) {...}  // Compliant\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S1228",
            "repo": "java",
            "name": "Packages should have a javadoc file 'package-info.java'",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "convention"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1228"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Each package in a Java project should include a <code>package-info.java</code> file. The purpose of this file is to document the Java package using\njavadoc and declare package annotations.</p>\n<h3>Compliant solution</h3>\n<pre>\n/**\n* This package has non null parameters and is documented.\n**/\n@ParametersAreNonnullByDefault\npackage org.foo.bar;\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S1699",
            "repo": "java",
            "name": "Constructors should only call non-overridable methods",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1699"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Calling an overridable method from a constructor could result in failures or strange behaviors when instantiating a subclass which overrides the\nmethod.</p>\n<p>For example:</p>\n<ul>\n  <li> The subclass class constructor starts by contract by calling the parent class constructor. </li>\n  <li> The parent class constructor calls the method, which has been overridden in the child class. </li>\n  <li> If the behavior of the child class method depends on fields that are initialized in the child class constructor, unexpected behavior (like a\n  <code>NullPointerException</code>) can result, because the fields aren’t initialized yet. </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class Parent {\n\n  public Parent () {\n    doSomething();  // Noncompliant\n  }\n\n  public void doSomething () {  // not final; can be overridden\n    ...\n  }\n}\n\npublic class Child extends Parent {\n\n  private String foo;\n\n  public Child(String foo) {\n    super(); // leads to call doSomething() in Parent constructor which triggers a NullPointerException as foo has not yet been initialized\n    this.foo = foo;\n  }\n\n  public void doSomething () {\n    System.out.println(this.foo.length());\n  }\n\n}\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/8zZGBQ\">CERT, MET05-J.</a> - Ensure that constructors do not call overridable methods </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/6ns-BQ\">CERT, OOP50-CPP.</a> - Do not invoke virtual functions from constructors or destructors\n  </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S2437",
            "repo": "java",
            "name": "Unnecessary bit operations should not be performed",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "suspicious"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2437"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Certain bit operations are just silly and should not be performed because their results are predictable.</p>\n<p>Specifically, using <code>&amp; -1</code> with any value will always result in the original value, as will <code>anyValue ^ 0</code> and\n<code>anyValue | 0</code>.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "BLOCKER"
                }
            ]
        },
        {
            "key": "java:S2438",
            "repo": "java",
            "name": "\"Thread\" should not be used where a \"Runnable\" argument is expected",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "multi-threading",
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2438"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>The semantics of <code>Thread</code> and <code>Runnable</code> are different, and while it is technically correct to use <code>Thread</code> where\na <code>Runnable</code> is expected, it is a bad practice to do so.</p>\n<p>The crux of the issue is that <code>Thread</code> is a larger concept than <code>Runnable</code>. A <code>Runnable</code> represents a task. A\n<code>Thread</code> represents a task and its execution management (ie: how it should behave when started, stopped, resumed, …​). It is both a task\nand a lifecycle management.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic static void main(String[] args) {\n\tThread runnable = new Thread() {\n\t\t@Override\n\t\tpublic void run() { /* ... */ }\n\t};\n\tnew Thread(runnable).start();  // Noncompliant\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic static void main(String[] args) {\n\tRunnable runnable = new Runnable() {\n\t\t@Override\n\t\tpublic void run() { /* ... */ }\n\t};\n\tnew Thread(runnable).start();\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S2674",
            "repo": "java",
            "name": "The value returned from a stream read should be checked",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2674"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/VzdGBQ\">CERT, FIO10-J.</a> - Ensure the array is filled when using read() to fill an array </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>You cannot assume that any given stream reading call will fill the <code>byte[]</code> passed in to the method. Instead, you must check the value\nreturned by the read method to see how many bytes were read. Fail to do so, and you introduce bug that is both harmful and difficult to reproduce.</p>\n<p>Similarly, you cannot assume that <code>InputStream.skip</code> will actually skip the requested number of bytes, but must check the value returned\nfrom the method.</p>\n<p>This rule raises an issue when an <code>InputStream.read</code> method that accepts a <code>byte[]</code> is called, but the return value is not\nchecked, and when the return value of <code>InputStream.skip</code> is not checked. The rule also applies to <code>InputStream</code> child\nclasses.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic void doSomething(String fileName) {\n  try {\n    InputStream is = new InputStream(file);\n    byte [] buffer = new byte[1000];\n    is.read(buffer);  // Noncompliant\n    // ...\n  } catch (IOException e) { ... }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic void doSomething(String fileName) {\n  try {\n    InputStream is = new InputStream(file);\n    byte [] buffer = new byte[1000];\n    int count = 0;\n    while (count = is.read(buffer) &gt; 0) {\n      // ...\n    }\n  } catch (IOException e) { ... }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "COMPLETE",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S2675",
            "repo": "java",
            "name": "\"readObject\" should not be \"synchronized\"",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "confusing"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2675"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>The <code>readObject</code> method is implemented when a <code>Serializable</code> object requires special handling to be reconstructed from a\nfile. The object created by <code>readObject</code> is accessed only by the thread that called the method, thus using the <code>synchronized</code>\nkeyword in this context is unnecessary and causes confusion.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nprivate synchronized void readObject(java.io.ObjectInputStream in)\n     throws IOException, ClassNotFoundException { // Noncompliant\n  //...\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nprivate void readObject(java.io.ObjectInputStream in)\n     throws IOException, ClassNotFoundException { // Compliant\n  //...\n}\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/io/Serializable.html\">Oracle SDK 20 - Serializable</a> </li>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/io/ObjectInputStream.html\">Oracle SDK 20 - ObjectInputStream</a>\n  </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://www.baeldung.com/java-serialization\">Serialization in Java</a> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S2676",
            "repo": "java",
            "name": "\"Math.abs\" and negation should not be used on numbers that could be \"MIN_VALUE\"",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "suspicious"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2676"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/lang/Math.html#abs(int)\">Oracle SDK 20 - Math.abs(int)</a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>This rule involves the use of <code>Math.abs</code> and negation on numbers that could be <code>MIN_VALUE</code>. It is a problem because it can\nlead to incorrect results and unexpected behavior in the program.</p>\n<p>When <code>Math.abs</code> and negation are used on numbers that could be <code>MIN_VALUE</code>, the result can be incorrect due to integer\noverflow. Common methods that can return a <code>MIN_VALUE</code> and raise an issue when used together with <code>Math.abs</code> are:</p>\n<ul>\n  <li> <code>Random.nextInt()</code> and <code>Random.nextLong()</code> </li>\n  <li> <code>hashCode()</code> </li>\n  <li> <code>compareTo()</code> </li>\n</ul>\n<p>Alternatively, the <code>absExact()</code> method throws an <code>ArithmeticException</code> for <code>MIN_VALUE</code>.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic void doSomething(String str) {\n  if (Math.abs(str.hashCode()) &gt; 0) { // Noncompliant\n    // ...\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic void doSomething(String str) {\n  if (str.hashCode() != 0) {\n    // ...\n  }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "COMPLETE",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S2677",
            "repo": "java",
            "name": "\"read\" and \"readLine\" return values should be used",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2677"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>The <code>Reader.read()</code> and the <code>BufferedReader.readLine()</code> are used for reading data from a data source. The return value of\nthese methods is the data read from the data source, or <code>null</code> when the end of the data source is reached. If the return value is ignored,\nthe data read from the source is thrown away and may indicate a bug.</p>\n<p>This rule raises an issue when the return values of <code>Reader.read()</code> and <code>BufferedReader.readLine()</code> and their subclasses are\nignored or merely null-checked.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic void doSomethingWithFile(String fileName) {\n  try(BufferedReader buffReader = new BufferedReader(new FileReader(fileName))) {\n    while (buffReader.readLine() != null) { // Noncompliant\n      // ...\n    }\n  } catch (IOException e) {\n    // ...\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic void doSomethingWithFile(String fileName) {\n  try(BufferedReader buffReader = new BufferedReader(new FileReader(fileName))) {\n    String line = null;\n    while ((line = buffReader.readLine()) != null) {\n      // ...\n    }\n  } catch (IOException e) {\n    // ...\n  }\n}\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/io/Reader.html#read()\">Oracle SDK 20 - Reader.read()</a> </li>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/io/BufferedReader.html#readLine()\">Oracle SDK 20 -\n  BufferedReader.readLine()</a> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "COMPLETE",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S2789",
            "repo": "java",
            "name": "\"null\" should not be used with \"Optional\"",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "java8"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2789"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/util/Optional.html\">Oracle SDK 20 - Optional</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://www.baeldung.com/java-optional\">Java Optional Guide</a> </li>\n</ul>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>There are a few ways to fix this issue:</p>\n<ul>\n  <li> Avoid returning <code>null</code> from a method whose return type is <code>Optional</code>. </li>\n  <li> Remove the null-check of an <code>Optional</code> and use <code>Optional</code> methods instead, like <code>isPresent()</code> or\n  <code>ifPresent()</code>. </li>\n</ul>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic void doSomething () {\n  Optional&lt;String&gt; optional = getOptional();\n  if (optional != null) {  // Noncompliant\n    // do something with optional...\n  }\n  Optional&lt;String&gt; text = null; // Noncompliant, a variable whose type is Optional should never itself be null\n  // ...\n}\n\n@Nullable // Noncompliant\npublic Optional&lt;String&gt; getOptional() {\n  // ...\n  return null;  // Noncompliant\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic void doSomething () {\n  Optional&lt;String&gt; optional = getOptional();\n  optional.ifPresent(\n    // do something with optional...\n  );\n  Optional&lt;String&gt; text = Optional.empty();\n  // ...\n}\n\npublic Optional&lt;String&gt; getOptional() {\n  // ...\n  return Optional.empty();\n}\n</pre>"
                },
                {
                    "key": "root_cause",
                    "content": "<p><code>Optional</code> acts as a container object that may or may not contain a non-null value. It is introduced in Java 8 to help avoid\n<code>NullPointerException</code>. It provides methods to check if a value is present and retrieve the value if it is present.</p>\n<p><code>Optional</code> is used instead of <code>null</code> values to make the code more readable and avoid potential errors.</p>\n<p>It is a bad practice to use <code>null</code> with <code>Optional</code> because it is unclear whether a value is present or not, leading to\nconfusion and potential <code>NullPointerException</code> errors.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S3400",
            "repo": "java",
            "name": "Methods should not return constants",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "confusing"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S3400"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>There’s no point in forcing the overhead of a method call for a method that always returns the same constant value. Even worse, the fact that a\nmethod call must be made will likely mislead developers who call the method thinking that something more is done. Declare a constant instead.</p>\n<p>This rule raises an issue if on methods that contain only one statement: the <code>return</code> of a constant value.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nint getBestNumber() {\n  return 12;  // Noncompliant\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nstatic final int BEST_NUMBER = 12;\n</pre>\n<h3>Exceptions</h3>\n<p>The following types of method are ignored:</p>\n<ul>\n  <li> methods that override a method. </li>\n  <li> methods that are not final (not having the <code>final</code>, <code>private</code> or <code>static</code> modifier and not in a record or a\n  final class). </li>\n  <li> methods with annotations, such as <code>@Override</code> or Spring’s <code>@RequestMapping</code>. </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S3878",
            "repo": "java",
            "name": "Arrays should not be created for varargs parameters",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "clumsy"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S3878"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>There’s no point in creating an array solely for the purpose of passing it as a varargs (<code>...</code>) argument; varargs <em>is</em> an array.\nSimply pass the elements directly. They will be consolidated into an array automatically. Incidentally passing an array where <code>Object ...</code>\nis expected makes the intent ambiguous: Is the array supposed to be one object or a collection of objects?</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic void callTheThing() {\n  //...\n  doTheThing(new String[] { \"s1\", \"s2\"});  // Noncompliant: unnecessary\n  doTheThing(new String[12]);  // Compliant\n  doTheOtherThing(new String[8]);  // Noncompliant: ambiguous\n  // ...\n}\n\npublic void doTheThing (String ... args) {\n  // ...\n}\n\npublic void doTheOtherThing(Object ... args) {\n  // ...\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic void callTheThing() {\n  //...\n  doTheThing(\"s1\", \"s2\");\n  doTheThing(new String[12]);\n  doTheOtherThing((Object[]) new String[8]);\n   // ...\n}\n\npublic void doTheThing (String ... args) {\n  // ...\n}\n\npublic void doTheOtherThing(Object ... args) {\n  // ...\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S4605",
            "repo": "java",
            "name": "Spring beans should be considered by \"@ComponentScan\"",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "spring",
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S4605"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Spring beans belonging to packages that are not included in a <code>@ComponentScan</code> configuration will not be accessible in the Spring\nApplication Context. Therefore, it’s likely to be a configuration mistake that will be detected by this rule.</p>\n<p><strong>Note:</strong> the <code>@ComponentScan</code> is implicit in the <code>@SpringBootApplication</code> annotation, case in which Spring Boot\nwill auto scan for components in the package containing the Spring Boot main class and its sub-packages.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npackage com.mycompany.app;\n\n@Configuration\n@ComponentScan(\"com.mycompany.app.beans\")\npublic class Application {\n...\n}\n\npackage com.mycompany.app.web;\n\n@Controller\npublic class MyController { // Noncompliant; MyController belong to \"com.mycompany.app.web\" while the ComponentScan is looking for beans in \"com.mycompany.app.beans\" package\n...\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npackage com.mycompany.app;\n\n@Configuration\n@ComponentScan({\"com.mycompany.app.beans\",\"com.mycompany.app.web\"})\nor\n@ComponentScan(\"com.mycompany.app\")\nor\n@ComponentScan\npublic class Application {\n...\n}\n\npackage com.mycompany.app.web;\n\n@Controller\npublic class MyController { // \"com.mycompany.app.web\" is referenced by a @ComponentScan annotated class\n...\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S4738",
            "repo": "java",
            "name": "Java features should be preferred to Guava",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "java9",
                "java8"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S4738"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Some Guava features were really useful for Java 7 application because Guava was bringing APIs missing in the JDK. Java 8 fixed some of these\nlimitations. When migrating an application to Java 8 or even when starting a new one, it’s recommended to prefer Java 8 APIs over Guava ones to ease\nits maintenance: developers don’t need to learn how to use two APIs and can stick to the standard one.</p>\n<p>Java 9 brought even more useful methods to the standard Java library and if Java version is equal to or higher than 9, these standard methods\nshould be used.</p>\n<p>This rule raises an issue when the following Guava APIs are used:</p>\n<table>\n  <colgroup>\n    <col style=\"width: 50%;\">\n    <col style=\"width: 50%;\">\n  </colgroup>\n  <thead>\n    <tr>\n      <th>Guava API</th>\n      <th>Java 8 API</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><p>com.google.common.io.BaseEncoding#base64()</p></td>\n      <td><p>java.util.Base64</p></td>\n    </tr>\n    <tr>\n      <td><p>com.google.common.io.BaseEncoding#base64Url()</p></td>\n      <td><p>java.util.Base64</p></td>\n    </tr>\n    <tr>\n      <td><p>com.google.common.base.Joiner.on()</p></td>\n      <td><p>java.lang.String#join() or java.util.stream.Collectors#joining()</p></td>\n    </tr>\n    <tr>\n      <td><p>com.google.common.base.Optional#of()</p></td>\n      <td><p>java.util.Optional#of()</p></td>\n    </tr>\n    <tr>\n      <td><p>com.google.common.base.Optional#absent()</p></td>\n      <td><p>java.util.Optional#empty()</p></td>\n    </tr>\n    <tr>\n      <td><p>com.google.common.base.Optional#fromNullable()</p></td>\n      <td><p>java.util.Optional#ofNullable()</p></td>\n    </tr>\n    <tr>\n      <td><p>com.google.common.base.Optional</p></td>\n      <td><p>java.util.Optional</p></td>\n    </tr>\n    <tr>\n      <td><p>com.google.common.base.Predicate</p></td>\n      <td><p>java.util.function.Predicate</p></td>\n    </tr>\n    <tr>\n      <td><p>com.google.common.base.Function</p></td>\n      <td><p>java.util.function.Function</p></td>\n    </tr>\n    <tr>\n      <td><p>com.google.common.base.Supplier</p></td>\n      <td><p>java.util.function.Supplier</p></td>\n    </tr>\n    <tr>\n      <td><p>com.google.common.io.Files.createTempDir</p></td>\n      <td><p>java.nio.file.Files.createTempDirectory</p></td>\n    </tr>\n  </tbody>\n</table>\n<table>\n  <colgroup>\n    <col style=\"width: 50%;\">\n    <col style=\"width: 50%;\">\n  </colgroup>\n  <thead>\n    <tr>\n      <th>Guava API</th>\n      <th>Java 9 API</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><p>com.google.common.collect.ImmutableSet#of()</p></td>\n      <td><p>java.util.Set#of()</p></td>\n    </tr>\n    <tr>\n      <td><p>com.google.common.collect.ImmutableList#of()</p></td>\n      <td><p>java.util.List#of()</p></td>\n    </tr>\n    <tr>\n      <td><p>com.google.common.collect.ImmutableMap#of()</p></td>\n      <td><p>java.util.Map#of() or java.util.Map#ofEntries()</p></td>\n    </tr>\n  </tbody>\n</table>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S4968",
            "repo": "java",
            "name": "The upper bound of type variables and wildcards should not be \"final\"",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S4968"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>When a type variable or a wildcard declares an upper bound that is <code>final</code>, the parametrization is not generic at all because it accepts\none and only one type at runtime: the one that is <code>final</code>. Instead of using <code>Generics</code>, it’s simpler to directly use the\nconcrete <code>final</code> class.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic static &lt;T extends String&gt; T getMyString() { // Noncompliant; String is a \"final\" class and so can't be extended\n [...]\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic static String getMyString() { // Compliant\n  [...]\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S4970",
            "repo": "java",
            "name": "Derived exceptions should not hide their parents' catch blocks",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S4970"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>The <code>catch</code> block of a checked exception \"E\" may be hidden because the corresponding <code>try</code> block only throws exceptions\nderived from E.</p>\n<p>These derived exceptions are handled in dedicated <code>catch</code> blocks prior to the <code>catch</code> block of the base exception E.</p>\n<p>The <code>catch</code> block of E is unreachable and should be considered dead code. It should be removed, or the entire try-catch structure should\nbe refactored.</p>\n<p>It is also possible that a single exception type in a multi-catch block may be hidden while the catch block itself is still reachable. In that case\nit is enough to only remove the hidden exception type or to replace it with another type.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class HiddenCatchBlock {\n\n  public static class CustomException extends Exception {\n  }\n\n  public static class CustomDerivedException extends CustomException {\n  }\n\n  public static void main(String[] args) {\n    try {\n      throwCustomDerivedException();\n    } catch(CustomDerivedException e) {\n      // ...\n    } catch(CustomException e) { // Noncompliant; this code is unreachable\n      // ...\n    }\n  }\n\n  private static void throwCustomDerivedException() throws CustomDerivedException {\n    throw new CustomDerivedException();\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic class HiddenCatchBlock {\n\n  public static class CustomException extends Exception {\n  }\n\n  public static class CustomDerivedException extends CustomException {\n  }\n\n  public static void main(String[] args) {\n    try {\n      throwCustomDerivedException();\n    } catch(CustomDerivedException e) { // Compliant; try-catch block is \"catching\" only the Exception that can be thrown in the \"try\"\n      //...\n    }\n  }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S4973",
            "repo": "java",
            "name": "Strings and Boxed types should be compared using \"equals()\"",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S4973"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>It’s almost always a mistake to compare two instances of <code>java.lang.String</code> or boxed types like <code>java.lang.Integer</code> using\nreference equality <code>==</code> or <code>!=</code>, because it is not comparing actual value but locations in memory.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nString firstName = getFirstName(); // String overrides equals\nString lastName = getLastName();\n\nif (firstName == lastName) { ... }; // Non-compliant; false even if the strings have the same value\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nString firstName = getFirstName();\nString lastName = getLastName();\n\nif (firstName != null &amp;&amp; firstName.equals(lastName)) { ... };\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/595\">CWE-595 - Comparison of Object References Instead of Object Contents</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/597\">CWE-597 - Use of Wrong Operator in String Comparison</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/UjdGBQ\">CERT, EXP03-J.</a> - Do not use the equality operators when comparing values of boxed\n  primitives </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/yDdGBQ\">CERT, EXP50-J.</a> - Do not confuse abstract object equality with reference equality\n  </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S4977",
            "repo": "java",
            "name": "Type parameters should not shadow other type parameters",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S4977"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Shadowing makes it impossible to use the type parameter from the outer scope. Also, it can be confusing to distinguish which type parameter is\nbeing used.</p>\n<p>This rule raises an issue when a type parameter from an inner scope uses the same name as one in an outer scope.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n public class TypeParameterHidesAnotherType&lt;T&gt; {\n\n    public class Inner&lt;T&gt; { // Noncompliant\n      //...\n    }\n\n    private &lt;T&gt; T method() { // Noncompliant\n      return null;\n    }\n\n  }\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic class NoTypeParameterHiding&lt;T&gt; {\n\n    public class Inner&lt;S&gt; { // Compliant\n      List&lt;S&gt; listOfS;\n    }\n\n    private &lt;V&gt; V method() { // Compliant\n      return null;\n    }\n\n  }\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S6905",
            "repo": "java",
            "name": "SQL queries should retrieve only necessary fields",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "sustainability",
                "sql"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S6905"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>A common reason for a poorly performant query is because it’s processing more data than required.</p>\n<p>Querying unnecessary data demands extra work on the server, adds network overhead, and consumes memory and CPU resources on the application server.\nThe effect is amplified when the query includes multiple <em>joins</em>.</p>\n<p>The rule flags an issue when a <code>SELECT *</code> query is provided as an argument to methods in <code>java.sql.Connection</code> and\n<code>java.sql.Statement</code>.</p>\n<h3>What is the potential impact?</h3>\n<ul>\n  <li> <em>Performance</em>: the unnecessary extra data being processed brings overhead. </li>\n  <li> <em>Sustainability</em>: the extra resources used have a negative impact on the environment. </li>\n</ul>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>Make the <code>SELECT *</code> an explicit selection of the required fields.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class OrderRepository {\n\n    public record OrderSummary(String name, String orderId, BigDecimal price) { }\n\n    public List&lt;OrderSummary&gt; queryOrderSummaries(Connection conn) {\n            String sql = \"SELECT * \" +                                                         // Noncompliant\n                          \"FROM Orders JOIN Customers ON Orders.customerId = Customers.id \";\n\n            Statement stmt = conn.createStatement();\n            ResultSet rs = stmt.executeQuery(sql);\n\n            return convertResultToOrderSummaryList(rs);\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class OrderRepository {\n\n    public record OrderSummary(String name, String orderId, BigDecimal price) { }\n\n    public List&lt;OrderSummary&gt; queryOrderSummaries(Connection conn) {\n            String sql = \"SELECT Customers.name, Orders.id, Orders.price \" +                   // Compliant\n                          \"FROM Orders JOIN Customers ON Orders.customerId = Customers.id \";\n\n            Statement stmt = conn.createStatement();\n            ResultSet rs = stmt.executeQuery(sql);\n\n            return convertResultToOrderSummaryList(rs);\n    }\n}\n</pre>"
                },
                {
                    "key": "introduction",
                    "content": "<p>The <em>Java Database Connectivity (JDBC) API</em> provides the <code>java.sql.Statement</code> interface that allows to represent an SQL statement\nand to execute queries with the database.</p>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/21/docs/api/java.sql/java/sql/Statement.html\">Oracle SDK - Statement</a> </li>\n  <li> <a href=\"https://www.oreilly.com/library/view/high-performance-mysql/9780596101718/ch04.html\">O’Reilly - High Performance MySQL - Query\n  Performance Optimization</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://www.geeksforgeeks.org/difference-between-execute-query-and-update-methods-in-java/\">GeeksforGeeks - Difference Between\n  Execute(), query() and Update() Methods in Java</a> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "EFFICIENT",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S6912",
            "repo": "java",
            "name": "Use batch Processing in JDBC",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "sustainability",
                "sql"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S6912"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/21/docs/api/java.sql/java/sql/Statement.html\">Oracle Java SE 21 API - java.sql.Statement</a>\n  </li>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/21/docs/api/java.sql/java/sql/PreparedStatement.html\">Oracle Java SE 21 API -\n  java.sql.PreparedStatement</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://www.baeldung.com/jdbc-batch-processing\">Baeldung - JDBC Batch Processing</a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Executing a batch of SQL queries instead of individual queries improves performance by reducing communication overhead with the database.</p>\n<p>Batching SQL statements is beneficial in common situations where a SQL statement is executed within a loop. In such cases, adding the statement to\na batch and subsequently executing it reduces the number of interactions with the database. This results in improved efficiency and faster execution\ntimes.</p>\n<p>The rule raises an issue when it detects a <code>java.sql.Statement</code> being executed within a loop instruction, such as <code>for</code>,\n<code>while</code> or the <code>forEach</code> method of <code>java.lang.Iterable</code>, <code>java.util.Map</code> and\n<code>java.util.stream.Stream</code>.</p>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>Group SQL statements by using the method <code>addBatch</code> to add them to a batch and then execute them using <code>executeBatch</code> to send\nthem to the database in a single call.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic void execute(Connection connection) {\n  try {\n    Statement statement = connection.createStatement();\n\n    for (int i = 0; i &lt; 10; i++) {\n      statement.execute(\"INSERT INTO myTable (column1, column2) VALUES (\" + i + \", 'value\" + i + \"')\"); // Noncompliant\n    }\n\n    statement.close();\n    connection.close();\n  } catch (SQLException e) {\n    e.printStackTrace();\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic void execute(Connection connection) {\n  try {\n    Statement statement = connection.createStatement();\n\n    for (int i = 0; i &lt; 10; i++) {\n      statement.addBatch(\"INSERT INTO myTable (column1, column2) VALUES (\" + i + \", 'value\" + i + \"')\"); // Compliant\n    }\n    statement.executeBatch();\n\n    statement.close();\n    connection.close();\n  } catch (SQLException e) {\n    e.printStackTrace();\n  }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "EFFICIENT",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S6913",
            "repo": "java",
            "name": "\"Math.clamp\" should be used with correct ranges",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "java21"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S6913"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Java 21 introduces the new method <code>Math.clamp(value, min, max)</code> that fits a value within a specified interval. Before Java 21, this\nbehavior required explicit calls to the <code>Math.min</code> and <code>Math.max</code> methods, as in <code>Math.min(max, Math.max(value,\nmin))</code>.</p>\n<p>If <code>min &gt; max</code>, <code>Math.clamp</code> throws an <code>IllegalArgumentException</code>, indicating an invalid interval. This can\noccur if the <code>min</code> and <code>max</code> arguments are mistakenly reversed.</p>\n<p>Note that <code>Math.clamp</code> is not a general substitute for <code>Math.min</code> or <code>Math.max</code>, but for the combination of both.\nIf <code>value</code> is the same as <code>min</code> or <code>max</code>, using <code>Math.clamp</code> is unnecessary and <code>Math.min</code> or\n<code>Math.max</code> should be used instead.</p>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> Java Documentation - <a\n  href=\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/Math.html#clamp(long,int,int)\">Math.clamp</a> </li>\n</ul>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<ul>\n  <li> If 2nd argument &gt; 3rd argument, use <code>Math.clamp(value, min, max)</code> instead of <code>Math.clamp(value, max, min)</code>. </li>\n  <li> If <code>value</code> is the same as <code>min</code>, fix the logic or use <code>Math.min(value, max)</code> instead. </li>\n  <li> If <code>value</code> is the same as <code>max</code>, fix the logic or use <code>Math.max(min, value)</code> instead. </li>\n  <li> If <code>min</code> is the same as <code>max</code>, fix the logic because <code>Math.clamp(value, x, x)</code> will always return\n  <code>x</code>. </li>\n</ul>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nMath.clamp(red, 255, 0); // Noncompliant, [255,0] is not a valid range\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nMath.clamp(red, 0, 255); // Compliant\n</pre>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nMath.clamp(red, red, 255); // Noncompliant, use Math.min(red, 255)\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nMath.min(red, 255); // Compliant\n</pre>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"3\" data-diff-type=\"noncompliant\">\nMath.clamp(red, 0, red); // Noncompliant, use Math.max(red, 0)\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"3\" data-diff-type=\"compliant\">\nMath.max(red, 0); // Compliant\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S6914",
            "repo": "java",
            "name": "Use Fused Location to optimize battery power",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "android",
                "sustainability"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S6914"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://developers.google.com/android/reference/com/google/android/gms/location/FusedLocationProviderClient.html\">Google Play Services\n  - FusedLocationProviderClient</a> </li>\n  <li> <a href=\"https://developer.android.com/develop/sensors-and-location/location/battery\">Android Developers - Optimize location for battery</a>\n  </li>\n  <li> <a href=\"https://developer.android.com/reference/android/location/package-summary\">Android Developers - Android Location</a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>The location awareness feature can significantly drain the device’s battery.</p>\n<p>The recommended way to maximize the battery life is to use the <em>fused location provider</em> which combines signals from GPS, Wi-Fi, and cell\nnetworks, as well as accelerometer, gyroscope, magnetometer and other sensors. The <code>FusedLocationProviderClient</code> automatically chooses the\nbest method to retrieve a device’s location based on the device’s context.</p>\n<p>The rule flags an issue when <code>android.location.LocationManager</code> or <code>com.google.android.gms.location.LocationClient</code> is used\ninstead of <code>com.google.android.gms.location.FusedLocationProviderClient</code>.</p>\n<h3>What is the potential impact?</h3>\n<ul>\n  <li> <em>Usability</em>: the non-optimized location API consumer more battery. </li>\n  <li> <em>Sustainability</em>: the extra energy required has a negative impact on the environment. </li>\n</ul>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>Replace the usages of <code>android.location.LocationManager</code> or <code>com.google.android.gms.location.LocationClient</code> with\n<code>com.google.android.gms.location.FusedLocationProviderClient</code>.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class LocationsActivity extends Activity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        // ...\n\n        LocationManager locationManager = (LocationManager) this.getSystemService(Context.LOCATION_SERVICE); // Noncompliant\n\n        LocationListener locationListener = new LocationListener() {\n            public void onLocationChanged(Location location) {\n                // Use the location object as needed\n            }\n        };\n\n        locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 0, 0, locationListener);\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class LocationsActivity extends Activity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        // ...\n\n        FusedLocationProviderClient fusedLocationClient = LocationServices.getFusedLocationProviderClient(this); // Compliant\n\n        fusedLocationClient.getLastLocation()\n            .addOnSuccessListener(this, location -&gt; {\n                // Use the location object as needed\n            });\n    }\n}\n</pre>"
                },
                {
                    "key": "introduction",
                    "content": "<p>Location awareness is a common feature for mobile application that enhance the user experience by providing context-specific services.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "EFFICIENT",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S6915",
            "repo": "java",
            "name": "\"String.indexOf\" should be used with correct ranges",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "java21"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S6915"
                ]
            },
            "descriptionSections": [
                {
                    "key": "how_to_fix",
                    "content": "<ul>\n  <li> Use <code>String.indexOf(what, beginIndex, endIndex)</code> instead of <code>String.indexOf(what, endIndex, beginIndex)</code>. </li>\n  <li> Use <code>String.indexOf(what, 0, endIndex)</code> instead of <code>String.indexOf(what, -1, endIndex)</code>. </li>\n</ul>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nString hello = \"Hello, world!\";\nint index = hello.indexOf('o', 11, 7); // Noncompliant, 11..7 is not a valid range\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nString hello = \"Hello, world!\";\nint index = hello.indexOf('o', 7, 11); // Compliant\n</pre>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nString hello = \"Hello, world!\";\nint index = hello.indexOf('o', -1, 11); // Noncompliant, because beginIndex is negative\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nString hello = \"Hello, world!\";\nint index = hello.indexOf('o', 0, 11); // Compliant\n</pre>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Java 21 adds new <code>String.indexOf</code> methods that accept ranges (<code>beginIndex</code>, to <code>endIndex</code>) rather than just a\nstart index. A <code>StringIndexOutOfBounds</code> can be thrown when indicating an invalid range, namely when:</p>\n<ul>\n  <li> <code>beginIndex &gt; endIndex</code> (eg: <code>beginIndex</code> and <code>endIndex</code> arguments are mistakenly reversed) </li>\n  <li> <code>beginIndex &lt; 0</code> (eg: because the older <code>String.indexOf(what, fromIndex)</code> accepts negative values) </li>\n</ul>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> Java Documentation - <a\n  href=\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/String.html#indexOf(int,int,int)\">String.indexOf(int, int, int)</a>\n  </li>\n  <li> Java Documentation - <a\n  href=\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/String.html#indexOf(java.lang.String,int,int)\">String.indexOf(java.lang.String,int,int)</a> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S6916",
            "repo": "java",
            "name": "Use when instead of a single if inside a pattern match body",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "java21"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S6916"
                ]
            },
            "descriptionSections": [
                {
                    "key": "how_to_fix",
                    "content": "<p>Replace the <code>if</code> statement with a guarded case label.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nvoid testObject(Object response) {\n    switch (response) {\n        case String s -&gt; {\n            if(s.length() &gt; 80) { // Noncompliant; use the \"when\" keyword\n                System.out.println(\"This string is too long\");\n            }\n        }\n        case Integer i -&gt; {\n            if(i &gt; 80) { // Noncompliant; use the \"when\" keyword\n                System.out.println(\"This integer is too big\");\n            }\n        }\n        default -&gt; System.out.println(\"Unknown type\");\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nvoid testObject(Object response) {\n    switch (response) {\n        case String s when s.length() &gt; 80 -&gt; {\n            System.out.println(\"This string is too long\");\n        }\n        case Integer i when i &gt; 80 -&gt; {\n            System.out.println(\"This integer is too big\");\n        }\n        default -&gt; System.out.println(\"Unknown type\");\n    }\n}\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> Java Documentation - <a href=\"https://openjdk.org/jeps/441\">Pattern Matching for switch</a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Java 21 has introduced enhancements to switch statements and expressions, allowing them to operate on any type, not just specific ones, as in\nprevious versions. Furthermore, case labels have been upgraded to support patterns, providing an alternative to the previous restriction of only\naccepting constants.</p>\n<pre>\n// As of Java 21\nString patternMatchSwitch(Object obj) {\n    return switch (obj) {\n        case String s  -&gt; String.format(\"String %s\", s);\n        case Integer i -&gt; String.format(\"int %d\", i);\n        default        -&gt; obj.toString();\n    };\n}\n</pre>\n<p>This allows to use the <code>when</code> keyword to specify a condition for a case label, also called a guarded case label.</p>\n<pre>\nString guardedCaseSwitch(Object obj) {\n    return switch (obj) {\n        case String s when s.length() &gt; 0 -&gt; String.format(\"String %s\", s);\n        case Integer i when i &gt; 0 -&gt; String.format(\"int %d\", i);\n        default        -&gt; obj.toString();\n    };\n}\n</pre>\n<p>This syntax is more readable and less error-prone than using an if statement inside the case block and should be preferred.</p>\n<p>This rule reports an issue when a single <code>if</code> statement is used inside a case block.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S1105",
            "repo": "java",
            "name": "An open curly brace should be located at the end of a line",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "convention"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "1min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "1min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:LeftCurlyBraceEndLineCheck"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when an open curly brace is not placed at the end of a\nline of code.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nif(condition)\n{\n  doSomething();\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nif(condition) {\n  doSomething();\n}\n</pre>\n<h3>Exceptions</h3>\n<p>When blocks are inlined (left and right curly braces on the same line), no issue is triggered.</p>\n<pre>\nif(condition) {doSomething();}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "FORMATTED",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S1226",
            "repo": "java",
            "name": "Method parameters, caught exceptions and foreach variables' initial values should not be ignored",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1226"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>While it is technically correct to assign to parameters from within method bodies, doing so before the parameter value is read is likely a bug.\nInstead, initial values of parameters, caught exceptions, and foreach parameters should be, if not treated as <code>final</code>, then at least read\nbefore reassignment.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic void doTheThing(String str, int i, List&lt;String&gt; strings) {\n  str = Integer.toString(i); // Noncompliant\n\n  for (String s : strings) {\n    s = \"hello world\"; // Noncompliant\n  }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S1310",
            "repo": "java",
            "name": "Track uses of \"NOPMD\" suppression comments",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "bad-practice"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1310"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>This rule allows you to track the use of the PMD suppression comment mechanism.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n// NOPMD\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S1312",
            "repo": "java",
            "name": "Loggers should be \"private static final\" and should share a naming convention",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "convention",
                "logging"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "format",
                    "htmlDesc": "Regular expression used to check the logger names against.",
                    "defaultValue": "LOG(?:GER)?",
                    "type": "STRING"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1312"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Regardless of the logging framework in use (logback, log4j, commons-logging, java.util.logging, …​), loggers should be:</p>\n<ul>\n  <li> <code>private</code>: never be accessible outside of its parent class. If another class needs to log something, it should instantiate its own\n  logger. </li>\n  <li> <code>static</code>: not be dependent on an instance of a class (an object). When logging something, contextual information can of course be\n  provided in the messages but the logger should be created at class level to prevent creating a logger along with each object. </li>\n  <li> <code>final</code>: be created once and only once per class. </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<p>With a default regular expression of <code>LOG(?:GER)?</code>:</p>\n<pre>\npublic Logger logger = LoggerFactory.getLogger(Foo.class);  // Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nprivate static final Logger LOGGER = LoggerFactory.getLogger(Foo.class);\n</pre>\n<h3>Exceptions</h3>\n<p>Variables of type <code>org.apache.maven.plugin.logging.Log</code> are ignored.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S1313",
            "repo": "java",
            "name": "Using hardcoded IP addresses is security-sensitive",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "SECURITY_HOTSPOT",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "30min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "30min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1313"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Hardcoding IP addresses is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-5901\">CVE-2006-5901</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3725\">CVE-2005-3725</a> </li>\n</ul>\n<p>Today’s services have an ever-changing architecture due to their scaling and redundancy needs. It is a mistake to think that a service will always\nhave the same IP address. When it does change, the hardcoded IP will have to be modified too. This will have an impact on the product development,\ndelivery, and deployment:</p>\n<ul>\n  <li> The developers will have to do a rapid fix every time this happens, instead of having an operation team change a configuration file. </li>\n  <li> It misleads to use the same address in every environment (dev, sys, qa, prod). </li>\n</ul>\n<p>Last but not least it has an effect on application security. Attackers might be able to decompile the code and thereby discover a potentially\nsensitive address. They can perform a Denial of Service attack on the service, try to get access to the system, or try to spoof the IP address to\nbypass security checks. Such attacks can always be possible, but in the case of a hardcoded IP address solving the issue will take more time, which\nwill increase an attack’s impact.</p>\n<h2>Exceptions</h2>\n<p>No issue is reported for the following cases because they are not considered sensitive:</p>\n<ul>\n  <li> Loopback addresses 127.0.0.0/8 in CIDR notation (from 127.0.0.0 to 127.255.255.255) </li>\n  <li> Broadcast address 255.255.255.255 </li>\n  <li> Non-routable address 0.0.0.0 </li>\n  <li> Strings of the form <code>2.5.&lt;number&gt;.&lt;number&gt;</code> as they <a href=\"http://www.oid-info.com/introduction.htm\">often match\n  Object Identifiers</a> (OID) </li>\n  <li> Addresses in the ranges 192.0.2.0/24, 198.51.100.0/24, 203.0.113.0/24, reserved for documentation purposes by <a\n  href=\"https://datatracker.ietf.org/doc/html/rfc5737\">RFC 5737</a> </li>\n  <li> Addresses in the range 2001:db8::/32, reserved for documentation purposes by <a href=\"https://datatracker.ietf.org/doc/html/rfc3849\">RFC\n  3849</a> </li>\n</ul>\n"
                },
                {
                    "key": "default",
                    "content": "<p>Hardcoding IP addresses is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-5901\">CVE-2006-5901</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3725\">CVE-2005-3725</a> </li>\n</ul>\n<p>Today’s services have an ever-changing architecture due to their scaling and redundancy needs. It is a mistake to think that a service will always\nhave the same IP address. When it does change, the hardcoded IP will have to be modified too. This will have an impact on the product development,\ndelivery, and deployment:</p>\n<ul>\n  <li> The developers will have to do a rapid fix every time this happens, instead of having an operation team change a configuration file. </li>\n  <li> It misleads to use the same address in every environment (dev, sys, qa, prod). </li>\n</ul>\n<p>Last but not least it has an effect on application security. Attackers might be able to decompile the code and thereby discover a potentially\nsensitive address. They can perform a Denial of Service attack on the service, try to get access to the system, or try to spoof the IP address to\nbypass security checks. Such attacks can always be possible, but in the case of a hardcoded IP address solving the issue will take more time, which\nwill increase an attack’s impact.</p>\n<h2>Ask Yourself Whether</h2>\n<p>The disclosed IP address is sensitive, e.g.:</p>\n<ul>\n  <li> Can give information to an attacker about the network topology. </li>\n  <li> It’s a personal (assigned to an identifiable person) IP address. </li>\n</ul>\n<p>There is a risk if you answered yes to any of these questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Don’t hard-code the IP address in the source code, instead make it configurable with environment variables, configuration files, or a similar\napproach. Alternatively, if confidentially is not required a domain name can be used since it allows to change the destination quickly without having\nto rebuild the software.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\nString ip = \"192.168.12.42\"; // Sensitive\nSocket socket = new Socket(ip, 6667);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString ip = System.getenv(\"IP_ADDRESS\"); // Compliant\nSocket socket = new Socket(ip, 6667);\n</pre>\n<h2>Exceptions</h2>\n<p>No issue is reported for the following cases because they are not considered sensitive:</p>\n<ul>\n  <li> Loopback addresses 127.0.0.0/8 in CIDR notation (from 127.0.0.0 to 127.255.255.255) </li>\n  <li> Broadcast address 255.255.255.255 </li>\n  <li> Non-routable address 0.0.0.0 </li>\n  <li> Strings of the form <code>2.5.&lt;number&gt;.&lt;number&gt;</code> as they <a href=\"http://www.oid-info.com/introduction.htm\">often match\n  Object Identifiers</a> (OID) </li>\n  <li> Addresses in the ranges 192.0.2.0/24, 198.51.100.0/24, 203.0.113.0/24, reserved for documentation purposes by <a\n  href=\"https://datatracker.ietf.org/doc/html/rfc5737\">RFC 5737</a> </li>\n  <li> Addresses in the range 2001:db8::/32, reserved for documentation purposes by <a href=\"https://datatracker.ietf.org/doc/html/rfc3849\">RFC\n  3849</a> </li>\n</ul>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">Top 10 2021 Category A1 - Broken Access Control</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/OjdGBQ\">CERT, MSC03-J.</a> - Never hard code sensitive information </li>\n</ul>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<h2>Recommended Secure Coding Practices</h2>\n<p>Don’t hard-code the IP address in the source code, instead make it configurable with environment variables, configuration files, or a similar\napproach. Alternatively, if confidentially is not required a domain name can be used since it allows to change the destination quickly without having\nto rebuild the software.</p>\n<h2>Compliant Solution</h2>\n<pre>\nString ip = System.getenv(\"IP_ADDRESS\"); // Compliant\nSocket socket = new Socket(ip, 6667);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">Top 10 2021 Category A1 - Broken Access Control</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/OjdGBQ\">CERT, MSC03-J.</a> - Never hard code sensitive information </li>\n</ul>"
                },
                {
                    "key": "assess_the_problem",
                    "content": "<h2>Ask Yourself Whether</h2>\n<p>The disclosed IP address is sensitive, e.g.:</p>\n<ul>\n  <li> Can give information to an attacker about the network topology. </li>\n  <li> It’s a personal (assigned to an identifiable person) IP address. </li>\n</ul>\n<p>There is a risk if you answered yes to any of these questions.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\nString ip = \"192.168.12.42\"; // Sensitive\nSocket socket = new Socket(ip, 6667);\n</pre>\n"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "impacts": []
        },
        {
            "key": "java:S1314",
            "repo": "java",
            "name": "Octal values should not be used",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1314"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/atYxBQ\">CERT, DCL18-C.</a> - Do not begin integer constants with 0 when specifying a decimal\n  value </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/7DZGBQ\">CERT, DCL50-J.</a> - Use visually distinct identifiers </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Integer literals starting with a zero are octal rather than decimal values. While using octal values is fully supported, most developers do not\nhave experience with them. They may not recognize octal values as such, mistaking them instead for decimal values.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nint myNumber = 010; // Noncompliant. myNumber will hold 8, not 10 - was this really expected?\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nint myNumber = 8;\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "BLOCKER"
                }
            ]
        },
        {
            "key": "java:S1315",
            "repo": "java",
            "name": "Track uses of \"CHECKSTYLE:OFF\" suppression comments",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "bad-practice"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1315"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>This rule allows you to track the use of the Checkstyle suppression comment mechanism.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n// CHECKSTYLE:OFF\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S1317",
            "repo": "java",
            "name": "\"StringBuilder\" and \"StringBuffer\" should not be instantiated with a character",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1317"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>When a developer uses the <code>StringBuilder</code> or <code>StringBuffer</code> constructor with a single character as an argument, the likely\nintention is to create an instance with the character as the initial string value.</p>\n<p>However, this is not what happens because of the absence of a dedicated <code>StringBuilder(char)</code> or <code>StringBuffer(char)</code>\nconstructor. Instead, <code>StringBuilder(int)</code> or <code>StringBuffer(int)</code> is invoked, which results in an instance with the provided\n<code>int</code> value as the initial capacity of the <code>StringBuilder</code> or <code>StringBuffer</code>.</p>\n<p>The reason behind this behavior lies in the automatic widening of <code>char</code> expressions to <code>int</code> when required. Consequently,\nthe UTF-16 code point value of the character (for example, <code>65</code> for the character <code>'A'</code>) is interpreted as an <code>int</code>\nto specify the initial capacity.</p>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>If the argument is a <code>char</code> literal, use a string literal instead:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nStringBuffer foo = new StringBuffer('x'); // Noncompliant, replace with String\n</pre>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nStringBuffer foo = new StringBuffer(\"x\"); // Compliant\n</pre>\n<p>If the argument is it is a non-literal <code>char</code> expression, convert it to <code>String</code> using the <code>String.valueOf()</code>\nmethod:</p>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nStringBuffer foo(char firstChar) {\n  return new StringBuffer(firstChar);                 // Noncompliant\n}\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nStringBuffer foo(char firstChar) {\n  return new StringBuffer(String.valueOf(firstChar)); // Compliant\n}\n</pre>"
                },
                {
                    "key": "introduction",
                    "content": "<p>This rule raises an issue when the <code>StringBuilder</code> or <code>StringBuffer</code> constructor is called with a single character as an\nargument.</p>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/specs/jls/se10/html/jls-5.html#jls-5.1.2\">Oracle - Java Language Specification, section 5.1.2. Widening\n  Primitive Conversion</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://www.w3schools.com/java/java_type_casting.asp\">W3schools - Java Type Casting</a> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S1319",
            "repo": "java",
            "name": "Declarations should use Java collection interfaces such as \"List\" rather than specific implementation classes such as \"LinkedList\"",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "bad-practice"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1319"
                ]
            },
            "descriptionSections": [
                {
                    "key": "introduction",
                    "content": "<p>This rule raises an issue when a collection implementation class from <code>java.util.*</code> is used:</p>\n<ul>\n  <li> as a return type of a <code>public</code> method. </li>\n  <li> as an argument type of a <code>public</code> method. </li>\n  <li> as the type of a <code>public</code> field. </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>The Java Collections API offers a well-structured hierarchy of interfaces designed to hide collection implementation details. For the various\ncollection data structures like lists, sets, and maps, specific interfaces (<code>java.util.List</code>, <code>java.util.Set</code>,\n<code>java.util.Map</code>) cover the essential features.</p>\n<p>When passing collections as method parameters, return values, or when exposing fields, it is generally recommended to use these interfaces instead\nof the implementing classes. The implementing classes, such as <code>java.util.LinkedList</code>, <code>java.util.ArrayList</code>, and\n<code>java.util.HasMap</code>, should only be used for collection instantiation. They provide finer control over the performance characteristics of\nthose structures, and developers choose them depending on their use case.</p>\n<p>For example, if fast random element access is essential, <code>java.util.ArrayList</code> should be instantiated. If inserting elements at a random\nposition into a list is crucial, a <code>java.util.LinkedList</code> should be preferred. However, this is an implementation detail your API should\nnot expose.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class Employees {\n  public final HashSet&lt;Employee&gt; employees   // Noncompliant, field type should be \"Set\"\n    = new HashSet&lt;Employee&gt;();\n\n  public HashSet&lt;Employee&gt; getEmployees() {  // Noncompliant, return type should be \"Set\"\n    return employees;\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class Employees {\n  public final Set&lt;Employee&gt; employees       // Compliant\n    = new HashSet&lt;Employee&gt;();\n\n  public Set&lt;Employee&gt; getEmployees() {      // Compliant\n    return employees;\n  }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S2647",
            "repo": "java",
            "name": "Basic authentication should not be used",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "DEPRECATED",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "VULNERABILITY",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2h",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2h",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2647"
                ]
            },
            "descriptionSections": [
                {
                    "key": "how_to_fix",
                    "content": "<p>The following code uses basic authentication to send out an HTTP request to a protected endpoint.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"101\" data-diff-type=\"noncompliant\">\nString encoded = Base64.getEncoder().encodeToString(\"login:passwd\".getBytes());\nHttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setRequestMethod(\"POST\");\nconn.setDoOutput(true);\nconn.setRequestProperty(\"Authorization\", \"Basic \" + encoded); // Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"101\" data-diff-type=\"compliant\">\n// An access token should be retrieved before the HTTP request\nString accessToken = System.getenv(\"ACCESS_TOKEN\");\nHttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setRequestMethod(\"POST\");\nconn.setDoOutput(true);\nconn.setRequestProperty(\"Authorization\", \"Bearer \" + accessToken);\n</pre>\n<h3>How does this work?</h3>\n<h4>Token-based authentication and OAuth</h4>\n<p>Token-based authentication is a safer alternative than basic authentication. A unique token is generated upon successful authentication and sent to\nthe client, which is then included in subsequent requests. Therefore, it eliminates the need to transmit sensitive credentials with each request.\nOAuth also works by authenticating users via tokens. It gives even more flexibility on top of this by offering scopes, which limit an application’s\naccess to a user’s account.</p>\n<p>Additionally, both token-based authentication and OAuth support mechanisms for token expiration, revocation, and refresh. This gives more\nflexibility than basic authentication, as compromised tokens carry much less risk than a compromised password.</p>\n<h4>SSL encryption for HTTP requests</h4>\n<p>With basic authentication, user credentials are transmitted in plain text, which makes them vulnerable to interception and eavesdropping. However,\nwhen HTTPS is employed, the data is encrypted before transmission, making it significantly more difficult for attackers to intercept and decipher the\ncredentials. If no other form of authentication is possible for this code, then every request must be sent over HTTPS to ensure credentials are kept\nsafe.</p>",
                    "context": {
                        "displayName": "Java SE",
                        "key": "java_se"
                    }
                },
                {
                    "key": "root_cause",
                    "content": "<p>Basic authentication is a simple and widely used method of user authentication for HTTP requests. When a client sends a request to a server that\nrequires authentication, the client includes the username and password (concatenated together and Base64 encoded) in the \"Authorization\" header of the\nHTTP request. The server verifies the credentials and grants access if they are valid. Every request sent to the server to a protected endpoint must\ninclude these credentials.</p>\n<p>Basic authentication is considered insecure for several reasons:</p>\n<ul>\n  <li> It transmits user credentials in plain text, making them susceptible to interception and eavesdropping. </li>\n  <li> It relies solely on the server’s ability to verify the provided credentials. There is no mechanism for additional security measures like\n  multi-factor authentication or account lockouts after multiple failed login attempts. </li>\n  <li> It does not provide a way to manage user sessions securely. The client typically includes the credentials in every request, which creates more\n  opportunities for an attacker to steal these credentials. </li>\n</ul>\n<p>These security limitations make basic authentication an insecure choice for authentication or authorization over HTTP.</p>\n<h3>What is the potential impact?</h3>\n<p>Basic authentication transmits passwords in plain text, which makes it vulnerable to interception by attackers.</p>\n<h4>Session hijacking and man-in-the-middle attack</h4>\n<p>If an attacker gains access to the network traffic, they can easily capture the username and password. Basic authentication does not provide any\nmechanism to protect against session hijacking attacks. Once a user is authenticated, the session identifier (the username and password) is sent in\nclear text with each subsequent request. If attackers can intercept one request, they can use it to impersonate the authenticated user, gaining\nunauthorized access to their account and potentially performing malicious actions.</p>\n<h4>Brute-force attacks</h4>\n<p>Basic authentication does not have any built-in protection against brute-force attacks. Attackers can repeatedly guess passwords until they find\nthe correct one, especially if weak or commonly used passwords are used. This can lead to unauthorized access to user accounts and potential data\nbreaches.</p>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> MDN web docs - <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication\">HTTP authentication</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A04_2021-Insecure_Design/\">Top 10 2021 Category A4 - Insecure Design</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Web_Service_Security_Cheat_Sheet.html#user-authentication\">OWASP Web Service Security\n  Cheat Sheet</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/522\">CWE-522 - Insufficiently Protected Credentials</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222533\">Application Security and\n  Development: V-222533</a> - The application must authenticate all network connected endpoint devices before establishing any connection. </li>\n</ul>"
                },
                {
                    "key": "introduction",
                    "content": "<p>This rule is deprecated, and will eventually be removed.</p>\n<p>Basic authentication is a vulnerable method of user authentication that should be avoided. It functions by transmitting a Base64 encoded username\nand password. As Base64 is easy to recognize and reverse, sensitive data may be leaked this way.</p>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>The following code uses basic authentication to send out an HTTP request to a protected endpoint.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport org.apache.http.client.methods.HttpPost;\n\nString encoded = Base64.getEncoder().encodeToString(\"login:passwd\".getBytes());\nHttpPost httpPost = new HttpPost(\"http://api.example.com/foo\");\nhttpPost.setHeader(\"Authorization\", \"Basic \" + encoded); // Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport org.apache.http.client.methods.HttpPost;\n\n// An access token should be retrieved before the HTTP request\nString accessToken = System.getenv(\"ACCESS_TOKEN\");\nHttpPost httpPost = new HttpPost(\"http://api.example.com/foo\");\nhttpPost.setHeader(\"Authorization\", \"Bearer \" + accessToken);\n</pre>\n<h3>How does this work?</h3>\n<h4>Token-based authentication and OAuth</h4>\n<p>Token-based authentication is a safer alternative than basic authentication. A unique token is generated upon successful authentication and sent to\nthe client, which is then included in subsequent requests. Therefore, it eliminates the need to transmit sensitive credentials with each request.\nOAuth also works by authenticating users via tokens. It gives even more flexibility on top of this by offering scopes, which limit an application’s\naccess to a user’s account.</p>\n<p>Additionally, both token-based authentication and OAuth support mechanisms for token expiration, revocation, and refresh. This gives more\nflexibility than basic authentication, as compromised tokens carry much less risk than a compromised password.</p>\n<h4>SSL encryption for HTTP requests</h4>\n<p>With basic authentication, user credentials are transmitted in plain text, which makes them vulnerable to interception and eavesdropping. However,\nwhen HTTPS is employed, the data is encrypted before transmission, making it significantly more difficult for attackers to intercept and decipher the\ncredentials. If no other form of authentication is possible for this code, then every request must be sent over HTTPS to ensure credentials are kept\nsafe.</p>",
                    "context": {
                        "displayName": "Apache HttpClient",
                        "key": "apache_httpclient"
                    }
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "TRUSTWORTHY",
            "cleanCodeAttributeCategory": "RESPONSIBLE",
            "impacts": [
                {
                    "softwareQuality": "SECURITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S2761",
            "repo": "java",
            "name": "Unary prefix operators should not be repeated",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2761"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>The repetition of a unary operator is usually a typo. The second operator invalidates the first one in most cases:</p>\n<pre>\nint i = 1;\n\nint j = - - -i;  // Noncompliant: equivalent to \"-i\"\nint k = ~~~i;    // Noncompliant: equivalent to \"~i\"\nint m = + +i;    // Noncompliant: equivalent to \"i\"\n\nboolean b = false;\nboolean c = !!!b;   // Noncompliant\n</pre>\n<p>On the other hand, while repeating the increment and decrement operators is technically correct, it obfuscates the meaning:</p>\n<pre>\nint i = 1;\nint j = ++ ++i;  // Noncompliant\nint k = i-- --; // Noncompliant\n</pre>\n<p>Using <code>+=</code> or <code>-=</code> improves readability:</p>\n<pre>\nint i = 1;\ni += 2;\nint j = i;\nint k = i;\ni -=2;\n</pre>\n<p>This rule raises an issue for repetitions of <code>!</code>, <code>~</code>, <code>-</code>, <code>+</code>, prefix increments <code>++</code> and\nprefix decrements <code>--</code>.</p>\n<h3>Exceptions</h3>\n<p>Overflow handling for GWT compilation using <code>~~</code> is ignored.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S2885",
            "repo": "java",
            "name": "Non-thread-safe fields should not be static",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "multi-threading"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2885"
                ]
            },
            "descriptionSections": [
                {
                    "key": "how_to_fix",
                    "content": "<p>Remove the <code>static</code> keyword from non-thread-safe fields.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class MyClass {\n  private static Calendar calendar = Calendar.getInstance();  // Noncompliant\n  private static SimpleDateFormat format = new SimpleDateFormat(\"HH-mm-ss\");  // Noncompliant\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class MyClass {\n  private Calendar calendar = Calendar.getInstance();\n  private SimpleDateFormat format = new SimpleDateFormat(\"HH-mm-ss\");\n}\n</pre>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>When an object is marked as <code>static</code>, it means that it belongs to the class rather than any class instance. This means there is only one\ncopy of the static object in memory, regardless of how many class instances are created. Static objects are shared among all instances of the class\nand can be accessed using the class name rather than an instance of the class.</p>\n<p>A data type is considered thread-safe if it can be used correctly by multiple threads, regardless of how those threads are executed, without\nrequiring additional coordination from the calling code. In other words, a thread-safe data type can be accessed and modified by multiple threads\nsimultaneously without causing any issues or requiring extra work from the programmer to ensure correct behavior.</p>\n<p>Non-thread-safe objects are objects that are not designed to be used in a multi-threaded environment and can lead to race conditions and data\ninconsistencies when accessed by multiple threads simultaneously. Using them in a multi-threaded manner is highly likely to cause data problems or\nexceptions at runtime.</p>\n<p>When a non-thread-safe object is marked as static in a multi-threaded environment, it can cause issues because the non-thread-safe object will be\nshared across different instances of the containing class.</p>\n<p>This rule raises an issue when any of the following instances and their subtypes are marked as <code>static</code>:</p>\n<ul>\n  <li> <code>java.util.Calendar</code>, </li>\n  <li> <code>java.text.DateFormat</code>, </li>\n  <li> <code>javax.xml.xpath.XPath</code>, or </li>\n  <li> <code>javax.xml.validation.SchemaFactory</code>. </li>\n</ul>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://web.mit.edu/6.005/www/fa14/classes/18-thread-safety/\">MIT - Thread safety</a> </li>\n  <li> <a href=\"https://www.baeldung.com/java-thread-safety\">Baeldung - Thread safety</a> </li>\n  <li> <a href=\"https://www.baeldung.com/java-static\">Baeldung - Static</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222567\">Application Security and\n  Development: V-222567</a> - The application must not be vulnerable to race conditions. </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S2886",
            "repo": "java",
            "name": "Getters and setters should be synchronized in pairs",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "multi-threading",
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2886"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>A synchronized method is a method marked with the <code>synchronized</code> keyword, meaning it can only be accessed by one thread at a time. If\nmultiple threads try to access the synchronized method simultaneously, they will be blocked until the method is available.</p>\n<p>Synchronized methods prevent race conditions and data inconsistencies in multi-threaded environments. Ensuring that only one thread can access a\nmethod at a time, prevents multiple threads from modifying the same data simultaneously, and causing conflicts.</p>\n<p>When one part of a getter/setter pair is <code>synchronized</code> the other should be too. Failure to synchronize both sides may result in\ninconsistent behavior at runtime as callers access an inconsistent method state.</p>\n<p>This rule raises an issue when either the method or the contents of one method in a getter/setter pair are synchronized, but the other is not.</p>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/tutorial/essential/concurrency/syncmeth.html\">Oracle Java - Synchronized Methods</a> </li>\n  <li> <a href=\"https://docs.oracle.com/javase/specs/jls/se20/html/jls-8.html#jls-8.4.3.6\">Oracle SE 20 - Synchronized Methods</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://web.mit.edu/6.005/www/fa14/classes/18-thread-safety/\">MIT - Thread safety</a> </li>\n  <li> <a href=\"https://www.baeldung.com/java-thread-safety\">Baeldung - Thread safety</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/4jdGBQ\">CERT, VNA01-J.</a> - Ensure visibility of shared references to immutable objects </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222567\">Application Security and\n  Development: V-222567</a> - The application must not be vulnerable to race conditions. </li>\n</ul>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>Synchronize both <code>get</code> and <code>set</code> methods by marking the method with the <code>synchronize</code> keyword or using a\n<code>synchronize</code> block inside them.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class Person {\n  String name;\n  int age;\n\n  public synchronized void setName(String name) {\n    this.name = name;\n  }\n\n  public String getName() {  // Noncompliant\n    return this.name;\n  }\n\n  public void setAge(int age) {  // Noncompliant\n    this.age = age;\n  }\n\n  public int getAge() {\n    synchronized (this) {\n      return this.age;\n    }\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class Person {\n  String name;\n  int age;\n\n  public synchronized void setName(String name) {\n    this.name = name;\n  }\n\n  public synchronized String getName() {\n    return this.name;\n  }\n\n  public void setAge(int age) {\n    synchronized (this) {\n      this.age = age;\n   }\n  }\n\n  public int getAge() {\n    synchronized (this) {\n      return this.age;\n    }\n  }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S3864",
            "repo": "java",
            "name": "\"Stream.peek\" should be used with caution",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "java8",
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S3864"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>According to its JavaDocs, the intermediate Stream operation <code>java.util.Stream.peek()</code> “exists mainly to support debugging”\npurposes.</p>\n<p>A key difference with other intermediate Stream operations is that the Stream implementation is free to skip calls to <code>peek()</code> for\noptimization purpose. This can lead to <code>peek()</code> being unexpectedly called only for some or none of the elements in the Stream.</p>\n<p>As a consequence, relying on <code>peek()</code> without careful consideration can lead to error-prone code.</p>\n<p>This rule raises an issue for each use of peek() to be sure that it is challenged and validated by the team to be meant for production\ndebugging/logging purposes.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nStream.of(\"one\", \"two\", \"three\", \"four\")\n         .filter(e -&gt; e.length() &gt; 3)\n         .peek(e -&gt; System.out.println(\"Filtered value: \" + e)); // Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nStream.of(\"one\", \"two\", \"three\", \"four\")\n         .filter(e -&gt; e.length() &gt; 3)\n         .foreach(e -&gt; System.out.println(\"Filtered value: \" + e));\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#peek-java.util.function.Consumer-\">Java 8 API Documentation</a>\n  </li>\n  <li> 4comprehension: <a href=\"https://4comprehension.com/idiomatic-peeking/\">Idiomatic Peeking with Java Stream API</a> </li>\n  <li> Data Geekery: <a href=\"https://blog.jooq.org/2014/06/13/java-8-friday-10-subtle-mistakes-when-using-the-streams-api/\">10 Subtle Mistakes When\n  Using the Streams API</a> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S3972",
            "repo": "java",
            "name": "Conditionals should start on new lines",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "suspicious"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S3972"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Placing an <code>if</code> statement on the same line as the closing <code>}</code> from a preceding <code>if</code>, <code>else</code>, or\n<code>else if</code> block can lead to confusion and potential errors. It may indicate a missing <code>else</code> statement or create ambiguity for\nmaintainers who might fail to understand that the two statements are unconnected.</p>\n<p>The following code snippet is confusing:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nif (condition1) {\n  // ...\n} if (condition2) {  // Noncompliant\n  //...\n}\n</pre>\n<p>Either the two conditions are unrelated and they should be visually separated:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nif (condition1) {\n  // ...\n}\n\nif (condition2) {\n  //...\n}\n</pre>\n<p>Or they were supposed to be exclusive and you should use <code>else if</code> instead:</p>\n<pre>\nif (condition1) {\n  // ...\n} else if (condition2) {\n  //...\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "FORMATTED",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S3973",
            "repo": "java",
            "name": "A conditionally executed single line should be denoted by indentation",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "confusing",
                "suspicious"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S3973"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>When the line immediately after a conditional has neither curly braces nor indentation, the intent of the code is unclear and perhaps not what is\nexecuted. Additionally, such code is confusing to maintainers.</p>\n<pre>\nif (condition)  // Noncompliant\ndoTheThing();\ndoTheOtherThing(); // Was the intent to call this function unconditionally?\n</pre>\n<p>It becomes even more confusing and bug-prone if lines get commented out.</p>\n<pre>\nif (condition)  // Noncompliant\n//  doTheThing();\ndoTheOtherThing(); // Was the intent to call this function conditionally?\n</pre>\n<p>Indentation alone or together with curly braces makes the intent clear.</p>\n<pre>\nif (condition)\n  doTheThing();\ndoTheOtherThing(); // Clear intent to call this function unconditionally\n\n// or\n\nif (condition) {\n  doTheThing();\n}\ndoTheOtherThing(); // Clear intent to call this function unconditionally\n</pre>\n<p>This rule raises an issue if the line controlled by a conditional has the same indentation as the conditional and is not enclosed in curly\nbraces.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "FORMATTED",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S3985",
            "repo": "java",
            "name": "Unused \"private\" classes should be removed",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "unused"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S3985"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p><code>private</code> classes that are never used are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code\ndecreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.</p>\n\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class TopLevel\n{\n  private class Nested {...} // Noncompliant: Nested is never used\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class TopLevel\n{\n  void doSomething() {\n    Nested a = new Nested();\n    ...\n  }\n  private class Nested {...}\n}\n</pre>"
                },
                {
                    "key": "introduction",
                    "content": "<p>This rule raises an issue when a private nested class is never used.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S5826",
            "repo": "java",
            "name": "Methods setUp() and tearDown() should be correctly annotated starting with JUnit4",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "junit",
                "tests"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "TEST",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5826"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>The <code>setUp()</code> and <code>tearDown()</code> methods (initially introduced with JUnit3 to execute a block of code before and after each\ntest) need to be correctly annotated with the equivalent annotation in order to preserve the same behavior when migrating from JUnit3 to JUnit4 or\nJUnit5.</p>\n<p>This rule consequently raise issues on <code>setUp()</code> and <code>tearDown()</code> methods which are not annotated in test classes.</p>\n<h3>Noncompliant code example</h3>\n<ul>\n  <li> JUnit4: </li>\n</ul>\n<pre>\npublic void setUp() { ... } // Noncompliant; should be annotated with @Before\npublic void tearDown() { ... }  // Noncompliant; should be annotated with @After\n</pre>\n<ul>\n  <li> JUnit5: </li>\n</ul>\n<pre>\npublic void setUp() { ... } // Noncompliant; should be annotated with @BeforeEach\npublic void tearDown() { ... }  // Noncompliant; should be annotated with @AfterEach\n</pre>\n<h3>Compliant solution</h3>\n<ul>\n  <li> JUnit4: </li>\n</ul>\n<pre>\n@Before\npublic void setUp() { ... }\n\n@After\npublic void tearDown() { ... }\n</pre>\n<ul>\n  <li> JUnit5: </li>\n</ul>\n<pre>\n@BeforeEach\nvoid setUp() { ... }\n\n@AfterEach\nvoid tearDown() { ... }\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S5917",
            "repo": "java",
            "name": "DateTimeFormatters should not use mismatched year and week numbers",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5917"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>When creating a <code>DateTimeFormatter</code> using the <code>WeekFields.weekBasedYear()</code> temporal field, the resulting year number may be\noff by 1 at the beginning of a new year (when the date to format is in a week that is shared by two consecutive years).</p>\n<p>Using this year number in combination with an incompatible week temporal field yields a result that may be confused with the first week of the\nprevious year.</p>\n<p>Instead, when paired with a week temporal field, the week-based year should only be used with the week of week-based year temporal field\n<code>WeekFields.weekOfWeekBasedYear()</code>.</p>\n<p>Alternatively the temporal field <code>ChronoField.ALIGNED_WEEK_OF_YEAR</code> can be used together with a regular year (but not the week based\nyear).</p>\n<h3>Noncompliant code example</h3>\n<pre>\nnew DateTimeFormatterBuilder()\n      .appendValue(ChronoField.YEAR, 4) // Noncompliant: using week of week-based year with regular year\n      .appendLiteral('-')\n      .appendValue(WeekFields.ISO.weekOfWeekBasedYear(), 2)\n      .toFormatter();\n\nnew DateTimeFormatterBuilder()\n      .appendValue(ChronoField.YEAR_OF_ERA, 4) // Noncompliant: using week of week-based year with regular year\n      .appendLiteral('-')\n      .appendValue(WeekFields.ISO.weekOfWeekBasedYear(), 2)\n      .toFormatter();\n\nnew DateTimeFormatterBuilder()\n      .appendValue(WeekFields.ISO.weekBasedYear(), 4) // Noncompliant: using aligned week of year with week-based year\n      .appendLiteral('-')\n      .appendValue(ChronoField.ALIGNED_WEEK_OF_YEAR, 2)\n      .toFormatter();\n</pre>\n<p>Here the first two formatters would wrongly format the 1st of January 2016 as \"2016-53\" while the last one would format it as \"2015-01\"</p>\n<h3>Compliant solution</h3>\n<pre>\nnew DateTimeFormatterBuilder()\n      .appendValue(WeekFields.ISO.weekBasedYear(), 4)\n      .appendLiteral('-')\n      .appendValue(WeekFields.ISO.weekOfWeekBasedYear(), 2)\n      .toFormatter();\n\nnew DateTimeFormatterBuilder()\n      .appendValue(ChronoField.YEAR, 4)\n      .appendLiteral('-')\n      .appendValue(ChronoField.ALIGNED_WEEK_OF_YEAR, 2)\n      .toFormatter();\n\nnew DateTimeFormatterBuilder()\n      .appendValue(ChronoField.YEAR_OF_ERA, 4)\n      .appendLiteral('-')\n      .appendValue(ChronoField.ALIGNED_WEEK_OF_YEAR, 2)\n      .toFormatter();\n</pre>\n<p>Here the first formatter would format the 1st of January 2016 as \"2015-53\" while the last two would produce \"2016-01\", both of which are correct\ndepending on how you count the weeks.</p>\n<h3>Exceptions</h3>\n<p>No issue is raised when week-based year is not used in combination with a week temporal field.</p>\n<p>Similarly, no issue is raised if week of week-based year is not used in combination with a year temporal field.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S1200",
            "repo": "java",
            "name": "Classes should not be coupled to too many other classes",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "brain-overload"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "max",
                    "htmlDesc": "Maximum number of classes a single class is allowed to depend upon",
                    "defaultValue": "20",
                    "type": "INTEGER"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2h",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2h",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1200"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>According to the Single Responsibility Principle, introduced by Robert C. Martin in his book \"Principles of Object Oriented Design\", a class should\nhave only one responsibility:</p>\n<blockquote>\n  <p>If a class has more than one responsibility, then the responsibilities become coupled.</p>\n  <p>Changes to one responsibility may impair or inhibit the class' ability to meet the others.</p>\n  <p>This kind of coupling leads to fragile designs that break in unexpected ways when changed.</p>\n</blockquote>\n<p>Classes which rely on many other classes tend to aggregate too many responsibilities and should be split into several smaller ones.</p>\n<p>Nested classes dependencies are not counted as dependencies of the outer class.</p>\n<h3>Noncompliant code example</h3>\n<p>With a threshold of 5:</p>\n<pre>\nclass Foo {                        // Noncompliant - Foo depends on too many classes: T1, T2, T3, T4, T5, T6 and T7\n  T1 a1;                           // Foo is coupled to T1\n  T2 a2;                           // Foo is coupled to T2\n  T3 a3;                           // Foo is coupled to T3\n\n  public T4 compute(T5 a, T6 b) {  // Foo is coupled to T4, T5 and T6\n    T7 result = a.getResult(b);    // Foo is coupled to T7\n    return result;\n  }\n\n  public static class Bar {        // Compliant - Bar depends on 2 classes: T8 and T9\n    T8 a8;\n    T9 a9;\n  }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "FOCUSED",
            "cleanCodeAttributeCategory": "ADAPTABLE",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S1201",
            "repo": "java",
            "name": "\"equals\" method overrides should accept \"Object\" parameters",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "suspicious"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1201"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>In Java, the <code>Object.equals()</code> method is used for object comparison, and it is typically overridden in classes to provide a custom\nequality check based on your criteria for equality.</p>\n<p>The default implementation of <code>equals()</code> provided by the <code>Object</code> class compares the memory references of the two objects,\nthat means it checks if the objects are actually the same instance in memory.</p>\n<p>The \"equals\" as a method name should be used exclusively to override <code>Object.equals(Object)</code> to prevent confusion.</p>\n<p>It is important to note that when you override <code>equals()</code>, you should also override the <code>hashCode()</code> method to maintain the\ncontract between <code>equals()</code> and <code>hashCode()</code>.</p>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\">Oracle SDK -\n  Object.equals(Object)</a> </li>\n</ul>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>Either override <code>Object.equals(Object)</code> or rename the method.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass MyClass {\n  private int foo = 1;\n\n  public boolean equals(MyClass o) {  // Noncompliant; does not override Object.equals(Object)\n    return o != null &amp;&amp; o.foo == this.foo;\n  }\n\n  public static void main(String[] args) {\n    MyClass o1 = new MyClass();\n    Object o2 = new MyClass();\n    System.out.println(o1.equals(o2));  // Prints \"false\" because o2 an Object not a MyClass\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass MyClass {\n  private int foo = 1;\n\n  @Override\n  public boolean equals(Object o) {  // Compliant\n    if (this == o) {\n        return true;\n    }\n\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n\n    MyClass other = (MyClass)o;\n    return this.foo == other.foo;\n  }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S1206",
            "repo": "java",
            "name": "\"equals(Object obj)\" and \"hashCode()\" should be overridden in pairs",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1206"
                ]
            },
            "descriptionSections": [
                {
                    "key": "how_to_fix",
                    "content": "<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass MyClass {    // Noncompliant - should also override \"hashCode()\"\n\n  @Override\n  public boolean equals(Object obj) {\n    /* ... */\n  }\n\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass MyClass {    // Compliant\n\n  @Override\n  public boolean equals(Object obj) {\n    /* ... */\n  }\n\n  @Override\n  public int hashCode() {\n    /* ... */\n  }\n\n}\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/581\">CWE-581 - Object Model Violation: Just One of Equals and Hashcode Defined</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/7DVGBQ\">CERT, MET09-J.</a> - Classes that define an equals() method must also define a\n  hashCode() method </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>According to the Java Language Specification, there is a contract between <code>equals(Object)</code> and <code>hashCode()</code>:</p>\n<blockquote>\n  <p>If two objects are equal according to the <code>equals(Object)</code> method, then calling the <code>hashCode</code> method on each of the two\n  objects must produce the same integer result.</p>\n  <p>It is not required that if two objects are unequal according to the <code>equals(java.lang.Object)</code> method, then calling the\n  <code>hashCode</code> method on each of the two objects must produce distinct integer results.</p>\n  <p>However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of\n  hashtables.</p>\n</blockquote>\n<p>In order to comply with this contract, those methods should be either both inherited, or both overridden.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "COMPLETE",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S1444",
            "repo": "java",
            "name": "\"public static\" fields should be constant",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1444"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>There is no good reason to declare a field \"public\" and \"static\" without also declaring it \"final\". Most of the time this is a kludge to share a\nstate among several objects. But with this approach, any object can do whatever it wants with the shared state, such as setting it to\n<code>null</code>.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class Greeter {\n  public static Foo foo = new Foo();\n  ...\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic class Greeter {\n  public static final Foo FOO = new Foo();\n  ...\n}\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/500\">CWE-500 - Public Static Field Not Marked Final</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/WjdGBQ\">CERT OBJ10-J.</a> - Do not use public static nonfinal fields </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "MODULAR",
            "cleanCodeAttributeCategory": "ADAPTABLE",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S1448",
            "repo": "java",
            "name": "Classes should not have too many methods",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "brain-overload"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "countNonpublicMethods",
                    "htmlDesc": "Whether or not to include non-public methods in the count.",
                    "defaultValue": "true",
                    "type": "BOOLEAN"
                },
                {
                    "key": "maximumMethodThreshold",
                    "htmlDesc": "The maximum number of methods authorized in a class.",
                    "defaultValue": "35",
                    "type": "INTEGER"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "1h",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "1h",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1448"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.\nAbove a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "FOCUSED",
            "cleanCodeAttributeCategory": "ADAPTABLE",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S1449",
            "repo": "java",
            "name": "String operations should not rely on the default system locale",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "unpredictable",
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1449"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Failure to specify a locale when calling the methods <code>toLowerCase()</code>, <code>toUpperCase()</code> or <code>format()</code> on\n<code>String</code> objects means the system default encoding will be used, possibly creating problems with international characters or number\nrepresentations. For instance with the Turkish language, when converting the small letter 'i' to upper case, the result is capital letter 'I' with a\ndot over it.</p>\n<p>Case conversion without a locale may work fine in its \"home\" environment, but break in ways that are extremely difficult to diagnose for customers\nwho use different encodings. Such bugs can be nearly, if not completely, impossible to reproduce when it’s time to fix them. For locale-sensitive\nstrings, the correct locale should always be used, but <code>Locale.ROOT</code> can be used for case-insensitive ones.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nmyString.toLowerCase()\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nmyString.toLowerCase(Locale.TR)\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/4zdGBQ\">CERT, STR02-J.</a> - Specify an appropriate locale when comparing locale-dependent data\n  </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "COMPLETE",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S2658",
            "repo": "java",
            "name": "Classes should not be loaded dynamically",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "DEPRECATED",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "VULNERABILITY",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "45min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "45min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2658"
                ]
            },
            "descriptionSections": [
                {
                    "key": "introduction",
                    "content": "<p>This rule is deprecated; use <a href='/coding_rules#rule_key=javasecurity%3AS6173'>S6173</a> instead.</p>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Dynamically loaded classes could contain malicious code executed by a static class initializer. I.E. you wouldn’t even have to instantiate or\nexplicitly invoke methods on such classes to be vulnerable to an attack.</p>\n<p>This rule raises an issue for each use of dynamic class loading.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nString className = System.getProperty(\"messageClassName\");\nClass clazz = Class.forName(className);  // Noncompliant\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/470\">CWE-470 - Use of Externally-Controlled Input to Select Classes or Code ('Unsafe\n  Reflection')</a> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "SECURITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S3626",
            "repo": "java",
            "name": "Jump statements should not be redundant",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "redundant",
                "clumsy"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "1min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "1min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S3626"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Jump statements such as <code>return</code> and <code>continue</code> let you change the default flow of program execution, but jump statements\nthat direct the control flow to the original direction are just a waste of keystrokes.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic void foo() {\n  while (condition1) {\n    if (condition2) {\n      continue; // Noncompliant\n    } else {\n      doTheThing();\n    }\n  }\n  return; // Noncompliant; this is a void method\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic void foo() {\n  while (condition1) {\n    if (!condition2) {\n      doTheThing();\n    }\n  }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S3740",
            "repo": "java",
            "name": "Raw types should not be used",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S3740"
                ]
            },
            "descriptionSections": [
                {
                    "key": "how_to_fix",
                    "content": "<p>For any usage of parameterized types, bind the type parameters with type arguments. For example, when a function returns a list of strings, the\nreturn type is <code>List&lt;String&gt;</code>, where the type parameter <code>E</code> in interface <code>List&lt;E&gt;</code> is bound with the\nargument <code>String</code>.</p>\n<p>If the concrete binding is unknown, you still should not use the type raw. Use a wildcard type argument instead, with optional lower or upper\nbound, such as in <code>List&lt;?&gt;</code> for a list whose element type is unknown, or <code>List&lt;? extends Number&gt;</code> for a list whose\nelement type is <code>Number</code> or a subtype of it.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n// List is supposed to store integers only\nList integers = new ArrayList&lt;&gt;();\n\n// Yet, we can add strings, because we did not give\n// this information to the compiler\nintegers.add(\"Hello World!\");\n\n// Type is checked during runtime and will throw a ClassCastException\nInteger a = (Integer) integers.get(0);\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n// List is supposed to store integers, and we let the compiler know\nList&lt;Integer&gt; integers = new ArrayList&lt;&gt;();\n\n// Now we can add only integers.\n// Adding a string results in a compile time error.\nintegers.add(42);\n\n// No cast required anymore, and no possible ClassCastException\nInteger a = integers.get(0);\n</pre>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nString getStringFromForcedList(Object object) {\n  // Cast expression and instanceof can check runtime type only.\n  // The solution is _not_ to skip the type argument in that case.\n  return object instanceof List stringList ? (String) stringList.getFirst(): \"\";\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nString getStringFromForcedList(Object object) {\n  // The solution is to use a wildcard type argument in that case.\n  return object instanceof List&lt;?&gt; stringList ? (String) stringList.getFirst(): \"\";\n}\n</pre>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"3\" data-diff-type=\"noncompliant\">\nString getStringFromForcedList(Object object) {\n  return object instanceof List stringList ? (String) stringList.getFirst(): \"\";\n}\n\nString returnString() {\n  Object object = List.of(\"Hello\");\n  return getStringFromForcedList(object);\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"3\" data-diff-type=\"compliant\">\nObject getObjectFromForcedList(Object object) {\n  // You may also choose not to make assumptions about type arguments you cannot infer.\n  return object instanceof List&lt;?&gt; list ? list.getFirst(): \"\";\n}\n\nString returnString(Object object) {\n  // Instead, delegate the decision to use-site, which may have more information.\n  Object object = List.of(\"Hello\");\n  return (String) getObjectFromForcedList(object);\n}\n</pre>"
                },
                {
                    "key": "introduction",
                    "content": "<p>Generic types should not be used raw (without type arguments). To fix this issue, add the type parameters.</p>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>A generic type is a generic class or interface that is parameterized over types. For example, <code>java.util.List</code> has one type parameter:\nthe type of its elements.</p>\n<p>Using generic types raw (without binding arguments to the type parameters) prevents compile-time type checking for expressions that use these type\nparameters. Explicit type casts are necessary for them, which do perform a runtime type check that may fail with a\n<code>ClassCastException</code>.</p>\n<h3>What is the potential impact?</h3>\n<p>The compiler cannot assert that the program is inherently type safe. When a cast fails, a <code>ClassCastException</code> is thrown during runtime\nand the program most likely crashes. Therefore, this issue might impact the availability and reliability of your application.</p>\n<h3>Exceptions</h3>\n<p>The rule does not raise an issue for the simple <code>instanceof</code> operator, which checks against runtime types where type parameter\ninformation has been erased. Since it does not return a rawly typed instance but a boolean value, it does not prevent compile-time type checking.</p>\n<p>This, however, is not the case for the <code>cast</code> operator as well as the extended <code>instanceof</code> operator which are both not an\nexception from this rule. Since they operate on the erased runtime type as well, they must use wildcard type arguments when checked against a\nparameterized type (see the examples).</p>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/tutorial/java/generics/rawTypes.html\">Raw types</a> in the Java Tutorial. </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "COMPLETE",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S3749",
            "repo": "java",
            "name": "Members of Spring components should be injected",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "spring"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "customInjectionAnnotations",
                    "htmlDesc": "comma-separated list of FQDN annotation names to consider as valid",
                    "type": "STRING"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S3749"
                ]
            },
            "descriptionSections": [
                {
                    "key": "how_to_fix",
                    "content": "<p>Add one of these annotations to all non-<code>static</code> members: <code>@Resource</code>, <code>@Inject</code>, <code>@Autowired</code> or\n<code>@Value</code>.</p>\n\n<h4>Noncompliant code example</h4>\n<pre>\n@Controller\npublic class HelloWorld {\n\n  private String name = null;\n\n  @RequestMapping(\"/greet\", method = GET)\n  public String greet(String greetee) {\n\n    if (greetee != null) {\n      this.name = greetee;\n    }\n\n    return \"Hello \" + this.name;  // if greetee is null, you see the previous user's data\n  }\n}\n</pre>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Spring <code>@Component</code>, <code>@Controller</code>, <code>@RestController</code>,<code>@Service</code>, and <code>@Repository</code> classes\nare singletons by default, meaning only one instance of the class is ever instantiated in the application. Typically such a class might have a few\n<code>static</code> members, such as a logger, but all non-<code>static</code> members should be managed by Spring.</p>\n<p>This rule raises an issue when a singleton <code>@Component</code>, <code>@Controller</code>, <code>@RestController</code>, <code>@Service</code>,\nor <code>@Repository</code>, not annotated with <code>@ConfigurationProperties</code>, has non-<code>static</code> members that are not annotated with\none of:</p>\n<ul>\n  <li> <code>org.springframework.beans.factory.annotation.Autowired</code> </li>\n  <li> <code>org.springframework.beans.factory.annotation.Value</code> </li>\n  <li> <code>javax.annotation.Inject</code> </li>\n  <li> <code>javax.annotation.Resource</code> </li>\n  <li> <code>javax.persistence.PersistenceContext</code> </li>\n  <li> <code>jakarta.annotation.Resource</code> </li>\n  <li> <code>jakarta.inject.Inject</code> </li>\n  <li> <code>jakarta.persistence.PersistenceContext</code> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S3981",
            "repo": "java",
            "name": "Collection sizes and array length comparisons should make sense",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "confusing"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S3981"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>The size of a collection and the length of an array are always greater than or equal to zero. Testing it doesn’t make sense, since the result is\nalways <code>true</code>.</p>\n<pre>\nif (myList.size() &gt;= 0) {...} // Noncompliant: always true\n\nboolean result = myArray.length &gt;= 0; // Noncompliant: true\n</pre>\n<p>Similarly testing that it is less than zero will always return <code>false</code>.</p>\n<pre>\nif (myList.size() &lt; 0) {...} // Noncompliant: always false\n</pre>\n<p>Fix the code to properly check for emptiness if it was the intent, or remove the redundant code to keep the current behavior.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S3984",
            "repo": "java",
            "name": "Exceptions should not be created without being thrown",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "error-handling"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S3984"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Creating a new <code>Throwable</code> without actually throwing it is useless and is probably due to a mistake.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nif (x &lt; 0)\n  new IllegalArgumentException(\"x must be nonnegative\");\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nif (x &lt; 0)\n  throw new IllegalArgumentException(\"x must be nonnegative\");\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S3986",
            "repo": "java",
            "name": "Week Year (\"YYYY\") should not be used for date formatting",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "suspicious"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S3986"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Few developers are aware of the difference between <code>Y</code> for \"Week year\" and <code>y</code> for Year when formatting and parsing a date\nwith <code>SimpleDateFormat</code> or <code>DateTimeFormatter</code>. That’s likely because for most dates, Week year and Year are the same, so\ntesting at any time other than the first or last week of the year will yield the same value for both <code>y</code> and <code>Y</code>. But in the\nlast week of December and the first week of January, you may get unexpected results.</p>\n<p>According to the <a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/GregorianCalendar.html#week_year\">Javadoc</a>:</p>\n<blockquote>\n  <p>A week year is in sync with a WEEK_OF_YEAR cycle. All weeks between the first and last weeks (inclusive) have the same week year value.\n  Therefore, the first and last days of a week year may have different calendar year values.</p>\n  <p>For example, January 1, 1998 is a Thursday. If getFirstDayOfWeek() is MONDAY and getMinimalDaysInFirstWeek() is 4 (ISO 8601 standard compatible\n  setting), then week 1 of 1998 starts on December 29, 1997, and ends on January 4, 1998. The week year is 1998 for the last three days of calendar\n  year 1997. If, however, getFirstDayOfWeek() is SUNDAY, then week 1 of 1998 starts on January 4, 1998, and ends on January 10, 1998; the first three\n  days of 1998 then are part of week 53 of 1997 and their week year is 1997.</p>\n</blockquote>\n<h3>Noncompliant code example</h3>\n<pre>\nDate date = new SimpleDateFormat(\"yyyy/MM/dd\").parse(\"2015/12/31\");\nString result = new SimpleDateFormat(\"YYYY/MM/dd\").format(date);   //Noncompliant; yields '2016/12/31'\nresult = DateTimeFormatter.ofPattern(\"YYYY/MM/dd\").format(date); //Noncompliant; yields '2016/12/31'\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nDate date = new SimpleDateFormat(\"yyyy/MM/dd\").parse(\"2015/12/31\");\nString result = new SimpleDateFormat(\"yyyy/MM/dd\").format(date);   //Yields '2015/12/31' as expected\nresult = DateTimeFormatter.ofPattern(\"yyyy/MM/dd\").format(date); //Yields '2015/12/31' as expected\n</pre>\n<h3>Exceptions</h3>\n<pre>\nDate date = new SimpleDateFormat(\"yyyy/MM/dd\").parse(\"2015/12/31\");\nString result = new SimpleDateFormat(\"YYYY-ww\").format(date);  //compliant, 'Week year' is used along with 'Week of year'. result = '2016-01'\nDateTimeFormatter.ofPattern(\"YYYY-ww\").format(date); //compliant; yields '2016-01' as expected\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S4719",
            "repo": "java",
            "name": "\"StandardCharsets\" constants should be preferred",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "java7",
                "clumsy"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "1min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "1min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S4719"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>JDK7 introduced the class <code>java.nio.charset.StandardCharsets</code>. It provides constants for all charsets that are guaranteed to be\navailable on every implementation of the Java platform.</p>\n<ul>\n  <li> ISO_8859_1 </li>\n  <li> US_ASCII </li>\n  <li> UTF_16 </li>\n  <li> UTF_16BE </li>\n  <li> UTF_16LE </li>\n  <li> UTF_8 </li>\n</ul>\n<p>These constants should be preferred to:</p>\n<ul>\n  <li> the use of a String such as \"UTF-8\" which has the drawback of requiring the <code>catch</code>/<code>throw</code> of an\n  <code>UnsupportedEncodingException</code> that will never actually happen </li>\n  <li> the use of Guava’s <code>Charsets</code> class, which has been obsolete since JDK7 </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<pre>\ntry {\n  byte[] bytes = string.getBytes(\"UTF-8\"); // Noncompliant; use a String instead of StandardCharsets.UTF_8\n} catch (UnsupportedEncodingException e) {\n  throw new AssertionError(e);\n}\n// ...\nbyte[] bytes = string.getBytes(Charsets.UTF_8); // Noncompliant; Guava way obsolete since JDK7\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nbyte[] bytes = string.getBytes(StandardCharsets.UTF_8)\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S4830",
            "repo": "java",
            "name": "Server certificates should be verified during SSL/TLS connections",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "privacy",
                "cert",
                "ssl"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "VULNERABILITY",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S4830"
                ]
            },
            "descriptionSections": [
                {
                    "key": "introduction",
                    "content": "<p>This vulnerability makes it possible that an encrypted communication is intercepted.</p>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Transport Layer Security (TLS) provides secure communication between systems over the internet by encrypting the data sent between them.\nCertificate validation adds an extra layer of trust and security to this process to ensure that a system is indeed the one it claims to be.</p>\n<p>When certificate validation is disabled, the client skips a critical security check. This creates an opportunity for attackers to pose as a trusted\nentity and intercept, manipulate, or steal the data being transmitted.</p>\n<h3>What is the potential impact?</h3>\n<p>Establishing trust in a secure way is a non-trivial task. When you disable certificate validation, you are removing a key mechanism designed to\nbuild this trust in internet communication, opening your system up to a number of potential threats.</p>\n<h4>Identity spoofing</h4>\n<p>If a system does not validate certificates, it cannot confirm the identity of the other party involved in the communication. An attacker can\nexploit this by creating a fake server and masquerading as a legitimate one. For example, they might set up a server that looks like your bank’s\nserver, tricking your system into thinking it is communicating with the bank. This scenario, called identity spoofing, allows the attacker to collect\nany data your system sends to them, potentially leading to significant data breaches.</p>\n<h4>Loss of data integrity</h4>\n<p>When TLS certificate validation is disabled, the integrity of the data you send and receive cannot be guaranteed. An attacker could modify the data\nin transit, and you would have no way of knowing. This could range from subtle manipulations of the data you receive to the injection of malicious\ncode or malware into your system. The consequences of such breaches of data integrity can be severe, depending on the nature of the data and the\nsystem.</p>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>The following code contains examples of disabled certificate validation.</p>\n<p>The certificate validation gets disabled by overriding <code>X509TrustManager</code> with an empty implementation. It is highly recommended to use\nthe original implementation.</p>\n<h4>Noncompliant code example</h4>\n<pre>\nclass TrustAllManager implements X509TrustManager {\n\n    @Override\n    public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {  // Noncompliant\n    }\n\n    @Override\n    public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException { // Noncompliant\n    }\n\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return null;\n    }\n}\n</pre>\n<h3>How does this work?</h3>\n<p>Addressing the vulnerability of disabled TLS certificate validation primarily involves re-enabling the default validation.</p>\n<p>To avoid running into problems with invalid certificates, consider the following sections.</p>\n<h4>Using trusted certificates</h4>\n<p>If possible, always use a certificate issued by a well-known, trusted CA for your server. Most programming environments come with a predefined list\nof trusted root CAs, and certificates issued by these authorities are validated automatically. This is the best practice, and it requires no\nadditional code or configuration.</p>\n<h4>Working with self-signed certificates or non-standard CAs</h4>\n<p>In some cases, you might need to work with a server using a self-signed certificate, or a certificate issued by a CA not included in your trusted\nroots. Rather than disabling certificate validation in your code, you can add the necessary certificates to your trust store.</p>\n<p>Here is a sample command to import a certificate to the Java trust store:</p>\n<pre>\nkeytool -import -alias myserver -file myserver.crt -keystore cacerts\n</pre>",
                    "context": {
                        "displayName": "Java Cryptography Extension",
                        "key": "java_cryptography_extension"
                    }
                },
                {
                    "key": "resources",
                    "content": "<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">Top 10 2021 Category A2 - Cryptographic Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">Top 10 2021 Category A5 - Security Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\">Top 10 2021 Category A7 - Identification and\n  Authentication Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2016-risks/m3-insecure-communication\">Mobile Top 10 2016 Category M3 - Insecure\n  Communication</a> </li>\n  <li> OWASP - <a href=\"https://mas.owasp.org/checklists/MASVS-NETWORK/\">Mobile AppSec Verification Standard - Network Communication Requirements</a>\n  </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/295\">CWE-295 - Improper Certificate Validation</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222550\">Application Security and\n  Development: V-222550</a> - The application must validate certificates by constructing a certification path to an accepted trust anchor. </li>\n  <li> <a\n  href=\"https://wiki.sei.cmu.edu/confluence/display/java/MSC61-J.+Do+not+use+insecure+or+weak+cryptographic+algorithms\">https://wiki.sei.cmu.edu/confluence/display/java/MSC61-J.+Do+not+use+insecure+or+weak+cryptographic+algorithms</a> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "TRUSTWORTHY",
            "cleanCodeAttributeCategory": "RESPONSIBLE",
            "impacts": [
                {
                    "softwareQuality": "SECURITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S4838",
            "repo": "java",
            "name": "An iteration on a Collection should be performed on the type handled by the Collection",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "bad-practice",
                "clumsy"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "1min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "1min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S4838"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>When iterating over an <code>Iterable</code> with a <code>for</code> loop, the iteration variable could have the same type as the type returned by\nthe iterator (the item type of the <code>Iterable</code>). This rule reports when a supertype of the item type is used for the variable instead, but\nthe variable is then explicitly downcast in the loop body.</p>\n<p>Using explicit type casts instead of leveraging the language’s type system is a bad practice. It disables static type checking by the compiler for\nthe cast expressions, but potential errors will throw a <code>ClassCastException</code> during runtime instead.</p>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<h4>Noncompliant code example</h4>\n<p>When declaring the iteration variable, use the item type for it instead of a supertype. Remove the explicit downcasts in the loop body.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfor (Object item : getPersons()) { // Noncompliant, iteration element is implicitly upcast here\n  Person person = (Person) item; // Noncompliant, item is explicitly downcast here\n  person.getAddress();\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfor (Person person : getPersons()) { // Compliant\n  person.getAddress();\n}\n</pre>\n<h4>Noncompliant code example</h4>\n<p>Alternatively, use the <code>var</code> keyword to automatically infer the variable type (since Java 10).</p>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nfor (Object item : getPersons()) { // Noncompliant, iteration element is implicitly upcast here\n  Person person = (Person) item; // Noncompliant, item is explicitly downcast here\n  person.getAddress();\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nfor (var person : getPersons()) { // Compliant\n  person.getAddress();\n}\n</pre>\n<h4>Compliant solution</h4>\n<p>The implicit upcast in the loop header is not reported when there is no downcast in the loop body.</p>\n<pre>\nfor (Object item : getPersons()) { // Compliant\n  System.out.println(item);\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S5803",
            "repo": "java",
            "name": "Class members annotated with \"@VisibleForTesting\" should not be accessed from production code",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5803"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>@VisibleForTesting can be used to mark methods, fields and classes whose visibility restrictions have been relaxed more than necessary for the API\nto allow for easier unit testing.</p>\n<p>Access to such methods, fields and classes only possible thanks to this relaxed visibility is fine for test code, but it should be avoided in\nproduction code. In production code these methods should be treated as if they are private.</p>\n<p>Supported framework:</p>\n<ul>\n  <li> Guava: <code>com.google.common.annotations.VisibleForTesting</code> </li>\n  <li> AssertJ: <code>org.assertj.core.util.VisibleForTesting</code> </li>\n  <li> Android: <code>androidx.annotation.VisibleForTesting</code> </li>\n  <li> Apache Flink: <code>org.apache.flink.annotation.VisibleForTesting</code> </li>\n</ul>\n<p>or any other annotation named <code>VisibleForTesting</code></p>\n<h3>Noncompliant code example</h3>\n<pre>\n/** src/main/java/MyObject.java */\n\n@VisibleForTesting String foo;\n\n/** src/main/java/Service.java */\n\nnew MyObject().foo; // Noncompliant, foo is accessed from production code\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n/** src/main/java/MyObject.java */\n\n@VisibleForTesting String foo;\n\n/** src/test/java/MyObjectTest.java */\n\nnew MyObject().foo; // Compliant, foo is accessed from test code\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S5808",
            "repo": "java",
            "name": "Authorizations should be based on strong decisions",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "VULNERABILITY",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "30min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "30min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5808"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">Top 10 2021 Category A1 - Broken Access Control</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\">Top 10 2017 Category A5 - Broken Access Control</a>\n  </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/285\">CWE-285 - Improper Authorization</a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Access control is a critical aspect of web frameworks that ensures proper authorization and restricts access to sensitive resources or actions. To\nenable access control, web frameworks offer components that are responsible for evaluating user permissions and making access control decisions. They\nmight examine the user’s credentials, such as roles or privileges, and compare them against predefined rules or policies to determine whether the user\nshould be granted access to a specific resource or action.</p>\n<p>Conventionally, these checks should never grant access to every request received. If an endpoint or component is meant to be public, then it should\nbe ignored by access control components. Conversely, if an endpoint should deny some users from accessing it, then access control has to be configured\ncorrectly for this endpoint.</p>\n<p>Granting unrestricted access to all users can lead to security vulnerabilities and potential misuse of critical functionalities. It is important to\ncarefully assess access decisions based on factors such as user roles, resource sensitivity, and business requirements. Implementing a robust and\ngranular access control mechanism is crucial for the security and integrity of the web application itself and its surrounding environment.</p>\n<h3>What is the potential impact?</h3>\n<p>Not verifying user access strictly can introduce significant security risks. Some of the most prominent risks are listed below. Depending on the\nuse case, it is very likely that other risks are introduced on top of the ones listed.</p>\n<h4>Unauthorized access</h4>\n<p>As the access of users is not checked strictly, it becomes very easy for an attacker to gain access to restricted areas or functionalities,\npotentially compromising the confidentiality, integrity, and availability of sensitive resources. They may exploit this access to perform malicious\nactions, such as modifying or deleting data, impersonating legitimate users, or gaining administrative privileges, ultimately compromising the\nsecurity of the system.</p>\n<h4>Theft of sensitive data</h4>\n<p>Theft of sensitive data can result from incorrect access control if attackers manage to gain access to databases, file systems, or other storage\nmechanisms where sensitive data is stored. This can lead to the theft of personally identifiable information (PII), financial data, intellectual\nproperty, or other confidential information. The stolen data can be used for various malicious purposes, such as identity theft, financial fraud, or\nselling the data on the black market, causing significant harm to individuals and organizations affected by the breach.</p>"
                },
                {
                    "key": "introduction",
                    "content": "<p>When granting users access to resources of an application, such an authorization should be based on strong decisions. For instance, a user may be\nauthorized to access a resource only if they are authenticated, or if they have the correct role and privileges.</p>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<h4>Noncompliant code example</h4>\n<p>The <code>vote</code> method of an <a\nhref=\"https://docs.spring.io/spring-security/site/docs/6.1.x/api/org/springframework/security/access/AccessDecisionVoter.html\">AccessDecisionVoter</a>\nimplementation is not compliant when it returns only an affirmative decision (<code>ACCESS_GRANTED</code>) or abstains to make a decision\n(<code>ACCESS_ABSTAIN</code>):</p>\n<pre data-diff-id=\"101\" data-diff-type=\"noncompliant\">\npublic class WeakNightVoter implements AccessDecisionVoter {\n    @Override\n    public int vote(Authentication authentication, Object object, Collection collection) {\n        Calendar calendar = Calendar.getInstance();\n        int currentHour = calendar.get(Calendar.HOUR_OF_DAY);\n\n        if (currentHour &gt;= 8 &amp;&amp; currentHour &lt;= 19) {\n            return ACCESS_GRANTED;\n        }\n\n        return ACCESS_ABSTAIN; // Noncompliant: when users connect during the night, no decision is made\n    }\n}\n</pre>\n<p>The <code>hasPermission</code> method of a <a\nhref=\"https://docs.spring.io/spring-security/site/docs/6.1.x/api/org/springframework/security/access/PermissionEvaluator.html\">PermissionEvaluator</a>\nimplementation is not compliant when it doesn’t return <code>false</code>:</p>\n<pre data-diff-id=\"102\" data-diff-type=\"noncompliant\">\npublic class MyPermissionEvaluator implements PermissionEvaluator {\n    @Override\n    public boolean hasPermission(Authentication authentication, Object targetDomainObject, Object permission) {\n        Object user = authentication.getPrincipal();\n\n        if (user.getRole().equals(permission)) {\n              return true;\n        }\n\n        return true; // Noncompliant\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<p>The <code>vote</code> method of an <a\nhref=\"https://docs.spring.io/spring-security/site/docs/4.0.x/apidocs/org/springframework/security/access/AccessDecisionVoter.html\">AccessDecisionVoter</a>\nimplementation should return a negative decision (<code>ACCESS_DENIED</code>):</p>\n<pre data-diff-id=\"101\" data-diff-type=\"compliant\">\npublic class StrongNightVoter implements AccessDecisionVoter {\n    @Override\n    public int vote(Authentication authentication, Object object, Collection collection) {\n        Calendar calendar = Calendar.getInstance();\n        int currentHour = calendar.get(Calendar.HOUR_OF_DAY);\n\n        if (currentHour &gt;= 8 &amp;&amp; currentHour &lt;= 19) {\n            return ACCESS_GRANTED;\n        }\n\n        return ACCESS_DENIED; // Users are not allowed to connect during the night\n    }\n}\n</pre>\n<p>The <code>hasPermission</code> method of a <a\nhref=\"https://docs.spring.io/spring-security/site/docs/4.2.13.RELEASE/apidocs/org/springframework/security/access/PermissionEvaluator.html\">PermissionEvaluator</a>\nimplementation should return <code>false</code>:</p>\n<pre data-diff-id=\"102\" data-diff-type=\"compliant\">\npublic class MyPermissionEvaluator implements PermissionEvaluator {\n    @Override\n    public boolean hasPermission(Authentication authentication, Object targetDomainObject, Object permission) {\n        Object user = authentication.getPrincipal();\n\n        if (user.getRole().equals(permission)) {\n              return true;\n        }\n\n        return false;\n    }\n}\n</pre>",
                    "context": {
                        "displayName": "Spring",
                        "key": "spring"
                    }
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "SECURITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S1700",
            "repo": "java",
            "name": "A field should not duplicate the name of its containing class",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "brain-overload"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1700"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>It’s confusing to have a class member with the same name (case differences aside) as its enclosing class. This is particularly so when you consider\nthe common practice of naming a class instance for the class itself.</p>\n<p>Best practice dictates that any field or member with the same name as the enclosing class be renamed to be more descriptive of the particular\naspect of the class it represents or holds.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class Foo {\n  private String foo;\n\n  public String getFoo() { }\n}\n\nFoo foo = new Foo();\nfoo.getFoo() // what does this return?\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic class Foo {\n  private String name;\n\n  public String getName() { }\n}\n\n//...\n\nFoo foo = new Foo();\nfoo.getName()\n</pre>\n<h3>Exceptions</h3>\n<p>When the type of the field is the containing class and that field is static, no issue is raised to allow singletons named like the type.</p>\n<pre>\npublic class Foo {\n  ...\n  private static Foo foo;\n  public Foo getInstance() {\n    if(foo==null) {\n      foo = new Foo();\n    }\n    return foo;\n  }\n  ...\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "IDENTIFIABLE",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S1821",
            "repo": "java",
            "name": "\"switch\" statements and expressions should not be nested",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1821"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Nested <code>switch</code> structures are difficult to understand because you can easily confuse the cases of an inner <code>switch</code> as\nbelonging to an outer statement or expression. Therefore nested <code>switch</code> statements and expressions should be avoided.</p>\n<p>Specifically, you should structure your code to avoid the need for nested <code>switch</code> statements or expressions, but if you cannot, then\nconsider moving the inner <code>switch</code> to another method.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nvoid foo(int n, int m) {\n  switch (n) {\n    case 0:\n      switch (m) {  // Noncompliant; nested switch\n        // ...\n      }\n    case 1:\n      // ...\n    default:\n      // ...\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nvoid foo(int n, int m) {\n  switch (n) {\n    case 0:\n      bar(m);\n    case 1:\n      // ...\n    default:\n      // ...\n  }\n}\n\nvoid bar(int m){\n  switch(m) {\n    // ...\n  }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "FOCUSED",
            "cleanCodeAttributeCategory": "ADAPTABLE",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S1940",
            "repo": "java",
            "name": "Boolean checks should not be inverted",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1940"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>It is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nif ( !(a == 2)) { ...}  // Noncompliant\nboolean b = !(i &lt; 10);  // Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nif (a != 2) { ...}\nboolean b = (i &gt;= 10);\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S1941",
            "repo": "java",
            "name": "Variables should not be declared before they are relevant",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "brain-overload"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1941"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>For the sake of clarity, variables should be declared as close to where they’re used as possible. This is particularly true when considering\nmethods that contain early returns and the potential to throw exceptions. In these cases, it is not only pointless, but also confusing to declare a\nvariable that may never be used because conditions for an early return are met first.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic boolean isConditionMet(int a, int b) {\n  int difference = a - b;\n  MyClass foo = new MyClass(a);  // Noncompliant; not used before early return\n\n  if (difference &lt; 0) {\n    return false;\n  }\n\n  // ...\n\n  if (foo.doTheThing()) {\n    return true;\n  }\n  return false;\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic boolean isConditionMet(int a, int b) {\n  int difference = a - b;\n\n  if (difference &lt; 0) {\n    return false;\n  }\n\n  // ...\n\n  MyClass foo = new MyClass(a);\n  if (foo.doTheThing()) {\n    return true;\n  }\n  return false;\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S1942",
            "repo": "java",
            "name": "Simple class names should be used",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "confusing",
                "redundant"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1942"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Java’s <code>import</code> mechanism allows the use of simple class names. Therefore, using a class' fully qualified name in a file that\n<code>import</code>s the class is redundant and confusing.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nimport java.util.List;\nimport java.sql.Timestamp;\n\n//...\n\njava.util.List&lt;String&gt; myList;  // Noncompliant\njava.sql.Timestamp tStamp; // Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nimport java.util.List;\nimport java.sql.Timestamp;\n\n//...\n\nList&lt;String&gt; myList;\nTimestamp tStamp;\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S1943",
            "repo": "java",
            "name": "Classes and methods that rely on the default system encoding should not be used",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "unpredictable",
                "cert",
                "i18n"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1943"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/pzdGBQ\">CERT, STR04-J.</a> - Use compatible character encodings when communicating string data\n  between JVMs </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/ujZGBQ\">CERT, STR50-J.</a> - Use the appropriate method for counting characters in a string\n  </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Using classes and methods that rely on the default system encoding can result in code that works fine in its \"home\" environment. But that code may\nbreak for customers who use different encodings in ways that are extremely difficult to diagnose and nearly, if not completely, impossible to\nreproduce when it’s time to fix them.</p>\n<p>This rule detects uses of the following classes and methods:</p>\n<ul>\n  <li> <code>FileReader</code> </li>\n  <li> <code>FileWriter</code> </li>\n  <li> String constructors with a <code>byte[]</code> argument but no <code>Charset</code> argument\n    <ul>\n      <li> <code>String(byte[] bytes)</code> </li>\n      <li> <code>String(byte[] bytes, int offset, int length)</code> </li>\n    </ul>  </li>\n  <li> <code>String.getBytes()</code> </li>\n  <li> <code>String.getBytes(int srcBegin, int srcEnd, byte[] dst, int dstBegin)</code> </li>\n  <li> <code>InputStreamReader(InputStream in)</code> </li>\n  <li> <code>OutputStreamWriter(OutputStream out)</code> </li>\n  <li> <code>ByteArrayOutputStream.toString()</code> </li>\n  <li> Some <code>Formatter</code> constructors\n    <ul>\n      <li> <code>Formatter(String fileName)</code> </li>\n      <li> <code>Formatter(File file)</code> </li>\n      <li> <code>Formatter(OutputStream os)</code> </li>\n    </ul>  </li>\n  <li> Some <code>Scanner</code> constructors\n    <ul>\n      <li> <code>Scanner(File source)</code> </li>\n      <li> <code>Scanner(Path source)</code> </li>\n      <li> <code>Scanner(InputStream source)</code> </li>\n    </ul>  </li>\n  <li> Some <code>PrintStream</code> constructors\n    <ul>\n      <li> <code>PrintStream(File file)</code> </li>\n      <li> <code>PrintStream(OutputStream out)</code> </li>\n      <li> <code>PrintStream(OutputStream out, boolean autoFlush)</code> </li>\n      <li> <code>PrintStream(String fileName)</code> </li>\n    </ul>  </li>\n  <li> Some <code>PrintWriter</code> constructors\n    <ul>\n      <li> <code>PrintWriter(File file)</code> </li>\n      <li> <code>PrintWriter(OutputStream out)</code> </li>\n      <li> <code>PrintWriter(OutputStream out, boolean autoFlush)</code> </li>\n      <li> <code>PrintWriter(String fileName)</code> </li>\n    </ul>  </li>\n  <li> methods from Apache commons-io library which accept an encoding argument when that argument is null, and overloads of those methods that omit\n  the encoding argument\n    <ul>\n      <li> <code>IOUtils.copy(InputStream, Writer)</code> </li>\n      <li> <code>IOUtils.copy(Reader, OutputStream)</code> </li>\n      <li> <code>IOUtils.readLines(InputStream)</code> </li>\n      <li> <code>IOUtils.toByteArray(Reader)</code> </li>\n      <li> <code>IOUtils.toByteArray(String)</code> </li>\n      <li> <code>IOUtils.toCharArray(InputStream)</code> </li>\n      <li> <code>IOUtils.toInputStream(TypeCriteria.subtypeOf(CharSequence))</code> </li>\n      <li> <code>IOUtils.toString(byte[])</code> </li>\n      <li> <code>IOUtils.toString(URI)</code> </li>\n      <li> <code>IOUtils.toString(URL)</code> </li>\n      <li> <code>IOUtils.write(char[], OutputStream)</code> </li>\n      <li> <code>IOUtils.write(CharSequence, OutputStream)</code> </li>\n      <li> <code>IOUtils.writeLines(Collection, String, OutputStream)</code> </li>\n      <li> <code>FileUtils.readFileToString(File)</code> </li>\n      <li> <code>FileUtils.readLines(File)</code> </li>\n      <li> <code>FileUtils.write(File, CharSequence)</code> </li>\n      <li> <code>FileUtils.write(File, CharSequence, boolean)</code> </li>\n      <li> <code>FileUtils.writeStringToFile(File, String)</code> </li>\n    </ul>  </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S1948",
            "repo": "java",
            "name": "Fields in a \"Serializable\" class should either be transient or serializable",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "serialization"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "30min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "30min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1948"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/594\">CWE-594 - Saving Unserializable Objects to Disk</a> </li>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/Serializable.html\">Interface Serializable - Java SE 11 API\n  Documentation</a> </li>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/Serializable.html\">Interface Serializable - Java SE 17 API\n  Documentation</a> </li>\n</ul>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>Consider the following scenario.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class Address {\n    ...\n}\n\npublic class Person implements Serializable {\n  private static final long serialVersionUID = 1905122041950251207L;\n\n  private String name;\n  private Address address;  // Noncompliant, Address is not serializable\n}\n</pre>\n<p>How to fix this issue depends on the application’s needs. If the field’s value should be preserved during serialization and deserialization, you\nmay want to make the field’s value serializable.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class Address implements Serializable {\n  private static final long serialVersionUID = 2405172041950251807L;\n\n    ...\n}\n\npublic class Person implements Serializable {\n  private static final long serialVersionUID = 1905122041950251207L;\n\n  private String name;\n  private Address address; // Compliant, Address is serializable\n}\n</pre>\n<p>If the field’s value does not need to be preserved during serialization and deserialization, mark it as <code>transient</code>. The field will be\nignored when the object is serialized. After deserialization, the field will be set to the default value corresponding to its type (e.g.,\n<code>null</code> for object references).</p>\n<pre>\npublic class Address {\n    ...\n}\n\npublic class Person implements Serializable {\n  private static final long serialVersionUID = 1905122041950251207L;\n\n  private String name;\n  private transient Address address; // Compliant, the field is transient\n}\n</pre>\n<p>The alternative to making all members serializable or <code>transient</code> is to implement special methods which take on the responsibility of\nproperly serializing and de-serializing the object <code>writeObject</code> and <code>readObject</code>. These methods can be used to properly\n(de-)serialize an object, even though it contains fields that are not transient or serializable. Hence, this rule does not raise issues on fields of\nclasses which implement these methods.</p>\n<pre>\npublic class Address {\n    ...\n}\n\npublic class Person implements Serializable {\n  private static final long serialVersionUID = 1905122041950251207L;\n\n  private String name;\n  private Address address; // Compliant, writeObject and readObject handle this field\n\n  private void writeObject(java.io.ObjectOutputStream out) throws IOException {\n    // Appropriate serialization logic here\n  }\n\n  private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException {\n    // Appropriate deserialization logic here\n  }\n}\n</pre>\n<p>Finally, static fields are out of scope for serialization, so making a field static prevents issues from being raised.</p>\n<pre>\npublic class Person implements Serializable {\n  private static final long serialVersionUID = 1905122041950251207L;\n\n  private String name;\n\n  private static Logger log = getLogger(); // Compliant, static fields are not serialized\n}\n</pre>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>By contract, non-static fields in a <code>Serializable</code> class must themselves be either <code>Serializable</code> or <code>transient</code>.\nEven if the class is never explicitly serialized or deserialized, it is not safe to assume that this cannot happen. For instance, under load, most\nJ2EE application frameworks flush objects to disk.</p>\n<p>An object that implements <code>Serializable</code> but contains non-transient, non-serializable data members (and thus violates the contract)\ncould cause application crashes and open the door to attackers. In general, a <code>Serializable</code> class is expected to fulfil its contract and\nnot exhibit unexpected behaviour when an instance is serialized.</p>\n<p>This rule raises an issue on:</p>\n<ul>\n  <li> Non-<code>Serializable</code> fields. </li>\n  <li> When a field is assigned a non-<code>Serializable</code> type within the class. </li>\n  <li> Collection fields when they are not <code>private</code>. Values that are not serializable could be added to these collections externally. Due\n  to type erasure, it cannot be guaranteed that the collection will only contain serializable objects at runtime despite being declared as a\n  collection of serializable types. </li>\n</ul>"
                },
                {
                    "key": "introduction",
                    "content": "<p>This rule raises an issue on a non-transient and non-serializable field within a serializable class, if said class does not have\n<code>writeObject</code> and <code>readObject</code> methods defined.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S4087",
            "repo": "java",
            "name": "\"close()\" calls should not be redundant",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "redundant"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S4087"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Java 7’s try-with-resources structure automatically handles closing the resources that the <code>try</code> itself opens. Thus, adding an explicit\n<code>close()</code> call is redundant and potentially confusing.</p>\n<h3>Noncompliant code example</h3>\n<pre>\ntry (PrintWriter writer = new PrintWriter(process.getOutputStream())) {\n  String contents = file.contents();\n  writer.write(new Gson().toJson(new MyObject(contents)));\n  writer.flush();\n  writer.close();  // Noncompliant\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\ntry (PrintWriter writer = new PrintWriter(process.getOutputStream())) {\n  String contents = file.contents();\n  writer.write(new Gson().toJson(new MyObject(contents)));\n  writer.flush();\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S5804",
            "repo": "java",
            "name": "Allowing user enumeration is security-sensitive",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "spring"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "SECURITY_HOTSPOT",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5804"
                ]
            },
            "descriptionSections": [
                {
                    "key": "assess_the_problem",
                    "content": "<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The application discloses that a username exists in its database: most of the time it’s possible to avoid this kind of leak except for the\n  \"registration/sign-on\" part of a website because in this case the user must choose a valid username (not already taken by another user). </li>\n  <li> There is no rate limiting and CAPTCHA protection in place for requests involving a username. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Sensitive Code Example</h2>\n<p>In a Spring-security web application the username leaks when:</p>\n<ul>\n  <li> The string used as argument of <a\n  href=\"https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/core/userdetails/UserDetailsService.html\">loadUserByUsername</a> method is used in an exception message: </li>\n</ul>\n<pre>\npublic String authenticate(String username, String password) {\n  // ....\n  MyUserDetailsService s1 = new MyUserDetailsService();\n  MyUserPrincipal u1 = s1.loadUserByUsername(username);\n\n  if(u1 == null) {\n    throw new BadCredentialsException(username+\" doesn't exist in our database\"); // Sensitive\n  }\n  // ....\n}\n</pre>\n<ul>\n  <li> <a\n  href=\"https://docs.spring.io/spring-security/site/docs/3.0.x/apidocs/org/springframework/security/core/userdetails/UsernameNotFoundException.html\">UsernameNotFoundException</a> is thrown (except when it is in the loadUserByUsername method): </li>\n</ul>\n<pre>\npublic String authenticate(String username, String password) {\n  // ....\n  if(user == null) {\n      throw new UsernameNotFoundException(\"user not found\"); // Sensitive\n  }\n  // ....\n}\n</pre>\n<ul>\n  <li> <a\n  href=\"https://docs.spring.io/spring-security/site/docs/4.0.x/apidocs/org/springframework/security/authentication/dao/AbstractUserDetailsAuthenticationProvider.html#setHideUserNotFoundExceptions-boolean-\">HideUserNotFoundExceptions</a> is set to false: </li>\n</ul>\n<pre>\nDaoAuthenticationProvider daoauth = new DaoAuthenticationProvider();\ndaoauth.setUserDetailsService(new MyUserDetailsService());\ndaoauth.setPasswordEncoder(new BCryptPasswordEncoder());\ndaoauth.setHideUserNotFoundExceptions(false); // Sensitive\nbuilder.authenticationProvider(daoauth);\n</pre>\n"
                },
                {
                    "key": "default",
                    "content": "<p>User enumeration refers to the ability to guess existing usernames in a web application database. This can happen, for example, when using\n\"sign-in/sign-on/forgot password\" functionalities of a website.</p>\n<p>When an user tries to \"sign-in\" to a website with an incorrect username/login, the web application should not disclose that the username doesn’t\nexist with a message similar to \"this username is incorrect\", instead a generic message should be used like \"bad credentials\", this way it’s not\npossible to guess whether the username or password was incorrect during the authentication.</p>\n<p>If a user-management feature discloses information about the existence of a username, attackers can use brute force attacks to retrieve a large\namount of valid usernames that will impact the privacy of corresponding users and facilitate other attacks (phishing, password guessing etc …​).</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The application discloses that a username exists in its database: most of the time it’s possible to avoid this kind of leak except for the\n  \"registration/sign-on\" part of a website because in this case the user must choose a valid username (not already taken by another user). </li>\n  <li> There is no rate limiting and CAPTCHA protection in place for requests involving a username. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>When a user performs a request involving a username, it should not be possible to spot differences between a valid and incorrect username:</p>\n<ul>\n  <li> Error messages should be generic and not disclose if the username is valid or not. </li>\n  <li> The response time must be similar for a valid username or not. </li>\n  <li> CAPTCHA and other rate limiting solutions should be implemented. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<p>In a Spring-security web application the username leaks when:</p>\n<ul>\n  <li> The string used as argument of <a\n  href=\"https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/core/userdetails/UserDetailsService.html\">loadUserByUsername</a> method is used in an exception message: </li>\n</ul>\n<pre>\npublic String authenticate(String username, String password) {\n  // ....\n  MyUserDetailsService s1 = new MyUserDetailsService();\n  MyUserPrincipal u1 = s1.loadUserByUsername(username);\n\n  if(u1 == null) {\n    throw new BadCredentialsException(username+\" doesn't exist in our database\"); // Sensitive\n  }\n  // ....\n}\n</pre>\n<ul>\n  <li> <a\n  href=\"https://docs.spring.io/spring-security/site/docs/3.0.x/apidocs/org/springframework/security/core/userdetails/UsernameNotFoundException.html\">UsernameNotFoundException</a> is thrown (except when it is in the loadUserByUsername method): </li>\n</ul>\n<pre>\npublic String authenticate(String username, String password) {\n  // ....\n  if(user == null) {\n      throw new UsernameNotFoundException(\"user not found\"); // Sensitive\n  }\n  // ....\n}\n</pre>\n<ul>\n  <li> <a\n  href=\"https://docs.spring.io/spring-security/site/docs/4.0.x/apidocs/org/springframework/security/authentication/dao/AbstractUserDetailsAuthenticationProvider.html#setHideUserNotFoundExceptions-boolean-\">HideUserNotFoundExceptions</a> is set to false: </li>\n</ul>\n<pre>\nDaoAuthenticationProvider daoauth = new DaoAuthenticationProvider();\ndaoauth.setUserDetailsService(new MyUserDetailsService());\ndaoauth.setPasswordEncoder(new BCryptPasswordEncoder());\ndaoauth.setHideUserNotFoundExceptions(false); // Sensitive\nbuilder.authenticationProvider(daoauth);\n</pre>\n<h2>Compliant Solution</h2>\n<p>In a Spring-security web application:</p>\n<ul>\n  <li> the same message should be used regardless of whether it is the wrong user or password: </li>\n</ul>\n<pre>\npublic String authenticate(String username, String password) throws AuthenticationException {\n  Details user = null;\n  try {\n    user = loadUserByUsername(username);\n  } catch (UsernameNotFoundException | DataAccessException e) {\n    // Hide this exception reason to not disclose that the username doesn't exist\n  }\n  if (user == null || !user.isPasswordCorrect(password)) {\n     // User should not be able to guess if the bad credentials message is related to the username or the password\n    throw new BadCredentialsException(\"Bad credentials\");\n  }\n}\n</pre>\n<ul>\n  <li> <a\n  href=\"https://docs.spring.io/spring-security/site/docs/4.0.x/apidocs/org/springframework/security/authentication/dao/AbstractUserDetailsAuthenticationProvider.html#setHideUserNotFoundExceptions-boolean-\">HideUserNotFoundExceptions</a> should be set to true: </li>\n</ul>\n<pre>\nDaoAuthenticationProvider daoauth = new DaoAuthenticationProvider();\ndaoauth.setUserDetailsService(new MyUserDetailsService());\ndaoauth.setPasswordEncoder(new BCryptPasswordEncoder());\ndaoauth.setHideUserNotFoundExceptions(true); // Compliant\nbuilder.authenticationProvider(daoauth);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">Top 10 2021 Category A1 - Broken Access Control</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication\">Top 10 2017 Category A2 - Broken Authentication</a>\n  </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/200\">CWE-200 - Exposure of Sensitive Information to an Unauthorized Actor</a> </li>\n</ul>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<h2>Recommended Secure Coding Practices</h2>\n<p>When a user performs a request involving a username, it should not be possible to spot differences between a valid and incorrect username:</p>\n<ul>\n  <li> Error messages should be generic and not disclose if the username is valid or not. </li>\n  <li> The response time must be similar for a valid username or not. </li>\n  <li> CAPTCHA and other rate limiting solutions should be implemented. </li>\n</ul>\n<h2>Compliant Solution</h2>\n<p>In a Spring-security web application:</p>\n<ul>\n  <li> the same message should be used regardless of whether it is the wrong user or password: </li>\n</ul>\n<pre>\npublic String authenticate(String username, String password) throws AuthenticationException {\n  Details user = null;\n  try {\n    user = loadUserByUsername(username);\n  } catch (UsernameNotFoundException | DataAccessException e) {\n    // Hide this exception reason to not disclose that the username doesn't exist\n  }\n  if (user == null || !user.isPasswordCorrect(password)) {\n     // User should not be able to guess if the bad credentials message is related to the username or the password\n    throw new BadCredentialsException(\"Bad credentials\");\n  }\n}\n</pre>\n<ul>\n  <li> <a\n  href=\"https://docs.spring.io/spring-security/site/docs/4.0.x/apidocs/org/springframework/security/authentication/dao/AbstractUserDetailsAuthenticationProvider.html#setHideUserNotFoundExceptions-boolean-\">HideUserNotFoundExceptions</a> should be set to true: </li>\n</ul>\n<pre>\nDaoAuthenticationProvider daoauth = new DaoAuthenticationProvider();\ndaoauth.setUserDetailsService(new MyUserDetailsService());\ndaoauth.setPasswordEncoder(new BCryptPasswordEncoder());\ndaoauth.setHideUserNotFoundExceptions(true); // Compliant\nbuilder.authenticationProvider(daoauth);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">Top 10 2021 Category A1 - Broken Access Control</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication\">Top 10 2017 Category A2 - Broken Authentication</a>\n  </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/200\">CWE-200 - Exposure of Sensitive Information to an Unauthorized Actor</a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>User enumeration refers to the ability to guess existing usernames in a web application database. This can happen, for example, when using\n\"sign-in/sign-on/forgot password\" functionalities of a website.</p>\n<p>When an user tries to \"sign-in\" to a website with an incorrect username/login, the web application should not disclose that the username doesn’t\nexist with a message similar to \"this username is incorrect\", instead a generic message should be used like \"bad credentials\", this way it’s not\npossible to guess whether the username or password was incorrect during the authentication.</p>\n<p>If a user-management feature discloses information about the existence of a username, attackers can use brute force attacks to retrieve a large\namount of valid usernames that will impact the privacy of corresponding users and facilitate other attacks (phishing, password guessing etc …​).</p>\n"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "impacts": []
        },
        {
            "key": "java:S6262",
            "repo": "java",
            "name": "AWS region should not be set with a hardcoded String",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "aws"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S6262"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>When explicitly setting the region on an AWS Client, you should always prefer providing the value from the Enum <a\nhref=\"https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/index.html?com/amazonaws/regions/Regions.html\">Regions</a> instead of a hardcoded String.\nThis will allow you to transparently support any change in the API and avoid mistakes.</p>\n<p>This rule reports an issue when a hardcoded string is used instead of an available enum value.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nAmazonS3ClientBuilder.standard().withRegion(\"eu_west_1\").build();\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nAmazonS3ClientBuilder.standard().withRegion(Regions.EU_WEST_1).build();\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S6263",
            "repo": "java",
            "name": "Using long-term access keys is security-sensitive",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "aws"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "SECURITY_HOTSPOT",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "1h",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "1h",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S6263"
                ]
            },
            "descriptionSections": [
                {
                    "key": "default",
                    "content": "<p>In AWS, long-term access keys will be valid until you manually revoke them. This makes them highly sensitive as any exposure can have serious\nconsequences and should be used with care.</p>\n<p>This rule will trigger when encountering an instantiation of <code>com.amazonaws.auth.BasicAWSCredentials</code>.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The access key is used directly in an application or AWS CLI script running on an Amazon EC2 instance. </li>\n  <li> Cross-account access is needed. </li>\n  <li> The access keys need to be embedded within a mobile application. </li>\n  <li> Existing identity providers (SAML 2.0, on-premises identity store) already exists. </li>\n</ul>\n<p>For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-access-keys-best-practices.html#use-roles\">Use IAM roles\ninstead of long-term access keys</a>.</p>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Consider using IAM roles or other features of the AWS Security Token Service that provide temporary credentials, limiting the risks.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\nimport com.amazonaws.auth.AWSCredentials;\nimport com.amazonaws.auth.BasicAWSCredentials;\n// ...\n\nAWSCredentials awsCredentials = new BasicAWSCredentials(accessKeyId, secretAccessKey);\n</pre>\n<h2>Compliant Solution</h2>\n<p>Example for AWS STS (see <a href=\"https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/prog-services-sts.html\">Getting Temporary Credentials\nwith AWS STS</a>).</p>\n<pre>\nBasicSessionCredentials sessionCredentials = new BasicSessionCredentials(\n   session_creds.getAccessKeyId(),\n   session_creds.getSecretAccessKey(),\n   session_creds.getSessionToken());\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-access-keys-best-practices.html\">Best practices for managing AWS access keys</a>\n  </li>\n  <li> <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html\">Managing access keys for IAM users</a> </li>\n</ul>"
                },
                {
                    "key": "assess_the_problem",
                    "content": "<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The access key is used directly in an application or AWS CLI script running on an Amazon EC2 instance. </li>\n  <li> Cross-account access is needed. </li>\n  <li> The access keys need to be embedded within a mobile application. </li>\n  <li> Existing identity providers (SAML 2.0, on-premises identity store) already exists. </li>\n</ul>\n<p>For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-access-keys-best-practices.html#use-roles\">Use IAM roles\ninstead of long-term access keys</a>.</p>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\nimport com.amazonaws.auth.AWSCredentials;\nimport com.amazonaws.auth.BasicAWSCredentials;\n// ...\n\nAWSCredentials awsCredentials = new BasicAWSCredentials(accessKeyId, secretAccessKey);\n</pre>\n"
                },
                {
                    "key": "how_to_fix",
                    "content": "<h2>Recommended Secure Coding Practices</h2>\n<p>Consider using IAM roles or other features of the AWS Security Token Service that provide temporary credentials, limiting the risks.</p>\n<h2>Compliant Solution</h2>\n<p>Example for AWS STS (see <a href=\"https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/prog-services-sts.html\">Getting Temporary Credentials\nwith AWS STS</a>).</p>\n<pre>\nBasicSessionCredentials sessionCredentials = new BasicSessionCredentials(\n   session_creds.getAccessKeyId(),\n   session_creds.getSecretAccessKey(),\n   session_creds.getSessionToken());\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-access-keys-best-practices.html\">Best practices for managing AWS access keys</a>\n  </li>\n  <li> <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html\">Managing access keys for IAM users</a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>In AWS, long-term access keys will be valid until you manually revoke them. This makes them highly sensitive as any exposure can have serious\nconsequences and should be used with care.</p>\n<p>This rule will trigger when encountering an instantiation of <code>com.amazonaws.auth.BasicAWSCredentials</code>.</p>\n"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "impacts": []
        },
        {
            "key": "java:S1820",
            "repo": "java",
            "name": "Classes should not have too many fields",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "brain-overload"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "countNonpublicFields",
                    "htmlDesc": "Whether or not to include non-public fields in the count",
                    "defaultValue": "true",
                    "type": "BOOLEAN"
                },
                {
                    "key": "maximumFieldThreshold",
                    "htmlDesc": "The maximum number of fields",
                    "defaultValue": "20",
                    "type": "INTEGER"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "1h",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "1h",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1820"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain, and\nhaving a lot of fields is an indication that a class has grown too large.</p>\n<p>Above a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "FOCUSED",
            "cleanCodeAttributeCategory": "ADAPTABLE",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S1905",
            "repo": "java",
            "name": "Redundant casts should not be used",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "redundant",
                "clumsy"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1905"
                ]
            },
            "descriptionSections": [
                {
                    "key": "how_to_fix",
                    "content": "<p>To fix your code remove the unnecessary casting expression.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass Example {\n    public void example(List&lt;String&gt; list) {\n        for (String item: (List&lt;String&gt;) list) {  // Noncompliant, Remove this unnecessary cast to \"List\".\n          //...\n        }\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass Example {\n    public void example() {\n        for (String foo : getFoos()) {\n          //...\n        }\n    }\n\n    public List&lt;String&gt; getFoos() {\n        return List.of(\"foo1\", \"foo2\");\n    }\n}\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> Geeksforgeeks - <a href=\"https://www.geeksforgeeks.org/type-conversion-java-examples/\">Type conversion in Java with Examples</a> </li>\n  <li> Wikipedia - <a href=\"https://en.wikipedia.org/wiki/Type_conversion\">Type Conversion</a> </li>\n  <li> Wikipedia - <a href=\"https://en.wikipedia.org/wiki/Strong_and_weak_typing\">Strong and Weak Typing</a> </li>\n  <li> Wikipedia - <a href=\"https://en.wikipedia.org/wiki/Polymorphism_(computer_science)\"> Polymorphism (Computer Science)</a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Casting expressions are utilized to convert one data type to another, such as transforming an integer into a string. This is especially crucial in\nstrongly typed languages like C, C++, C#, Java, Python, and others.</p>\n<p>However, there are instances where casting expressions are not needed. These include situations like:</p>\n<ul>\n  <li> casting a variable to its own type </li>\n  <li> casting a subclass to a parent class (in the case of polymorphism) </li>\n  <li> the programming language is capable of automatically converting the given type to another </li>\n</ul>\n<p>These scenarios are considered unnecessary casting expressions. They can complicate the code and make it more difficult to understand, without\noffering any advantages.</p>\n<p>As a result, it’s generally advised to avoid unnecessary casting expressions. Instead, rely on the language’s type system to ensure type safety and\ncode clarity.</p>\n<h3>Exceptions</h3>\n<p>Casting may be required to distinguish the method to call in the case of overloading:</p>\n<pre>\nclass A {}\nclass B extends A{}\nclass C {\n  void fun(A a){}\n  void fun(B b){}\n\n  void foo() {\n    B b = new B();\n    fun(b);\n    fun((A) b); // Compliant, required to call the first method so cast is not redundant.\n  }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S1939",
            "repo": "java",
            "name": "Extensions and implementations should not be redundant",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "clumsy"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "1min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "1min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1939"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>All classes extend <code>Object</code> implicitly. Doing so explicitly is redundant.</p>\n<p>Further, declaring the implementation of an interface <em>and</em> one if its parents is also redundant. If you implement the interface, you also\nimplicitly implement its parents and there’s no need to do so explicitly.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic interface MyFace {\n  // ...\n}\n\npublic interface MyOtherFace extends MyFace {\n  // ...\n}\n\npublic class Foo\n    extends Object // Noncompliant\n    implements MyFace, MyOtherFace {  // Noncompliant\n  //...\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic interface MyFace {\n  // ...\n}\n\npublic interface MyOtherFace extends MyFace {\n  // ...\n}\n\npublic class Foo implements MyOtherFace {\n  //...\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S4065",
            "repo": "java",
            "name": "\"ThreadLocal.withInitial\" should be preferred",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "java8"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S4065"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Java 8 introduced <code>ThreadLocal.withInitial</code> which is a simpler alternative to creating an anonymous inner class to initialise a\n<code>ThreadLocal</code> instance.</p>\n<p>This rule raises an issue when a <code>ThreadLocal</code> anonymous inner class can be replaced by a call to\n<code>ThreadLocal.withInitial</code>.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nThreadLocal&lt;List&lt;String&gt;&gt; myThreadLocal =\n    new ThreadLocal&lt;List&lt;String&gt;&gt;() { // Noncompliant\n        @Override\n        protected List&lt;String&gt; initialValue() {\n            return new ArrayList&lt;String&gt;();\n        }\n    };\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nThreadLocal&lt;List&lt;String&gt;&gt; myThreadLocal = ThreadLocal.withInitial(ArrayList::new);\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S6035",
            "repo": "java",
            "name": "Single-character alternations in regular expressions should be replaced with character classes",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "regex"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S6035"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>When an alternation contains multiple alternatives that consist of a single character, it can be rewritten as a character class. This should be\npreferred because it is more efficient and can even help prevent stack overflows when used inside a repetition (see rule <a href='/coding_rules#rule_key=java%3AS5998'>S5998</a>).</p>\n<h3>Noncompliant code example</h3>\n<pre>\nPattern.compile(\"a|b|c\"); // Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nPattern.compile(\"[abc]\");\n// or\nPattern.compile(\"[a-c]\");\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "EFFICIENT",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S6126",
            "repo": "java",
            "name": "String multiline concatenation should be replaced with Text Blocks",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "java15"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S6126"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://openjdk.java.net/jeps/378\">JEP 378: Text Blocks</a> </li>\n  <li> <a href=\"https://openjdk.org/projects/amber/guides/text-blocks-guide\">Programmer’s Guide To Text Blocks</a>, by Jim Laskey and Stuart Marks\n  </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>In Java 15 Text Blocks are now official and can be used. The most common pattern for multiline strings in Java &lt; 15 was to write String\nconcatenation. Now it’s possible to do it in a more natural way using Text Blocks.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nString textBlock =\n               \"&lt;html&gt;\\n\" +\n               \"    &lt;body&gt;\\n\" +\n               \"        &lt;tag&gt;\\n\" +\n               \"        &lt;/tag&gt;\\n\" +\n               \"    &lt;/body&gt;\\n\" +\n               \"&lt;/html&gt;\";\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nString textBlock = \"\"\"\n        &lt;html&gt;\n            &lt;body&gt;\n                &lt;tag&gt;\n                &lt;/tag&gt;\n            &lt;/body&gt;\n        &lt;/html&gt;\"\"\";\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S6242",
            "repo": "java",
            "name": "Credentials Provider should be set explicitly when creating a new \"AwsClient\"",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "startup-time",
                "aws"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S6242"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://aws.amazon.com/fr/blogs/developer/tuning-the-aws-java-sdk-2-x-to-reduce-startup-time/\">Tuning the AWS Java SDK 2.x to reduce\n  startup time</a> </li>\n  <li> <a href=\"https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/lambda-optimize-starttime.html\">Optimizing cold start performance for\n  AWS Lambda</a> </li>\n  <li> <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html\">Environment variable configuration</a> </li>\n  <li> <a href=\"https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/credentials.html\">Default Credential Provider Chain</a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>If the credentials provider is not specified when creating a new AwsClient with an <a\nhref=\"https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/awscore/client/builder/AwsClientBuilder.html\">AwsClientBuilder</a>, the AWS SDK\nwill execute some logic to identify it automatically.</p>\n<p>While it will probably identify the correct one, this extra logic will slow down startup time, already known to be a hotspot.</p>\n<p>You should therefore always define the logic to set the credentials provider yourself. This is typically done by retrieving it from the Lambda\nprovided environment variable.</p>\n<p>This will make the code more explicit and spare initialization time.</p>\n<p>This rule reports an issue when the credentials provider is not set when creating an AwsClient.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nS3Client.builder()\n    .region(Region.of(System.getenv(SdkSystemSetting.AWS_REGION.environmentVariable())))\n    .build();\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nS3Client.builder()\n    .region(Region.of(System.getenv(SdkSystemSetting.AWS_REGION.environmentVariable()))\n    .credentialsProvider(EnvironmentVariableCredentialsProvider.create())\n    .build();\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "EFFICIENT",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S6246",
            "repo": "java",
            "name": "Lambdas should not invoke other lambdas synchronously",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "aws"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "3h",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "3h",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S6246"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Invoking other Lambdas synchronously from a Lambda is a scalability anti-pattern. Lambdas have a maximum execution time before they timeout (15\nminutes as of May 2021). Having to wait for another Lambda to finish its execution could lead to a timeout.</p>\n<p>A better solution is to generate&nbsp;events that can be consumed asynchronously by other Lambdas.</p>\n<h3>Noncompliant code example</h3>\n<p>With AWS SDKv1</p>\n<pre>\nInvokeRequest invokeRequest = new InvokeRequest()\n         .withFunctionName(\"myFunction\");\n\nAWSLambda awsLambda = AWSLambdaClientBuilder.standard()\n\t\t.withCredentials(new ProfileCredentialsProvider())\n\t\t.withRegion(Regions.US_WEST_2).build();\n\nawsLambda.invoke(invokeRequest); // Noncompliant\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/best-practices.html\">Best practices for working with AWS Lambda functions</a> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "EFFICIENT",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S6362",
            "repo": "java",
            "name": "Enabling JavaScript support for WebViews is security-sensitive",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "android"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "SECURITY_HOTSPOT",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S6362"
                ]
            },
            "descriptionSections": [
                {
                    "key": "assess_the_problem",
                    "content": "<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The WebWiew only renders static web content that does not require JavaScript code to be executed. </li>\n  <li> The WebView contains untrusted data that could cause harm when rendered. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\nimport android.webkit.WebView;\n\nWebView webView = (WebView) findViewById(R.id.webview);\nwebView.getSettings().setJavaScriptEnabled(true); // Sensitive\n</pre>\n"
                },
                {
                    "key": "default",
                    "content": "<p>WebViews can be used to display web content as part of a mobile application. A browser engine is used to render and display the content. Like a web\napplication, a mobile application that uses WebViews can be vulnerable to Cross-Site Scripting if untrusted code is rendered. In the context of a\nWebView, JavaScript code can exfiltrate local files that might be sensitive or even worse, access exposed functions of the application that can result\nin more severe vulnerabilities such as code injection. Thus JavaScript support should not be enabled for WebViews unless it is absolutely necessary\nand the authenticity of the web resources can be guaranteed.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The WebWiew only renders static web content that does not require JavaScript code to be executed. </li>\n  <li> The WebView contains untrusted data that could cause harm when rendered. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>It is recommended to disable JavaScript support for WebViews unless it is necessary to execute JavaScript code. Only trusted pages should be\nrendered.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\nimport android.webkit.WebView;\n\nWebView webView = (WebView) findViewById(R.id.webview);\nwebView.getSettings().setJavaScriptEnabled(true); // Sensitive\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport android.webkit.WebView;\n\nWebView webView = (WebView) findViewById(R.id.webview);\nwebView.getSettings().setJavaScriptEnabled(false);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS)\">Top 10 2017 Category A7 - Cross-Site Scripting\n  (XSS)</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/79\">CWE-79 - Improper Neutralization of Input During Web Page Generation ('Cross-site\n  Scripting')</a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>WebViews can be used to display web content as part of a mobile application. A browser engine is used to render and display the content. Like a web\napplication, a mobile application that uses WebViews can be vulnerable to Cross-Site Scripting if untrusted code is rendered. In the context of a\nWebView, JavaScript code can exfiltrate local files that might be sensitive or even worse, access exposed functions of the application that can result\nin more severe vulnerabilities such as code injection. Thus JavaScript support should not be enabled for WebViews unless it is absolutely necessary\nand the authenticity of the web resources can be guaranteed.</p>\n"
                },
                {
                    "key": "how_to_fix",
                    "content": "<h2>Recommended Secure Coding Practices</h2>\n<p>It is recommended to disable JavaScript support for WebViews unless it is necessary to execute JavaScript code. Only trusted pages should be\nrendered.</p>\n<h2>Compliant Solution</h2>\n<pre>\nimport android.webkit.WebView;\n\nWebView webView = (WebView) findViewById(R.id.webview);\nwebView.getSettings().setJavaScriptEnabled(false);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS)\">Top 10 2017 Category A7 - Cross-Site Scripting\n  (XSS)</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/79\">CWE-79 - Improper Neutralization of Input During Web Page Generation ('Cross-site\n  Scripting')</a> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "impacts": []
        },
        {
            "key": "java:S6363",
            "repo": "java",
            "name": "Enabling file access for WebViews is security-sensitive",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "android"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "SECURITY_HOTSPOT",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S6363"
                ]
            },
            "descriptionSections": [
                {
                    "key": "assess_the_problem",
                    "content": "<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> No local files have to be accessed by the Webview. </li>\n  <li> The WebView contains untrusted data that could cause harm when rendered. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\nimport android.webkit.WebView;\n\nWebView webView = (WebView) findViewById(R.id.webview);\nwebView.getSettings().setAllowFileAccess(true); // Sensitive\nwebView.getSettings().setAllowContentAccess(true); // Sensitive\n</pre>\n"
                },
                {
                    "key": "root_cause",
                    "content": "<p>WebViews can be used to display web content as part of a mobile application. A browser engine is used to render and display the content. Like a web\napplication, a mobile application that uses WebViews can be vulnerable to Cross-Site Scripting if untrusted code is rendered.</p>\n<p>If malicious JavaScript code in a WebView is executed this can leak the contents of sensitive files when access to local files is enabled.</p>\n"
                },
                {
                    "key": "default",
                    "content": "<p>WebViews can be used to display web content as part of a mobile application. A browser engine is used to render and display the content. Like a web\napplication, a mobile application that uses WebViews can be vulnerable to Cross-Site Scripting if untrusted code is rendered.</p>\n<p>If malicious JavaScript code in a WebView is executed this can leak the contents of sensitive files when access to local files is enabled.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> No local files have to be accessed by the Webview. </li>\n  <li> The WebView contains untrusted data that could cause harm when rendered. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>It is recommended to disable access to local files for WebViews unless it is necessary. In the case of a successful attack through a Cross-Site\nScripting vulnerability the attackers attack surface decreases drastically if no files can be read out.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\nimport android.webkit.WebView;\n\nWebView webView = (WebView) findViewById(R.id.webview);\nwebView.getSettings().setAllowFileAccess(true); // Sensitive\nwebView.getSettings().setAllowContentAccess(true); // Sensitive\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport android.webkit.WebView;\n\nWebView webView = (WebView) findViewById(R.id.webview);\nwebView.getSettings().setAllowFileAccess(false);\nwebView.getSettings().setAllowContentAccess(false);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS)\">Top 10 2017 Category A7 - Cross-Site Scripting\n  (XSS)</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/79\">CWE-79 - Improper Neutralization of Input During Web Page Generation ('Cross-site\n  Scripting')</a> </li>\n</ul>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<h2>Recommended Secure Coding Practices</h2>\n<p>It is recommended to disable access to local files for WebViews unless it is necessary. In the case of a successful attack through a Cross-Site\nScripting vulnerability the attackers attack surface decreases drastically if no files can be read out.</p>\n<h2>Compliant Solution</h2>\n<pre>\nimport android.webkit.WebView;\n\nWebView webView = (WebView) findViewById(R.id.webview);\nwebView.getSettings().setAllowFileAccess(false);\nwebView.getSettings().setAllowContentAccess(false);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS)\">Top 10 2017 Category A7 - Cross-Site Scripting\n  (XSS)</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/79\">CWE-79 - Improper Neutralization of Input During Web Page Generation ('Cross-site\n  Scripting')</a> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "impacts": []
        },
        {
            "key": "java:S6395",
            "repo": "java",
            "name": "Non-capturing groups without quantifier should not be used",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "regex"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S6395"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Sub-patterns can be wrapped by parentheses to build a group. This enables to restrict alternations, back reference the group or apply quantifier to\nthe sub-pattern.</p>\n<p>If this group should not be part of the match result or if no reference to this group is required, a non-capturing group can be created by adding\n<code>?:</code> behind the opening parenthesis.</p>\n<p>However, if this non-capturing group does not have a quantifier, or does not wrap an alternation, then imaging this group is redundant.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n\"(?:number)\\\\d{2}\"\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n\"number\\\\d{2}\"      \t// it is anyway required\n\"(?:number)?\\\\d{2}\"  \t// it is in fact optional\n</pre>\n<h3>Exceptions</h3>\n<p>This rule does not report an issue if the non-capturing group is an alternation.</p>\n<pre>\n\"(?:number|string)\"\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S6396",
            "repo": "java",
            "name": "Superfluous curly brace quantifiers should be avoided",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "regex"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S6396"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Curly brace quantifiers in regular expressions can be used to have a more fine-grained control over how many times the character or the\nsub-expression preceeding them should occur. They can be used to match an expression exactly n times with <code>{n}</code>, between n and m times with\n<code>{n,m}</code>, or at least n times with <code>{n,}</code>. In some cases, using such a quantifier is superfluous for the semantic of the regular\nexpression, and it can be removed to improve readability. This rule raises an issue when one of the following quantifiers is encountered:</p>\n<ul>\n  <li> <code>{1,1}</code> or <code>{1}</code>: they match the expression exactly once. The same behavior can be achieved without the quantifier. </li>\n  <li> <code>{0,0}</code> or <code>{0}</code>: they match the expression zero times. The same behavior can be achieved by removing the expression.\n  </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<pre>\n\"ab{1,1}c\"\n\"ab{1}c\"\n\"ab{0,0}c\"\n\"ab{0}c\"\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n\"abc\"\n\"ac\"\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S6397",
            "repo": "java",
            "name": "Character classes in regular expressions should not contain only one character",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "regex"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S6397"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Character classes in regular expressions are a convenient way to match one of several possible characters by listing the allowed characters or\nranges of characters. If a character class contains only one character, the effect is the same as just writing the character without a character\nclass.</p>\n<p>Thus, having only one character in a character class is usually a simple oversight that remained after removing other characters of the class.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n\"a[b]c\"\n\"[\\\\^]\"\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n\"abc\"\n\"\\\\^\"\n\"a[*]c\" // Compliant, see Exceptions\n</pre>\n<h3>Exceptions</h3>\n<p>This rule does not raise when the character inside the class is a metacharacter. This notation is sometimes used to avoid escaping (e.g.,\n<code>[.]{3}</code> to match three dots).</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S5164",
            "repo": "java",
            "name": "\"ThreadLocal\" variables should be cleaned up when no longer used",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "leak",
                "performance"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5164"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://www.baeldung.com/java-memory-leaks\">Understanding Memory Leaks in Java</a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p><code>ThreadLocal</code> variables are supposed to be garbage collected once the holding thread is no longer alive. Memory leaks can occur when\nholding threads are re-used which is the case on application servers using pool of threads.</p>\n<p>To avoid such problems, it is recommended to always clean up <code>ThreadLocal</code> variables using the <code>remove()</code> method to remove\nthe current thread’s value for the <code>ThreadLocal</code> variable.</p>\n<p>In addition, calling <code>set(null)</code> to remove the value might keep the reference to <code>this</code> pointer in the map, which can cause\nmemory leak in some scenarios. Using <code>remove</code> is safer to avoid this issue.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class ThreadLocalUserSession implements UserSession {\n\n  private static final ThreadLocal&lt;UserSession&gt; DELEGATE = new ThreadLocal&lt;&gt;();\n\n  public UserSession get() {\n    UserSession session = DELEGATE.get();\n    if (session != null) {\n      return session;\n    }\n    throw new UnauthorizedException(\"User is not authenticated\");\n  }\n\n  public void set(UserSession session) {\n    DELEGATE.set(session);\n  }\n\n   public void incorrectCleanup() {\n     DELEGATE.set(null); // Noncompliant\n   }\n\n  // some other methods without a call to DELEGATE.remove()\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic class ThreadLocalUserSession implements UserSession {\n\n  private static final ThreadLocal&lt;UserSession&gt; DELEGATE = new ThreadLocal&lt;&gt;();\n\n  public UserSession get() {\n    UserSession session = DELEGATE.get();\n    if (session != null) {\n      return session;\n    }\n    throw new UnauthorizedException(\"User is not authenticated\");\n  }\n\n  public void set(UserSession session) {\n    DELEGATE.set(session);\n  }\n\n  public void unload() {\n    DELEGATE.remove(); // Compliant\n  }\n\n  // ...\n}\n</pre>\n<h3>Exceptions</h3>\n<p>Rule will not detect non-private <code>ThreadLocal</code> variables, because <code>remove()</code> can be called from another class.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "COMPLETE",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S6001",
            "repo": "java",
            "name": "Back references in regular expressions should only refer to capturing groups that are matched before the reference",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "regex"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S6001"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>When a back reference in a regex refers to a capturing group that hasn’t been defined yet (or at all), it can never be matched. Named back\nreferences throw a <code>PatternSyntaxException</code> in that case; numeric back references fail silently when they can’t match, simply making the\nmatch fail.</p>\n<p>When the group is defined before the back reference but on a different control path (like in <code>(.)|\\1</code> for example), this also leads to a\nsituation where the back reference can never match.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nPattern.compile(\"\\\\1(.)\"); // Noncompliant, group 1 is defined after the back reference\nPattern.compile(\"(.)\\\\2\"); // Noncompliant, group 2 isn't defined at all\nPattern.compile(\"(.)|\\\\1\"); // Noncompliant, group 1 and the back reference are in different branches\nPattern.compile(\"(?&lt;x&gt;.)|\\\\k&lt;x&gt;\"); // Noncompliant, group x and the back reference are in different branches\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nPattern.compile(\"(.)\\\\1\");\nPattern.compile(\"(?&lt;x&gt;.)\\\\k&lt;x&gt;\");\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S6002",
            "repo": "java",
            "name": "Regex lookahead assertions should not be contradictory",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "regex"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S6002"
                ]
            },
            "descriptionSections": [
                {
                    "key": "introduction",
                    "content": "<p>This rule raises an issue when a regex lookahead contradicts the rest of the regex.</p>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Lookahead assertions are a regex feature that makes it possible to look ahead in the input without consuming it. It is often used at the end of\nregular expressions to make sure that substrings only match when they are followed by a specific pattern.</p>\n<p>For example, the following pattern will match an \"a\" only if it is directly followed by a \"b\". This does not consume the \"b\" in the process:</p>\n<pre>\nPattern.compile(\"a(?=b)\");\n</pre>\n<p>However, lookaheads can also be used in the middle (or at the beginning) of a regex. In that case there is the possibility that what comes after\nthe lookahead contradicts the pattern inside the lookahead. Since the lookahead does not consume input, this makes the lookahead impossible to match\nand is a sign that there’s a mistake in the regular expression that should be fixed.</p>\n\n<h4>Noncompliant code example</h4>\n<pre>\nPattern.compile(\"(?=a)b\"); // Noncompliant, the same character can't be equal to 'a' and 'b' at the same time\n</pre>\n<h4>Compliant solution</h4>\n<pre>\nPattern.compile(\"(?&lt;=a)b\");\nPattern.compile(\"a(?=b)\");\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S6019",
            "repo": "java",
            "name": "Reluctant quantifiers in regular expressions should be followed by an expression that can't match the empty string",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "regex"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S6019"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>When a reluctant quantifier (such as <code>*?</code> or <code>+?</code>) is followed by a pattern that can match the empty string or directly by\nthe end of the regex, it will always match the empty string when used with methods that find partial matches (such as <code>find</code>,\n<code>replaceAll</code>, <code>split</code> etc.).</p>\n<p>Similarly, when used with methods that find full matches, a reluctant quantifier that’s followed directly by the end of the regex (or a pattern\nthat always matches the empty string, such as <code>()</code>) behaves indistinguishably from a greedy quantifier while being less efficient.</p>\n<p>This is likely a sign that the regex does not work as intended.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n\"start123endstart456\".replaceAll(\"start\\\\w*?(end)?\", \"x\"); // Noncompliant. In contrast to what one would expect, the result is not \"xx\".\nstr.matches(\"\\\\d*?\"); // Noncompliant. Matches the same as \"\\d*\", but will backtrack in every position.\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n\"start123endstart456\".replaceAll(\"start\\\\w*?(end|$)\", \"x\"); // Result is \"xx\".\nstr.matches(\"\\\\d*\");\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S6241",
            "repo": "java",
            "name": "Region should be set explicitly when creating a new \"AwsClient\"",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "startup-time",
                "aws"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S6241"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://aws.amazon.com/fr/blogs/developer/tuning-the-aws-java-sdk-2-x-to-reduce-startup-time/\">Tuning the AWS Java SDK 2.x to reduce\n  startup time</a> </li>\n  <li> <a href=\"https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/lambda-optimize-starttime.html\">Optimizing cold start performance for\n  AWS Lambda</a> </li>\n  <li> <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html\">Environment variable configuration</a> </li>\n  <li> <a\n  href=\"https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/java-dg-region-selection.html#automatically-determine-the-aws-region-from-the-environment\">Automatically Determine the AWS Region</a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>If the region is not specified when creating a new AwsClient with an <a\nhref=\"https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/awscore/client/builder/AwsClientBuilder.html\">AwsClientBuilder</a>, the AWS SDK\nwill execute some logic to identify the endpoint automatically.</p>\n<p>While it will probably identify the correct one, this extra logic will slow down startup time, already known to be a hotspot.</p>\n<p>You should therefore always define the logic to set the region yourself. This is typically done by retrieving the region from the Lambda provided\nAWS_REGION environment variable.</p>\n<p>This will make the code more explicit and spare initialization time.</p>\n<p>This rule reports an issue when the region is not set when creating an AwsClient.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nS3Client.builder()\n    .credentialsProvider(EnvironmentVariableCredentialsProvider.create())\n    .build();\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nS3Client.builder()\n    .region(Region.of(System.getenv(SdkSystemSetting.AWS_REGION.environmentVariable()))\n    .credentialsProvider(EnvironmentVariableCredentialsProvider.create())\n    .build();\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "EFFICIENT",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S6243",
            "repo": "java",
            "name": "Reusable resources should be initialized at construction time of Lambda functions",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "aws"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S6243"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://aws.amazon.com/fr/blogs/developer/tuning-the-aws-java-sdk-2-x-to-reduce-startup-time/\">Tuning the AWS Java SDK 2.x to reduce\n  startup time</a> </li>\n  <li> <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/best-practices.html\">Best practices for working with AWS Lambda functions</a> </li>\n  <li> <a href=\"https://aws.amazon.com/fr/blogs/compute/container-reuse-in-lambda/\">Understanding Container Reuse in AWS Lambda</a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Resources that can be reused across multiple invocations of the Lambda function should be initialized at construction time. For example in the\nconstructor of the class, or in field initializers. This way, when the same container is reused for multiple function invocations, the existing\ninstance can be reused, along with all resources stored in its fields. It is a good practice to reuse SDK clients and database connections by\ninitializing them at class construction time, to avoid recreating them on every lambda invocation. Failing to do so can lead to performance\ndegradation, and when not closed properly, even out of memory errors.</p>\n<p>This rule reports an issue when the SDK client or the database connection is initialized locally inside a Lambda function.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class App implements RequestHandler&lt;Object, Object&gt; {\n    @Override\n    public Object handleRequest(final Object input, final Context context) {\n      S3Client s3Client = DependencyFactory.s3Client();\n      s3Client.listBuckets();\n      // ...\n    }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic class App implements RequestHandler&lt;Object, Object&gt; {\n    private final S3Client s3Client;\n\n    public App() {\n      s3Client = DependencyFactory.s3Client();\n    }\n\n    @Override\n    public Object handleRequest(final Object input, final Context context) {\n      s3Client.listBuckets();\n      // ...\n    }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "EFFICIENT",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S6244",
            "repo": "java",
            "name": "Consumer Builders should be used",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "aws"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S6244"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Some API, like the AWS SDK, heavily rely on the builder pattern to create different data structures. Despite all the benefits, this pattern can\nbecome really verbose, especially when dealing with nested structures. In order to reach a more concise code, \"Consumer Builders\", also called\n\"Consumer Interface\" are often introduced.</p>\n<p>The idea is to overload the methods taking others structures in a Builder with a Consumer of Builder instead. This enables to use a lambda instead\nof nesting another Builder, resulting in more concise and readable code.</p>\n<p>This rule reports an issue when the Consumer Builder methods could be used instead of the classical ones.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nSendEmailRequest.builder()\n  .destination(Destination.builder()\n    .toAddresses(\"to-email@domain.com\")\n    .bccAddresses(\"bcc-email@domain.com\")\n    .build())\n.build();\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nSendEmailRequest.builder()\n  .destination(d -&gt; d.toAddresses(\"to-email@domain.com\").bccAddresses(\"bcc-email@domain.com\"))\n  .build();\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://aws.amazon.com/fr/blogs/developer/consumer-builders-in-the-aws-sdk-for-java-v2/\">Consumer Builders in the AWS SDK for Java\n  v2</a> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S6373",
            "repo": "java",
            "name": "XML parsers should not allow inclusion of arbitrary files",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "symbolic-execution"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "VULNERABILITY",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>When the XML parser will encounter an <code>xinclude</code> element, it will try to load the file pointed to by the <code>href</code> attribute\ninto the document. Included files can either be local files found on the file system of the application server, or remote files that are downloaded\nover HTTP, SMB, or other protocols, depending on the capabilities of the application and server.</p>\n<p>The files that can be accessed that way are only limited by the entitlement of the application on the local system and the network filtering the\nserver is subject to.</p>\n<p>This issue is particularly severe when the XML parser is used to parse untrusted documents. For example, when user-submitted XML messages are\nparsed that way.</p>\n<h3>What is the potential impact?</h3>\n<p>Allowing the inclusion of arbitrary files in XML documents can have two main consequences depending on what type of file is included: local or\nremote.</p>\n<h4>Sensitive file disclosure</h4>\n<p>If the application allows the inclusion of arbitrary files through the use of the <code>xinclude</code> element, it might be used to disclose\narbitrary files from the local file system. Depending on the application’s permissions on the file system, configuration files, runtime secrets, or\nPersonally Identifiable Information could be leaked.</p>\n<p>This is particularly true if the affected parser is used to process untrusted XML documents.</p>\n<h4>Server-side request forgery</h4>\n<p>When used to retrieve remote files, the application will send network requests to remote hosts. Moreover, it will do so from its current network\nlocation, which can have severe consequences if the application server is located on a sensitive network, such as the company corporate network or a\nDMZ hosting other applications.</p>\n<p>Attackers exploiting this issue could try to access internal backend services or corporate file shares. It could allow them to access more\nsensitive files, bypass authentication mechanisms from frontend applications, or exploit further vulnerabilities in the local services. Note that, in\nsome cases, the requests sent from the application can be automatically authenticated on federated locations. This is often the case in Windows\nenvironments when using Active Directory federated authentication.</p>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>The following code is vulnerable because it explicitly enables the <code>xinclude</code> feature.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport javax.xml.parsers.SAXParserFactory;\n\nSAXParserFactory factory = SAXParserFactory.newInstance();\n\nfactory.setXIncludeAware(true); // Noncompliant\nfactory.setFeature(\"http://apache.org/xml/features/xinclude\", true); // Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport javax.xml.parsers.SAXParserFactory;\n\nSAXParserFactory factory = SAXParserFactory.newInstance();\n\nfactory.setXIncludeAware(false);\nfactory.setFeature(\"http://apache.org/xml/features/xinclude\", false);\n</pre>",
                    "context": {
                        "displayName": "Java SE",
                        "key": "java_se"
                    }
                },
                {
                    "key": "introduction",
                    "content": "<p>XML standard allows the inclusion of XML files with the <code>xinclude</code> element. When an XML parser component is set up with the\n<code>http://apache.org/xml/features/xinclude</code> feature, it will follow the standard and allow the inclusion of remote files.</p>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>The following code is vulnerable because it explicitly enables the <code>xinclude</code> feature.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"3\" data-diff-type=\"noncompliant\">\nimport org.jdom2.input.SAXBuilder;\n\nSAXBuilder builder = new SAXBuilder();\nbuilder.setFeature(\"http://apache.org/xml/features/xinclude\", true); // Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"3\" data-diff-type=\"compliant\">\nimport org.jdom2.input.SAXBuilder;\n\nSAXBuilder builder = new SAXBuilder();\nbuilder.setFeature(\"http://apache.org/xml/features/xinclude\", false);\n</pre>\n<h3>How does this work?</h3>\n<p>The compliant code example explicitly prevents the inclusion of files in XML documents by setting the\n<code>http://apache.org/xml/features/xinclude</code> feature property to <code>false</code>.</p>",
                    "context": {
                        "displayName": "Jdom2",
                        "key": "jdom2"
                    }
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> OWASP - <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#java\">OWASP XXE Prevention\n  Cheat Sheet</a> </li>\n  <li> Java documentation - <a\n  href=\"https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-8CD65EF5-D113-4D5C-A564-B875C8625FAC\">XML External Entity Injection Attack</a> </li>\n  <li> W3C - <a href=\"https://www.w3.org/TR/xinclude-11/\">XML Inclusions (XInclude) Version 1.1</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A4_2017-XML_External_Entities_(XXE)\">Top 10 2017 - Category A4 - XML External\n  Entities (XXE)</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">Top 10 2021 - Category A5 - Security Misconfiguration</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/611\">CWE-611 - Improper Restriction of XML External Entity Reference</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/827\">CWE-827 - Improper Control of Document Type Definition</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222608\">Application Security and\n  Development: V-222608</a> - The application must not be vulnerable to XML-oriented attacks. </li>\n</ul>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>The following code is vulnerable because it explicitly enables the <code>xinclude</code> feature.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nimport org.dom4j.io.SAXReader;\n\nSAXReader xmlReader = new SAXReader();\nxmlReader.setFeature(\"http://apache.org/xml/features/xinclude\", true); // Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nimport org.dom4j.io.SAXReader;\n\nSAXReader xmlReader = new SAXReader();\nxmlReader.setFeature(\"http://apache.org/xml/features/xinclude\", false);\n</pre>",
                    "context": {
                        "displayName": "Dom4j",
                        "key": "dom4j"
                    }
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "SECURITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S6374",
            "repo": "java",
            "name": "XML parsers should not load external schemas",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "DEPRECATED",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "symbolic-execution"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "VULNERABILITY",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a\n  href=\"https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-8CD65EF5-D113-4D5C-A564-B875C8625FAC\">Oracle Java Documentation</a> - XML External Entity Injection Attack </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A4_2017-XML_External_Entities_(XXE)\">Top 10 2017 Category A4 - XML External\n  Entities (XXE)</a> </li>\n  <li> <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#java\">OWASP XXE Prevention Cheat\n  Sheet</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/611\">CWE-611 - Information Exposure Through XML External Entity Reference</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/827\">CWE-827 - Improper Control of Document Type Definition</a> </li>\n</ul>"
                },
                {
                    "key": "introduction",
                    "content": "<p>This rule is deprecated; use <a href='/coding_rules#rule_key=java%3AS2755'>S2755</a> instead.</p>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>By default XML processors attempt to load all XML schemas and DTD (their locations are defined with <code>xsi:schemaLocation</code> attributes and\n<code>DOCTYPE</code> declarations), potentially from an external storage such as file system or network, which may lead, if no restrictions are put in\nplace, to <a href=\"https://owasp.org/www-community/attacks/Server_Side_Request_Forgery\">server-side request forgery (SSRF)</a> vulnerabilities.</p>\n<h3>Noncompliant code example</h3>\n<p>For <a href=\"https://docs.oracle.com/javase/9/docs/api/javax/xml/parsers/DocumentBuilderFactory.html\">DocumentBuilder</a>, <a\nhref=\"https://docs.oracle.com/javase/9/docs/api/javax/xml/parsers/SAXParserFactory.html\">SAXParser</a> and <a\nhref=\"https://docs.oracle.com/javase/9/docs/api/javax/xml/validation/SchemaFactory.html\">Schema</a> JAPX factories:</p>\n<pre>\nDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\nfactory.setValidating(true); // Noncompliant\nfactory.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", true); // Noncompliant\n\nSAXParserFactory factory = SAXParserFactory.newInstance();\nfactory.setValidating(true); // Noncompliant\nfactory.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", true); // Noncompliant\n\nSchemaFactory schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\nschemaFactory.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", true); // Noncompliant\n</pre>\n<p>For <a href=\"https://dom4j.github.io/\">Dom4j</a> library:</p>\n<pre>\nSAXReader xmlReader = new SAXReader(); // Noncompliant\nxmlReader.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", true);  // Noncompliant\n</pre>\n<p>For <a href=\"http://www.jdom.org/\">Jdom2</a> library:</p>\n<pre>\nSAXBuilder builder = new SAXBuilder();\nbuilder.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", true); // Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<p>For <a href=\"https://docs.oracle.com/javase/9/docs/api/javax/xml/parsers/DocumentBuilderFactory.html\">DocumentBuilder</a>, <a\nhref=\"https://docs.oracle.com/javase/9/docs/api/javax/xml/parsers/SAXParserFactory.html\">SAXParser</a> and <a\nhref=\"https://docs.oracle.com/javase/9/docs/api/javax/xml/validation/SchemaFactory.html\">Schema</a> JAPX factories:</p>\n<pre>\nDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\nfactory.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false);\n\nSAXParserFactory factory = SAXParserFactory.newInstance();\nfactory.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false);\n\nSchemaFactory schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\nschemaFactory.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false);\n</pre>\n<p>For <a href=\"https://dom4j.github.io/\">Dom4j</a> library:</p>\n<pre>\nSAXReader xmlReader = new SAXReader(); // Noncompliant\nxmlReader.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false);\n</pre>\n<p>For <a href=\"http://www.jdom.org/\">Jdom2</a> library:</p>\n<pre>\nSAXBuilder builder = new SAXBuilder();\nbuilder.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false);\n</pre>\n<h3>Exceptions</h3>\n<p>This rules does not raise an issue when an <code>EntityResolver</code> is set.</p>\n<pre>\nDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\nfactory.setValidating(true);\nDocumentBuilder builder = factory.newDocumentBuilder();\nbuilder.setEntityResolver(new MyEntityResolver());\n\nSAXBuilder builder = new SAXBuilder();\nbuilder.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", true);\nbuilder.setEntityResolver(new EntityResolver());\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "SECURITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S6377",
            "repo": "java",
            "name": "XML signatures should be validated securely",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "symbolic-execution"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "VULNERABILITY",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "introduction",
                    "content": "<p>XML signatures are a method used to ensure the integrity and authenticity of XML documents. However, if XML signatures are not validated securely,\nit can lead to potential vulnerabilities.</p>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>For versions of Java before 17, secure validation is disabled by default unless the application runs with a security manager, which is rare. It\nshould be enabled explicitly by setting the <code>org.jcp.xml.dsig.secureValidation</code> attribute to true with the\n<code>javax.xml.crypto.dsig.dom.DOMValidateContext.setProperty</code> method.</p>\n<p>For Java 17 and higher, secure validation is enabled by default.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nNodeList signatureElement = doc.getElementsByTagNameNS(XMLSignature.XMLNS, \"Signature\");\n\nXMLSignatureFactory fac = XMLSignatureFactory.getInstance(\"DOM\");\nDOMValidateContext valContext = new DOMValidateContext(new KeyValueKeySelector(), signatureElement.item(0)); // Noncompliant\nXMLSignature signature = fac.unmarshalXMLSignature(valContext);\n\nboolean signatureValidity = signature.validate(valContext);\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nNodeList signatureElement = doc.getElementsByTagNameNS(XMLSignature.XMLNS, \"Signature\");\n\nXMLSignatureFactory fac = XMLSignatureFactory.getInstance(\"DOM\");\nDOMValidateContext valContext = new DOMValidateContext(new KeyValueKeySelector(), signatureElement.item(0));\nvalContext.setProperty(\"org.jcp.xml.dsig.secureValidation\", Boolean.TRUE);\nXMLSignature signature = fac.unmarshalXMLSignature(valContext);\n\nboolean signatureValidity = signature.validate(valContext);\n</pre>\n<h3>How does this work?</h3>\n<p>When XML Signature secure validation mode is enabled, XML Signatures are processed more securely. It enforces a number of restrictionsto to protect\nfrom XML Documents that may contain hostile constructs that can cause denial-of-service or other types of security issues.</p>\n<p>These restrictions can protect you from XML Signatures that may contain potentially hostile constructs that can cause denial-of-service or other\ntypes of security issues.</p>",
                    "context": {
                        "displayName": "Java SE",
                        "key": "java_se"
                    }
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> Oracle Java Documentation - <a\n  href=\"https://docs.oracle.com/en/java/javase/21/security/java-xml-digital-signature-api-overview-and-tutorial.html\">XML Digital Signature API\n  Overview and Tutorial</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">Top 10:2021 A02:2021 - Cryptographic Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/347\">CWE-347 - Improper Verification of Cryptographic Signature</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222608\">Application Security and\n  Development: V-222608</a> - The application must not be vulnerable to XML-oriented attacks. </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Before Java 17, XML Digital Signature API does not apply restrictions on XML signature validation unless the application runs with a security\nmanager, which is rare.</p>\n<h2>What is the potential impact</h2>\n<p>By not enforcing secure validation, the XML Digital Signature API is more susceptible to attacks such as signature spoofing and injections.</p>\n<h3>Increased Vulnerability to Signature Spoofing</h3>\n<p>By disabling secure validation, the application becomes more susceptible to signature spoofing attacks. Attackers can potentially manipulate the\nXML signature in a way that bypasses the validation process, allowing them to forge or tamper with the signature. This can lead to the acceptance of\ninvalid or maliciously modified signatures, compromising the integrity and authenticity of the XML documents.</p>\n<h3>Risk of Injection Attacks</h3>\n<p>Disabling secure validation can expose the application to injection attacks. Attackers can inject malicious code or entities into the XML document,\ntaking advantage of the weakened validation process. In some cases, it can also expose the application to denial-of-service attacks. Attackers can\nexploit vulnerabilities in the validation process to cause excessive resource consumption or system crashes, leading to service unavailability or\ndisruption.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "SECURITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S6485",
            "repo": "java",
            "name": "Hash-based collections with known capacity should be initialized with the proper related static method.",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "performance"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S6485"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>When creating an instance of HashMap or HashSet, the developer can pick a constructor with known capacity. However, the requested capacity is not\nfully allocated by default. Indeed, when the collection reaches the load factor of the collection (default: 0.75), the collection is resized on the\nfly, leading to unexpected performance issues.</p>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>As of Java 19, hash-based collections provide a static method that allocates the requested capacity at construction time.</p>\n\n<h4>Noncompliant code example</h4>\n<pre>\nprivate static final int KNOWN_CAPACITY = 1_000_000;\n\npublic static Map&lt;String, Integer&gt; buildAMap() {\n    return new HashMap&lt;&gt;(KNOWN_CAPACITY); // Noncompliant\n}\n\npublic static Set&lt;String&gt; buildASet() {\n    return new HashSet&lt;&gt;(KNOWN_CAPACITY); // Noncompliant\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre>\nprivate static final int KNOWN_CAPACITY = 1_000_000;\n\npublic static Map&lt;String, Integer&gt; buildABetterMap() {\n    return HashMap.newHashMap(KNOWN_CAPACITY);\n}\n\npublic static Set&lt;String&gt; buildABetterSet() {\n    return HashSet.newHashSet(KNOWN_CAPACITY);\n}\n\npublic static Set&lt;String&gt; buildABetterSet(float customLoadFactor) {\n    return new HashSet&lt;&gt;(KNOWN_CAPACITY, customLoadFactor);\n}\n</pre>"
                },
                {
                    "key": "introduction",
                    "content": "<p>Hash-based collections with known capacity should be initialized with the proper related static method.</p>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> <a\n  href=\"https://docs.oracle.com/en/java/javase/19/docs/api/java.base/java/util/HashMap.html#newHashMap(int\">https://docs.oracle.com/en/java/javase/19/docs/api/java.base/java/util/HashMap.html#newHashMap(int</a>) </li>\n  <li> <a\n  href=\"https://docs.oracle.com/en/java/javase/19/docs/api/java.base/java/util/HashSet.html#newHashSet(int\">https://docs.oracle.com/en/java/javase/19/docs/api/java.base/java/util/HashSet.html#newHashSet(int</a>) </li>\n  <li> <a\n  href=\"https://docs.oracle.com/en/java/javase/19/docs/api/java.base/java/util/LinkedHashMap.html#newLinkedHashMap(int\">https://docs.oracle.com/en/java/javase/19/docs/api/java.base/java/util/LinkedHashMap.html#newLinkedHashMap(int</a>) </li>\n  <li> <a\n  href=\"https://docs.oracle.com/en/java/javase/19/docs/api/java.base/java/util/LinkedHashSet.html#newLinkedHashSet(int\">https://docs.oracle.com/en/java/javase/19/docs/api/java.base/java/util/LinkedHashSet.html#newLinkedHashSet(int</a>) </li>\n  <li> <a\n  href=\"https://docs.oracle.com/en/java/javase/19/docs/api/java.base/java/util/WeakHashMap.html#newWeakHashMap(int\">https://docs.oracle.com/en/java/javase/19/docs/api/java.base/java/util/WeakHashMap.html#newWeakHashMap(int</a>) </li>\n</ul>\n<p>Message:<br> Replace this call to the constructor with the better suited static method.</p>\n<p>Highlighting:<br> The infringing constructor call.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "EFFICIENT",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S1610",
            "repo": "java",
            "name": "Abstract classes without fields should be converted to interfaces",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "DEPRECATED",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1610"
                ]
            },
            "descriptionSections": [
                {
                    "key": "introduction",
                    "content": "<p>This rule is deprecated, and will eventually be removed.</p>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>With Java 8’s \"default method\" feature, any abstract class without direct or inherited field should be converted into an interface. However, this\nchange may not be appropriate in libraries or other applications where the class is intended to be used as an API.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project’s <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic abstract class Car {\n  public abstract void start(Environment c);\n\n  public void stop(Environment c) {\n    c.freeze(this);\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic interface Car {\n  public void start(Environment c);\n\n  public default void stop(Environment c) {\n    c.freeze(this);\n  }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S1611",
            "repo": "java",
            "name": "Parentheses should be removed from a single lambda parameter when its type is inferred",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "java8"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1611"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Lambda expressions with only one argument with an inferred type (i.e., no explicit type declaration) can be written without parentheses around that\nsingle parameter. This syntax is simpler, more compact and readable than using parentheses and is therefore preferred.</p>\n<p>This rule is automatically disabled when the project’s <code>sonar.java.source</code> is lower than <code>8</code>, as lambda expressions were\nintroduced in Java 8.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n(x) -&gt; x * 2\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nx -&gt; x * 2\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S1612",
            "repo": "java",
            "name": "Lambdas should be replaced with method references",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "java8"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1612"
                ]
            },
            "descriptionSections": [
                {
                    "key": "how_to_fix",
                    "content": "<p>Refer to the called method by its reference instead of wrapping it in a lambda expression.</p>\n<p>For instance:</p>\n<ul>\n  <li> <code>null</code> checks can be replaced with references to <code>Objects::isNull</code> and <code>Objects::nonNull</code> </li>\n  <li> Casts can be replaced with <code>SomeClass.class::cast</code> </li>\n  <li> <code>instanceof</code> can be replaced with <code>SomeClass.class::isInstance</code> </li>\n</ul>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass A {\n  void process(List&lt;A&gt; list) {\n    list.stream()\n      .filter(myListValue -&gt; myListValue instanceof B)     // Noncompliant\n      .map(listValueToMap -&gt; (B) listValueToMap)           // Noncompliant\n      .map(bValueToMap -&gt; bValueToMap.&lt;String&gt;getObject()) // Noncompliant\n      .forEach(o -&gt; System.out.println(o));                // Noncompliant\n  }\n}\n\nclass B extends A {\n  &lt;T&gt; T getObject() {\n    return null;\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass A {\n  void process(List&lt;A&gt; list) {\n    list.stream()\n      .filter(B.class::isInstance)   // Compliant\n      .map(B.class::cast)            // Compliant\n      .map(B::&lt;String&gt;getObject)     // Compliant\n      .forEach(System.out::println); // Compliant\n  }\n}\n\nclass B extends A {\n  &lt;T&gt; T getObject() {\n    return null;\n  }\n}\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html\">Method References - The Java™ Tutorials</a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Method or constructor references are more readable than lambda expressions in many situations, and may therefore be preferred.</p>\n<p>However, method references are sometimes less concise than lambdas. In such cases, it might be preferrable to keep the lambda expression for better\nreadability. Therefore, this rule only raises issues on lambda expressions where the replacement method reference is shorter.</p>\n<p>This rule is automatically disabled when the project’s <code>sonar.java.source</code> is lower than <code>8</code>, as lambda expressions were\nintroduced in Java 8.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S1854",
            "repo": "java",
            "name": "Unused assignments should be removed",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "cert",
                "unused"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "1min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "1min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1854"
                ]
            },
            "descriptionSections": [
                {
                    "key": "how_to_fix",
                    "content": "<p>Remove the unnecesarry assignment, then test the code to make sure that the right-hand side of a given assignment had no side effects (e.g. a\nmethod that writes certain data to a file and returns the number of written bytes).</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nint foo(int y) {\n  int x = 100; // Noncompliant: dead store\n  x = 150;     // Noncompliant: dead store\n  x = 200;\n  return x + y;\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nint foo(int y) {\n  int x = 200; // Compliant: no unnecessary assignment\n  return x + y;\n}\n</pre>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Dead stores refer to assignments made to local variables that are subsequently never used or immediately overwritten. Such assignments are\nunnecessary and don’t contribute to the functionality or clarity of the code. They may even negatively impact performance. Removing them enhances code\ncleanliness and readability. Even if the unnecessary operations do not do any harm in terms of the program’s correctness, they are - at best - a waste\nof computing resources.</p>\n<h3>Exceptions</h3>\n<p>This rule ignores initializations to <code>-1</code>, <code>0</code>, <code>1</code>, <code>null</code>, <code>true</code>, <code>false</code> and\n<code>\"\"</code>.</p>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/563\">CWE-563 - Assignment to Variable without Use ('Unused Variable')</a> </li>\n</ul>\n<h3>Related rules</h3>\n<ul>\n  <li> <a href='/coding_rules#rule_key=java%3AS2583'>S2583</a> - Conditionally executed code should be reachable </li>\n  <li> <a href='/coding_rules#rule_key=java%3AS2589'>S2589</a> - Boolean expressions should not be gratuitous </li>\n  <li> <a href='/coding_rules#rule_key=java%3AS3516'>S3516</a> - Methods returns should not be invariant </li>\n  <li> <a href='/coding_rules#rule_key=java%3AS3626'>S3626</a> - Jump statements should not be redundant </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S1858",
            "repo": "java",
            "name": "\"toString()\" should never be called on a String object",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "finding",
                "clumsy"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1858"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Invoking a method designed to return a string representation of an object which is already a string is a waste of keystrokes. This redundant\nconstruction may be optimized by the compiler, but will be confusing in the meantime.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nString message = \"hello world\";\nSystem.out.println(message.toString()); // Noncompliant;\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nString message = \"hello world\";\nSystem.out.println(message);\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S1860",
            "repo": "java",
            "name": "Synchronization should not be done on instances of value-based classes",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "multi-threading",
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1860"
                ]
            },
            "descriptionSections": [
                {
                    "key": "how_to_fix",
                    "content": "<p>Replace instances of value-based classes with a new object instance to synchronize on.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nprivate static final Boolean bLock = Boolean.FALSE;\nprivate static final Integer iLock = Integer.valueOf(0);\nprivate static final String sLock = \"LOCK\";\nprivate static final List&lt;String&gt; listLock = List.of(\"a\", \"b\", \"c\", \"d\");\n\npublic void doSomething() {\n\n  synchronized(bLock) {  // Noncompliant\n      ...\n  }\n  synchronized(iLock) {  // Noncompliant\n      ...\n  }\n  synchronized(sLock) {  // Noncompliant\n      ...\n  }\n  synchronized(listLock) {  // Noncompliant\n      ...\n  }\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nprivate static final Object lock1 = new Object();\nprivate static final Integer iLock = new Integer(42);\nprivate static final String sLock = new String(\"A brand new string in memory!\");\nprivate static final List&lt;String&gt; listLock = new ArrayList&lt;&gt;();\n\npublic void doSomething() {\n\n  synchronized(lock1) { // Compliant\n      ...\n  }\n  synchronized(iLock) { // Compliant\n      ...\n  }\n  synchronized(sLock) { // Compliant\n      ...\n  }\n  synchronized(listLock) { // Compliant\n      ...\n  }\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> CERT - <a href=\"https://wiki.sei.cmu.edu/confluence/x/1zdGBQ\">Do not synchronize on objects that may be reused</a> </li>\n  <li> OpenJDK - <a href=\"https://openjdk.java.net/jeps/390\">JEP 390: Warnings for Value-Based Classes</a> </li>\n  <li> Java Documentation - <a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/doc-files/ValueBased.html\">Value-based\n  Classes</a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>In Java, value-based classes are those for which instances are final and immutable, like <code>String</code>, <code>Integer</code> and so on, and\ntheir identity relies on their value and not their reference. When a variable of one of these types is instantiated, the JVM caches its value, and the\nvariable is just a reference to that value. For example, multiple <code>String</code> variables with the same value \"Hello world!\" will refer to the\nsame cached string literal in memory.</p>\n<p>The <code>synchronized</code> keyword tells the JVM to only allow the execution of the code contained in the following block to one\n<code>Thread</code> at a time. This mechanism relies on the identity of the object that is being synchronized between threads, to prevent that if\nobject X is locked, it will still be possible to lock another object Y.</p>\n<p>It means that the JVM will fail to correctly synchronize threads on instances of the aforementioned value-based classes, for instance:</p>\n<pre>\n// These variables \"a\" and \"b\" will effectively reference the same object in memory\nInteger a = 0;\nInteger b = 0;\n\n// This means that in the following code, the JVM could try to lock and execute\n// on the variable \"a\" because \"b\" was notified to be released, as the two Integer variables\n// are the same object to the JVM\nvoid syncMethod(int x) {\n    synchronized (a) {\n        if (a == x) {\n        // ... do something here\n        }\n    }\n    synchronized (b) {\n        if (b == x) {\n        // ... do something else\n        }\n    }\n}\n</pre>\n<p>This behavior can cause unrelated threads to deadlock with unclear stacktraces.</p>\n<p>Within the JDK, types which should not be used for synchronization include:</p>\n<ul>\n  <li> <code>String</code> literals </li>\n  <li> Primitive wrapper classes in <code>java.lang</code> (such as <code>Boolean</code> with <code>Boolean.FALSE</code> and\n  <code>Boolean.TRUE</code>) </li>\n  <li> The class <code>java.lang.Runtime.Version</code> </li>\n  <li> The <code>Optional*</code> classes in <code>java.util</code>: <code>Optional</code>, <code>OptionalInt</code>, <code>OptionalLong</code>, and\n  <code>OptionalDouble</code> </li>\n  <li> Various classes in the <code>java.time</code> API: <code>Instant</code>, <code>LocalDate</code>, <code>LocalTime</code>,\n  <code>LocalDateTime</code>, <code>ZonedDateTime</code>, <code>ZoneId</code>, <code>OffsetTime</code>, <code>OffsetDateTime</code>,\n  <code>ZoneOffset</code>, <code>Duration</code>, <code>Period</code>, <code>Year</code>, <code>YearMonth</code>, and <code>MonthDay</code> </li>\n  <li> Various classes in the <code>java.time.chrono</code> API: <code>MinguoDate</code>, <code>HijrahDate</code>, <code>JapaneseDate</code>, and\n  <code>ThaiBuddhistDate</code> </li>\n  <li> The interface <code>java.lang.ProcessHandle</code> and its implementation classes </li>\n  <li> The implementation classes of the collection factories in <code>java.util</code>: <code>List.of</code>, <code>List.copyOf</code>,\n  <code>Set.of</code>, <code>Set.copyOf</code>, <code>Map.of</code>, <code>Map.copyOf</code>, <code>Map.ofEntries</code>, and <code>Map.entry</code>.\n  </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S1862",
            "repo": "java",
            "name": "Related \"if/else if\" statements should not have the same condition",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "unused",
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1862"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/5dUxBQ\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed\n  </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>A chain of <code>if</code>/<code>else if</code> statements is evaluated from top to bottom. At most, only one branch will be executed: the first\none with a condition that evaluates to <code>true</code>.</p>\n<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it’s simply dead code and\nat worst, it’s a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 1)  // Noncompliant\n  moveWindowToTheBackground();\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 3)\n  moveWindowToTheBackground();\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S1989",
            "repo": "java",
            "name": "Exceptions should not be thrown from servlet methods",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "error-handling",
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "VULNERABILITY",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1989"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/600\">CWE-600 - Uncaught Exception in Servlet</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/-zZGBQ\">CERT, ERR01-J.</a> - Do not allow exceptions to expose sensitive information </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Servlets are components in Java web development, responsible for processing HTTP requests and generating responses. In this context, exceptions are\nused to handle and manage unexpected errors or exceptional conditions that may occur during the execution of a servlet.</p>\n<p>Catching exceptions within the servlet allows us to convert them into meaningful, user-friendly messages. Otherwise, failing to catch exceptions\nwill propagate them to the servlet container, where the default error-handling mechanism may impact the overall security and stability of the\nserver.</p>\n<p>Possible security problems are:</p>\n<ol>\n  <li> <strong>Vulnerability to denial-of-service attacks:</strong> Not caught exceptions can leave the servlet container in an unstable state, which\n  can exhaust the available resources and make the system unavailable in the worst cases. </li>\n  <li> <strong>Exposure of sensitive information:</strong> Exceptions handled by the servlet container, by default, expose detailed error messages or\n  debugging information to the user, which may contain sensitive data such as stack traces, database connection, or system configuration. </li>\n</ol>\n<p>Unfortunately, servlet method signatures do not force developers to handle <code>IOException</code> and <code>ServletException</code>:</p>\n<pre>\npublic void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\n}\n</pre>\n<p>To prevent this risk, this rule enforces all exceptions to be caught within the \"do*\" methods of servlet classes.</p>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>Surround all method calls that may throw an exception with a <code>try/catch</code> block.</p>\n\n<p>In the following example, the <code>getByName</code> method may throw an <code>UnknownHostException</code>.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\n  InetAddress addr = InetAddress.getByName(request.getRemoteAddr()); // Noncompliant\n  //...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\n  try {\n    InetAddress addr = InetAddress.getByName(request.getRemoteAddr());\n    //...\n  }\n  catch (UnknownHostException ex) {  // Compliant\n    //...\n  }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "SECURITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S2701",
            "repo": "java",
            "name": "Literal boolean values and nulls should not be used in assertions",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "junit",
                "tests"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "TEST",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2701"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>There’s no reason to use literal boolean values or nulls in assertions. Instead of using them with <em>assertEquals</em>, <em>assertNotEquals</em>\nand similar methods, you should be using <em>assertTrue</em>, <em>assertFalse</em>, <em>assertNull</em> or <em>assertNotNull</em> instead (or\n<em>isNull</em> etc. when using Fest). Using them with assertions unrelated to equality (such as <em>assertNull</em>) is most likely a bug.</p>\n<p>Supported frameworks:</p>\n<ul>\n  <li> JUnit3 </li>\n  <li> JUnit4 </li>\n  <li> JUnit5 </li>\n  <li> Fest assert </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<pre>\nAssert.assertTrue(true);  // Noncompliant\nassertThat(null).isNull(); // Noncompliant\n\nassertEquals(true, something()); // Noncompliant\nassertNotEquals(null, something()); // Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nassertTrue(something());\nassertNotNull(something());\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S2718",
            "repo": "java",
            "name": "\"DateUtils.truncate\" from Apache Commons Lang library should not be used",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "performance",
                "java8"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2718"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>The <code>ZonedDateTime</code> is an immutable representation of a date-time with a time-zone, introduced in Java 8. This class stores all date and\ntime fields, to a precision of nanoseconds, and a time zone, with a zone offset used to handle ambiguous local date times.</p>\n<p>Date truncation to a specific time unit means setting the values up to the specific time unit to zero while keeping the values of the larger time\nunits unchanged.</p>\n<p>The <code>ZonedDateTime</code> class provides a <code>truncatedTo</code> method that allows truncating the date in a significantly faster way than\nthe <code>DateUtils</code> class from Commons Lang.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project’s <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic Date trunc(Date date) {\n  return DateUtils.truncate(date, Calendar.SECOND);  // Noncompliant\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic Date trunc(Date date) {\n  Instant instant = date.toInstant();\n  ZonedDateTime zonedDateTime = instant.atZone(ZoneId.systemDefault());\n  ZonedDateTime truncatedZonedDateTime = zonedDateTime.truncatedTo(ChronoUnit.SECONDS);\n  Instant truncatedInstant = truncatedZonedDateTime.toInstant();\n  return Date.from(truncatedInstant);\n}\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a\n  href=\"https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/time/ZonedDateTime.html#truncatedTo(java.time.temporal.TemporalUnit)\">Oracle\n  SDK 20 - ZonedDateTime#truncatedTo</a> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "EFFICIENT",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S2959",
            "repo": "java",
            "name": "Unnecessary semicolons should be omitted",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "convention"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "1min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "1min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2959"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Under the reasoning that cleaner code is better code, the semicolon at the end of a try-with-resources construct should be omitted because it can\nbe omitted.</p>\n<h3>Noncompliant code example</h3>\n<pre>\ntry (ByteArrayInputStream b = new ByteArrayInputStream(new byte[10]);  // ignored; this one's required\n      Reader r = new InputStreamReader(b);)   // Noncompliant\n{\n   //do stuff\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\ntry (ByteArrayInputStream b = new ByteArrayInputStream(new byte[10]);\n      Reader r = new InputStreamReader(b))\n{\n   //do stuff\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S5042",
            "repo": "java",
            "name": "Expanding archive files without controlling resource consumption is security-sensitive",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "SECURITY_HOTSPOT",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5042"
                ]
            },
            "descriptionSections": [
                {
                    "key": "how_to_fix",
                    "content": "<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Define and control the ratio between compressed and uncompressed data, in general the data compression ratio for most of the legit archives is\n  1 to 3. </li>\n  <li> Define and control the threshold for maximum total size of the uncompressed data. </li>\n  <li> Count the number of file entries extracted from the archive and abort the extraction if their number is greater than a predefined threshold, in\n  particular it’s not recommended to recursively expand archives (an entry of an archive could be also an archive). </li>\n</ul>\n<h2>Compliant Solution</h2>\n<p>Do not rely on <a href=\"https://docs.oracle.com/javase/7/docs/api/java/util/zip/ZipEntry.html#getSize()\">getsize</a> to retrieve the size of an\nuncompressed entry because this method returns what is defined in the archive headers which can be forged by attackers, instead calculate the actual\nentry size when unzipping it:</p>\n<pre>\nFile f = new File(\"ZipBomb.zip\");\nZipFile zipFile = new ZipFile(f);\nEnumeration&lt;? extends ZipEntry&gt; entries = zipFile.entries();\n\nint THRESHOLD_ENTRIES = 10000;\nint THRESHOLD_SIZE = 1000000000; // 1 GB\ndouble THRESHOLD_RATIO = 10;\nint totalSizeArchive = 0;\nint totalEntryArchive = 0;\n\nwhile(entries.hasMoreElements()) {\n  ZipEntry ze = entries.nextElement();\n  InputStream in = new BufferedInputStream(zipFile.getInputStream(ze));\n  OutputStream out = new BufferedOutputStream(new FileOutputStream(\"./output_onlyfortesting.txt\"));\n\n  totalEntryArchive ++;\n\n  int nBytes = -1;\n  byte[] buffer = new byte[2048];\n  int totalSizeEntry = 0;\n\n  while((nBytes = in.read(buffer)) &gt; 0) { // Compliant\n      out.write(buffer, 0, nBytes);\n      totalSizeEntry += nBytes;\n      totalSizeArchive += nBytes;\n\n      double compressionRatio = totalSizeEntry / ze.getCompressedSize();\n      if(compressionRatio &gt; THRESHOLD_RATIO) {\n        // ratio between compressed and uncompressed data is highly suspicious, looks like a Zip Bomb Attack\n        break;\n      }\n  }\n\n  if(totalSizeArchive &gt; THRESHOLD_SIZE) {\n      // the uncompressed data size is too much for the application resource capacity\n      break;\n  }\n\n  if(totalEntryArchive &gt; THRESHOLD_ENTRIES) {\n      // too much entries in this archive, can lead to inodes exhaustion of the system\n      break;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">Top 10 2021 Category A1 - Broken Access Control</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">Top 10 2021 Category A5 - Security Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\">Top 10 2017 Category A5 - Broken Access Control</a>\n  </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/409\">CWE-409 - Improper Handling of Highly Compressed Data (Data Amplification)</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/display/java/IDS04-J.+Safely+extract+files+from+ZipInputStream\">CERT, IDS04-J.</a> - Safely\n  extract files from ZipInputStream </li>\n  <li> <a href=\"https://www.bamsoftware.com/hacks/zipbomb/\">bamsoftware.com</a> - A better Zip Bomb </li>\n</ul>"
                },
                {
                    "key": "assess_the_problem",
                    "content": "<h2>Ask Yourself Whether</h2>\n<p>Archives to expand are untrusted and:</p>\n<ul>\n  <li> There is no validation of the number of entries in the archive. </li>\n  <li> There is no validation of the total size of the uncompressed data. </li>\n  <li> There is no validation of the ratio between the compressed and uncompressed archive entry. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\nFile f = new File(\"ZipBomb.zip\");\nZipFile zipFile = new ZipFile(f);\nEnumeration&lt;? extends ZipEntry&gt; entries = zipFile.entries(); // Sensitive\n\nwhile(entries.hasMoreElements()) {\n  ZipEntry ze = entries.nextElement();\n  File out = new File(\"./output_onlyfortesting.txt\");\n  Files.copy(zipFile.getInputStream(ze), out.toPath(), StandardCopyOption.REPLACE_EXISTING);\n}\n</pre>\n"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Successful Zip Bomb attacks occur when an application expands untrusted archive files without controlling the size of the expanded data, which can\nlead to denial of service. A Zip bomb is usually a malicious archive file of a few kilobytes of compressed data but turned into gigabytes of\nuncompressed data. To achieve this extreme <a href=\"https://en.wikipedia.org/wiki/Data_compression_ratio\">compression ratio</a>, attackers will\ncompress irrelevant data (eg: a long string of repeated bytes).</p>\n"
                },
                {
                    "key": "default",
                    "content": "<p>Successful Zip Bomb attacks occur when an application expands untrusted archive files without controlling the size of the expanded data, which can\nlead to denial of service. A Zip bomb is usually a malicious archive file of a few kilobytes of compressed data but turned into gigabytes of\nuncompressed data. To achieve this extreme <a href=\"https://en.wikipedia.org/wiki/Data_compression_ratio\">compression ratio</a>, attackers will\ncompress irrelevant data (eg: a long string of repeated bytes).</p>\n<h2>Ask Yourself Whether</h2>\n<p>Archives to expand are untrusted and:</p>\n<ul>\n  <li> There is no validation of the number of entries in the archive. </li>\n  <li> There is no validation of the total size of the uncompressed data. </li>\n  <li> There is no validation of the ratio between the compressed and uncompressed archive entry. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Define and control the ratio between compressed and uncompressed data, in general the data compression ratio for most of the legit archives is\n  1 to 3. </li>\n  <li> Define and control the threshold for maximum total size of the uncompressed data. </li>\n  <li> Count the number of file entries extracted from the archive and abort the extraction if their number is greater than a predefined threshold, in\n  particular it’s not recommended to recursively expand archives (an entry of an archive could be also an archive). </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\nFile f = new File(\"ZipBomb.zip\");\nZipFile zipFile = new ZipFile(f);\nEnumeration&lt;? extends ZipEntry&gt; entries = zipFile.entries(); // Sensitive\n\nwhile(entries.hasMoreElements()) {\n  ZipEntry ze = entries.nextElement();\n  File out = new File(\"./output_onlyfortesting.txt\");\n  Files.copy(zipFile.getInputStream(ze), out.toPath(), StandardCopyOption.REPLACE_EXISTING);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<p>Do not rely on <a href=\"https://docs.oracle.com/javase/7/docs/api/java/util/zip/ZipEntry.html#getSize()\">getsize</a> to retrieve the size of an\nuncompressed entry because this method returns what is defined in the archive headers which can be forged by attackers, instead calculate the actual\nentry size when unzipping it:</p>\n<pre>\nFile f = new File(\"ZipBomb.zip\");\nZipFile zipFile = new ZipFile(f);\nEnumeration&lt;? extends ZipEntry&gt; entries = zipFile.entries();\n\nint THRESHOLD_ENTRIES = 10000;\nint THRESHOLD_SIZE = 1000000000; // 1 GB\ndouble THRESHOLD_RATIO = 10;\nint totalSizeArchive = 0;\nint totalEntryArchive = 0;\n\nwhile(entries.hasMoreElements()) {\n  ZipEntry ze = entries.nextElement();\n  InputStream in = new BufferedInputStream(zipFile.getInputStream(ze));\n  OutputStream out = new BufferedOutputStream(new FileOutputStream(\"./output_onlyfortesting.txt\"));\n\n  totalEntryArchive ++;\n\n  int nBytes = -1;\n  byte[] buffer = new byte[2048];\n  int totalSizeEntry = 0;\n\n  while((nBytes = in.read(buffer)) &gt; 0) { // Compliant\n      out.write(buffer, 0, nBytes);\n      totalSizeEntry += nBytes;\n      totalSizeArchive += nBytes;\n\n      double compressionRatio = totalSizeEntry / ze.getCompressedSize();\n      if(compressionRatio &gt; THRESHOLD_RATIO) {\n        // ratio between compressed and uncompressed data is highly suspicious, looks like a Zip Bomb Attack\n        break;\n      }\n  }\n\n  if(totalSizeArchive &gt; THRESHOLD_SIZE) {\n      // the uncompressed data size is too much for the application resource capacity\n      break;\n  }\n\n  if(totalEntryArchive &gt; THRESHOLD_ENTRIES) {\n      // too much entries in this archive, can lead to inodes exhaustion of the system\n      break;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">Top 10 2021 Category A1 - Broken Access Control</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">Top 10 2021 Category A5 - Security Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\">Top 10 2017 Category A5 - Broken Access Control</a>\n  </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/409\">CWE-409 - Improper Handling of Highly Compressed Data (Data Amplification)</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/display/java/IDS04-J.+Safely+extract+files+from+ZipInputStream\">CERT, IDS04-J.</a> - Safely\n  extract files from ZipInputStream </li>\n  <li> <a href=\"https://www.bamsoftware.com/hacks/zipbomb/\">bamsoftware.com</a> - A better Zip Bomb </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "impacts": []
        },
        {
            "key": "java:S6068",
            "repo": "java",
            "name": "Call to Mockito method \"verify\", \"when\" or \"given\" should be simplified",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "tests",
                "mockito",
                "clumsy"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "TEST",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S6068"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Mockito provides <em>argument matchers</em> for flexibly stubbing or verifying method calls.</p>\n<p><code>Mockito.verify()</code>, <code>Mockito.when()</code>, <code>Stubber.when()</code> and <code>BDDMockito.given()</code> each have overloads\nwith and without argument matchers.</p>\n<p>However, the default matching behavior (i.e. without argument matchers) uses <code>equals()</code>. If only the matcher\n<code>org.mockito.ArgumentMatchers.eq()</code> is used, the call is equivalent to the call without matchers, i.e. the <code>eq()</code> is not\nnecessary and can be omitted. The resulting code is shorter and easier to read.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n@Test\npublic void myTest() {\n  given(foo.bar(eq(v1), eq(v2), eq(v3))).willReturn(null);   // Noncompliant\n  when(foo.baz(eq(v4), eq(v5))).thenReturn(\"foo\");   // Noncompliant\n  doThrow(new RuntimeException()).when(foo).quux(eq(42));    // Noncompliant\n  verify(foo).bar(eq(v1), eq(v2), eq(v3));   // Noncompliant\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n@Test\npublic void myTest() {\n  given(foo.bar(v1, v2, v3)).willReturn(null);\n  when(foo.baz(v4, v5)).thenReturn(\"foo\");\n  doThrow(new RuntimeException()).when(foo).quux(42);\n  verify(foo).bar(v1, v2, v3);\n}\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html#argument_matchers\">Mockito documentation</a> -\n  argument matchers </li>\n  <li> <a href='/coding_rules#rule_key=java%3AS6073'>S6073</a> - Mockito argument matchers should be used on all parameters </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S6376",
            "repo": "java",
            "name": "XML parsers should not be vulnerable to Denial of Service attacks",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "symbolic-execution"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "VULNERABILITY",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "how_to_fix",
                    "content": "<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"3\" data-diff-type=\"noncompliant\">\nimport org.jdom2.input.SAXBuilder;\n\nSAXBuilder builder = new SAXBuilder();\nbuilder.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, false);  // Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"3\" data-diff-type=\"compliant\">\nimport org.jdom2.input.SAXBuilder;\n\nSAXBuilder builder = new SAXBuilder();\nbuilder.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n</pre>",
                    "context": {
                        "displayName": "Jdom2",
                        "key": "jdom2"
                    }
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> Java Documentation - <a\n  href=\"https://docs.oracle.com/en/java/javase/21/docs/api/java.xml/javax/xml/parsers/DocumentBuilderFactory.html\">DocumentBuilderFactory Class</a>\n  </li>\n  <li> Java Documentation - <a\n  href=\"https://docs.oracle.com/en/java/javase/21/docs/api/java.xml/javax/xml/parsers/SAXParserFactory.html\">SAXParserFactory Class</a> </li>\n  <li> Java Documentation - <a\n  href=\"https://docs.oracle.com/en/java/javase/21/docs/api/java.xml/javax/xml/validation/SchemaFactory.html\">SchemaFactory Class</a> </li>\n  <li> Java Documentation - <a\n  href=\"https://docs.oracle.com/en/java/javase/21/docs/api/java.xml/javax/xml/transform/TransformerFactory.html\">TransformerFactory Class</a> </li>\n  <li> Java Documentation - <a href=\"https://docs.oracle.com/en/java/javase/21/security/java-api-xml-processing-jaxp-security-guide.html\">Java API for\n  XML Processing (JAXP) Security Guide</a> </li>\n  <li> Dom4j Documentation - <a href=\"https://dom4j.github.io/javadoc/2.1.4/org/dom4j/io/SAXReader.html\">SAXReader Class</a> </li>\n  <li> Jdom2 Documentation - <a href=\"https://javadoc.io/static/org.jdom/jdom2/2.0.6.1/org/jdom2/input/SAXBuilder.html\">SAXBuilder class</a> </li>\n  <li> OWASP - <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#java\">XXE Prevention Cheat\n  Sheet</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">Top 10 2021 Category A5 - Security Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A4_2017-XML_External_Entities_(XXE)\">Top 10 2017 Category A4 - XML External\n  Entities (XXE)</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/776\">CWE-776 - Improper Restriction of Recursive Entity References in DTDs ('XML Entity\n  Expansion')</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222593\">Application Security and\n  Development: V-222593</a> - XML-based applications must mitigate DoS attacks by using XML filters, parser options, or gateways. </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222667\">Application Security and\n  Development: V-222667</a> - Protections against DoS attacks must be implemented. </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222608\">Application Security and\n  Development: V-222608</a> - The application must not be vulnerable to XML-oriented attacks. </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>XML files are complex data structures. When a malicious user is able to submit an XML file, it triggers complex processing that may overwhelm the\nparser. Most of the time, those complex processing are enabled by default, and XML parsers do not take preventive measures against Denial of Service\nattacks.</p>\n<h3>What is the potential impact?</h3>\n<p>When an attacker successfully exploits the vulnerability, it can lead to a Denial of Service (DoS) condition.</p>\n<h3>System Unavailability</h3>\n<p>Affected system becomes unresponsive or crashes, rendering it unavailable to legitimate users. This can have severe consequences, especially for\ncritical systems that rely on continuous availability, such as web servers, APIs, or network services.</p>\n<h3>Amplification Attacks</h3>\n<p>In some cases, XML parsers Denial of Service attacks can be used as a part of larger-scale amplification attacks. By leveraging the vulnerability,\nattackers can generate a disproportionately large response from the targeted system, amplifying the impact of their attack. This can result in\noverwhelming network bandwidth and causing widespread disruption.</p>"
                },
                {
                    "key": "introduction",
                    "content": "<p>XML parsers Denial of Service attacks target XML parsers, which are software components responsible for parsing and interpreting XML documents.</p>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport javax.xml.parsers.DocumentBuilderFactory;\n\nDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\nfactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, false); // Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport javax.xml.parsers.DocumentBuilderFactory;\n\nDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\nfactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n</pre>",
                    "context": {
                        "displayName": "Java SE",
                        "key": "java_se"
                    }
                },
                {
                    "key": "how_to_fix",
                    "content": "<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nimport org.dom4j.io.SAXReader;\n\nSAXReader xmlReader = new SAXReader();\nxmlReader.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, false); // Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nimport org.dom4j.io.SAXReader;\n\nSAXReader xmlReader = new SAXReader();\nxmlReader.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n</pre>",
                    "context": {
                        "displayName": "Dom4j",
                        "key": "dom4j"
                    }
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "COMPLETE",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "SECURITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S7158",
            "repo": "java",
            "name": "\"String.isEmpty()\" should be used to test for emptiness",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S7158"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> Java Documentation - <a href=\"https://docs.oracle.com/javase/7/docs/api/java/lang/String.html#isEmpty()\">java.lang.String.isEmpty() method</a>\n  </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Calling <code>String.isEmpty()</code> clearly communicates the code’s intention, which is to test if the string is empty. Using\n<code>String.length() == 0</code> is less direct and makes the code less readable.</p>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nif (\"string\".length() == 0) { /* … */ } // Noncompliant\n\nif (\"string\".length() &gt; 0) { /* … */ } // Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nif (\"string\".isEmpty()){ /* … */ }\n\nif (!\"string\".isEmpty()){ /* … */ }\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S124",
            "repo": "java",
            "name": "Track comments matching a regular expression",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": true,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "regularExpression",
                    "htmlDesc": "The regular expression",
                    "type": "STRING"
                },
                {
                    "key": "message",
                    "htmlDesc": "The issue message",
                    "defaultValue": "The regular expression matches this comment.",
                    "type": "STRING"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "0min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "0min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S124"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>This rule template can be used to create rules which will be triggered when the full content of a comment matches a given regular expression. Note\nthat the regular expression should be expressed using the dotall format (where the <code>.</code> character matches any character).</p>\n<p>For example, one can create a rule with the regular expression <code>.*REVIEW.*</code> to match all comment containing \"REVIEW\".</p>\n<p>Note that, in order to match REVIEW regardless of the case, the <code>(?i)</code> modifier should be prepended to the expression, as in\n<code>(?i).*REVIEW.*</code>.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S125",
            "repo": "java",
            "name": "Sections of code should not be commented out",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "unused"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:CommentedOutCodeLine"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Commented-out code distracts the focus from the actual executed code. It creates a noise that increases maintenance code. And because it is never\nexecuted, it quickly becomes out of date and invalid.</p>\n<p>Commented-out code should be deleted and can be retrieved from source control history if required.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S126",
            "repo": "java",
            "name": "\"if ... else if\" constructs should end with \"else\" clauses",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S126"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>This rule applies whenever an <code>if</code> statement is followed by one or more <code>else if</code> statements; the final <code>else if</code>\nshould be followed by an <code>else</code> statement.</p>\n<p>The requirement for a final <code>else</code> statement is defensive programming.</p>\n<p>The <code>else</code> statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is\nconsistent with the requirement to have a final <code>default</code> clause in a <code>switch</code> statement.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nif (x == 0) {\n  doSomething();\n} else if (x == 1) {\n  doSomethingElse();\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nif (x == 0) {\n  doSomething();\n} else if (x == 1) {\n  doSomethingElse();\n} else {\n  throw new IllegalStateException();\n}\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/RtYxBQ\">CERT, MSC01-C.</a> - Strive for logical completeness </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/jzZGBQ\">CERT, MSC57-J.</a> - Strive for logical completeness </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S127",
            "repo": "java",
            "name": "\"for\" loop stop conditions should be invariant",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:ForLoopCounterChangedCheck"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>A <code>for</code> loop termination condition should test the loop counter against an invariant value that does not change during the execution of\nthe loop. Invariant termination conditions make the program logic easier to understand and maintain.</p>\n<p>This rule tracks three types of non-invariant termination conditions:</p>\n<ul>\n  <li> When the loop counters are updated in the body of the <code>for</code> loop </li>\n  <li> When the termination condition depends on a method call </li>\n  <li> When the termination condition depends on an object property since such properties could change during the execution of the loop. </li>\n</ul>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<h4>Noncompliant code example</h4>\n<p>Make the termination condition invariant by using a constant or a local variable instead of an expression that could change during the execution of\nthe loop.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfor (int i = 0; i &lt; foo(); i++) { // Noncompliant, \"foo()\" is not an invariant\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nint end = foo();\nfor (int i = 0; i &lt; end; i++) { // Compliant, \"end\" does not change during loop execution\n  // ...\n}\n</pre>\n<h4>Noncompliant code example</h4>\n<p>If this is impossible and the counter variable must be updated in the loop’s body, use a <code>while</code> or <code>do</code> <code>while</code>\nloop instead of a <code>for</code> loop.</p>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nfor (int i = 0; i &lt; 10; i++) {\n  // ...\n  if (condition) i++; // Noncompliant, i is updated from within body\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nint i = 0;\nwhile (i++ &lt; 10) { // Compliant\n  // ...\n  if (condition) sum++;\n  // ...\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S128",
            "repo": "java",
            "name": "Switch cases should end with an unconditional \"break\" statement",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "cert",
                "suspicious"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S128"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/484\">CWE-484 - Omitted Break Statement in Switch</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/ldYxBQ\">CERT, MSC17-C.</a> - Finish every set of statements associated with a case label with a\n  break statement </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/1DdGBQ\">CERT, MSC52-J.</a> - Finish every set of statements associated with a case label with a\n  break statement </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>When the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While\nthis is sometimes intentional, it often is a mistake which leads to unexpected behavior.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nswitch (myVariable) {\n  case 1:\n    foo();\n    break;\n  case 2:  // Both 'doSomething()' and 'doSomethingElse()' will be executed. Is it on purpose ?\n    doSomething();\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nswitch (myVariable) {\n  case 1:\n    foo();\n    break;\n  case 2:\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h3>Exceptions</h3>\n<p>This rule is relaxed in the following cases:</p>\n<pre>\nswitch (myVariable) {\n  case 0:                                // Empty case used to specify the same behavior for a group of cases.\n  case 1:\n    doSomething();\n    break;\n  case 2:                                // Use of a fallthrough comment\n    // fallthrough\n  case 3:                                // Use of return statement\n    return;\n  case 4:                                // Use of throw statement\n    throw new IllegalStateException();\n  case 5:                                // Use of continue statement\n    continue;\n  default:                               // For the last case, use of break statement is optional\n    doSomethingElse();\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "BLOCKER"
                }
            ]
        },
        {
            "key": "java:S131",
            "repo": "java",
            "name": "\"switch\" statements should have \"default\" clauses",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:SwitchLastCaseIsDefaultCheck"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>The requirement for a final <code>default</code> clause is defensive programming. The clause should either take appropriate action, or contain a\nsuitable comment as to why no action is taken.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nswitch (param) {  //missing default clause\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n\nswitch (param) {\n  default: // default clause should be the last one\n    error();\n    break;\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nswitch (param) {\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n  default:\n    error();\n    break;\n}\n</pre>\n<h3>Exceptions</h3>\n<p>If the <code>switch</code> parameter is an <code>Enum</code> and if all the constants of this enum are used in the <code>case</code> statements,\nthen no <code>default</code> clause is expected.</p>\n<p>Example:</p>\n<pre>\npublic enum Day {\n    SUNDAY, MONDAY\n}\n...\nswitch(day) {\n  case SUNDAY:\n    doSomething();\n    break;\n  case MONDAY:\n    doSomethingElse();\n    break;\n}\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/478\">CWE-478 - Missing Default Case in Switch Statement</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/RtYxBQ\">CERT, MSC01-C.</a> - Strive for logical completeness </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S134",
            "repo": "java",
            "name": "Control flow statements \"if\", \"for\", \"while\", \"switch\" and \"try\" should not be nested too deeply",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "brain-overload"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "max",
                    "htmlDesc": "Maximum allowed control flow statement nesting depth.",
                    "defaultValue": "3",
                    "type": "INTEGER"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S134"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Guard_(computer_science)\">Guard clauses in programming</a> - one of the approaches to reducing the depth\n  of nesting </li>\n</ul>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>The following example demonstrates the behavior of the rule with the default threshold of 3 levels of nesting and one of the potential ways to fix\nthe code smell by introducing guard clauses:</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nif (condition1) {                  // Compliant - depth = 1\n  /* ... */\n  if (condition2) {                // Compliant - depth = 2\n    /* ... */\n    for (int i = 0; i &lt; 10; i++) {  // Compliant - depth = 3\n      /* ... */\n      if (condition4) {            // Noncompliant - depth = 4, which exceeds the limit\n        if (condition5) {          // Depth = 5, exceeding the limit, but issues are only reported on depth = 4\n          /* ... */\n        }\n        return;\n      }\n    }\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nif (!condition1) {\n  return;\n}\n/* ... */\nif (!condition2) {\n  return;\n}\nfor (int i = 0; i &lt; 10; i++) {\n  /* ... */\n  if (condition4) {\n    if (condition5) {\n      /* ... */\n    }\n    return;\n  }\n}\n</pre>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Nested control flow statements such as <code>if</code>, <code>for</code>, <code>while</code>, <code>switch</code>, and <code>try</code> are often\nkey ingredients in creating what’s known as \"Spaghetti code\". This code smell can make your program difficult to understand and maintain.</p>\n<p>When numerous control structures are placed inside one another, the code becomes a tangled, complex web. This significantly reduces the code’s\nreadability and maintainability, and it also complicates the testing process.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "FOCUSED",
            "cleanCodeAttributeCategory": "ADAPTABLE",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "java:S1604",
            "repo": "java",
            "name": "Anonymous inner classes containing only one method should become lambdas",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "java8"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1604"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html\">Lambda Expressions - The Java™ Tutorials</a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Before Java 8, the only way to partially support closures in Java was by using anonymous inner classes. Java 8 introduced lambdas, which are\nsignificantly more readable and should be used instead.</p>\n<p>This rule is automatically disabled when the project’s <code>sonar.java.source</code> is lower than <code>8</code>, as lambda expressions were\nintroduced in Java 8.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nmyCollection.stream().map(new Function&lt;String,String&gt;() { // Noncompliant, use a lambda expression instead\n  @Override\n  public String apply(String input) {\n    return new StringBuilder(input).reverse().toString();\n  }\n})\n  ...\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nmyCollection.stream()\n  .map(input -&gt; new StringBuilder(input).reverse().toString()) // Compliant\n    ...\n</pre>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nPredicate&lt;String&gt; isEmpty = new Predicate&lt;String&gt;() { // Noncompliant, use a lambda expression instead\n  @Override\n  public boolean test(String myString) {\n    return myString.isEmpty();\n  }\n};\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nPredicate&lt;String&gt; isEmpty = myString -&gt; myString.isEmpty(); // Compliant\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S1607",
            "repo": "java",
            "name": "JUnit4 @Ignored and JUnit5 @Disabled annotations should be used to disable tests and should provide a rationale",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "junit",
                "tests",
                "bad-practice",
                "confusing",
                "suspicious"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "TEST",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1607"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>When a test fails due, for example, to infrastructure issues, you might want to ignore it temporarily. But without some kind of notation about why\nthe test is being ignored, it may never be reactivated. Such tests are difficult to address without comprehensive knowledge of the project, and end up\npolluting their projects.</p>\n<p>This rule raises an issue for each ignored test that does not have any comment about why it is being skipped.</p>\n<ul>\n  <li> For Junit4, this rule targets the @Ignore annotation. </li>\n  <li> For Junit5, this rule targets the @Disabled annotation. </li>\n  <li> Cases where assumeTrue(false) or assumeFalse(true) are used to skip tests are targeted as well. </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<pre>\n@Ignore  // Noncompliant\n@Test\npublic void testDoTheThing() {\n  // ...\n</pre>\n<p>or</p>\n<pre>\n@Test\npublic void testDoTheThing() {\n  Assume.assumeFalse(true); // Noncompliant\n  // ...\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n@Test\n@Ignore(\"See Ticket #1234\")\npublic void testDoTheThing() {\n  // ...\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "TESTED",
            "cleanCodeAttributeCategory": "ADAPTABLE",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S1710",
            "repo": "java",
            "name": "Annotation repetitions should not be wrapped",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "java8"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1710"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Before Java 8, a container annotation was required as wrapper to use multiple instances of the same annotation. As of Java 8, this is no longer\nnecessary. Instead, these annotations should be used directly without a wrapper, resulting in cleaner and more readable code.</p>\n<p>This rule is automatically disabled when the project’s <code>sonar.java.source</code> is lower than <code>8</code> as repeating annotations were\nintroduced in Java 8.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@SomeAnnotations({  // Noncompliant, wrapper annotations are not necessary in Java 8+\n  @SomeAnnotation(..a..),\n  @SomeAnnotation(..b..),\n  @SomeAnnotation(..c..),\n})\npublic class SomeClass {\n  ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@SomeAnnotation(..a..)\n@SomeAnnotation(..b..)\n@SomeAnnotation(..c..)\npublic class SomeClass {\n  ...\n}\n</pre>\n<h2>References</h2>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/tutorial/java/annotations/repeating.html\">Repeating Annotations - The Java™ Tutorials</a> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S1711",
            "repo": "java",
            "name": "Standard functional interfaces should not be redefined",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "java8"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1711"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Just as there is little justification for writing your own String class, there is no good reason to re-define one of the existing, standard\nfunctional interfaces.</p>\n<p>Doing so may seem tempting, since it would allow you to specify a little extra context with the name. But in the long run, it will be a source of\nconfusion, because maintenance programmers will wonder what is different between the custom functional interface and the standard one.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n@FunctionalInterface\npublic interface MyInterface { // Noncompliant\n\tdouble toDouble(int a);\n}\n\n@FunctionalInterface\npublic interface ExtendedBooleanSupplier { // Noncompliant\n  boolean get();\n  default boolean isFalse() {\n    return !get();\n  }\n}\n\npublic class MyClass {\n    private int a;\n    public double myMethod(MyInterface instance){\n\treturn instance.toDouble(a);\n    }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n@FunctionalInterface\npublic interface ExtendedBooleanSupplier extends BooleanSupplier { // Compliant, extends java.util.function.BooleanSupplier\n  default boolean isFalse() {\n    return !getAsBoolean();\n  }\n}\n\npublic class MyClass {\n    private int a;\n    public double myMethod(IntToDoubleFunction instance){\n\treturn instance.applyAsDouble(a);\n    }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S1844",
            "repo": "java",
            "name": "\"Object.wait\" should not be called on objects that implement \"java.util.concurrent.locks.Condition\"",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "suspicious"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1844"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>The <code>java.util.concurrent.locks.Condition</code> interface provides an alternative to the <code>Object</code> monitor methods\n(<code>wait</code>, <code>notify</code> and <code>notifyAll</code>). Hence, the purpose of implementing said interface is to gain access to its more\nnuanced <code>await</code> methods.</p>\n<p>Consequently, calling the method <code>Object.wait</code> on a class implementing the <code>Condition</code> interface is contradictory and should\nbe avoided. Use <code>Condition.await</code> instead.</p>\n<h2>Code examples</h2>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nvoid doSomething(Condition condition) {\n    condition.wait(); // Noncompliant, Object.wait is called\n\n        ...\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nvoid doSomething(Condition condition) {\n    condition.await(); // Compliant, Condition.await is called\n\n        ...\n}\n</pre>\n<h2>References</h2>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/Condition.html\">Interface Condition - Java™ Platform SE 8, API\n  Specification</a> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S1845",
            "repo": "java",
            "name": "Methods and field names should not be the same or differ only by capitalization",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "confusing"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1845"
                ]
            },
            "descriptionSections": [
                {
                    "key": "introduction",
                    "content": "<p>This rule raises an issue when there is a method and a field in a class with names that differ only by capitalization.</p>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Looking at the set of methods in a class, including superclass methods, and finding two methods or fields that differ only by capitalization is\nconfusing to users of the class. It is similarly confusing to have a method and a field which differ only in capitalization or a method and a field\nwith exactly the same name and visibility.</p>\n<p>In the case of methods, it may have been a mistake on the part of the original developer, who intended to override a superclass method, but instead\nadded a new method with nearly the same name.</p>\n<p>Otherwise, this situation simply indicates poor naming. Method names should be action-oriented, and thus contain a verb, which is unlikely in the\ncase where both a method and a member have the same name (with or without capitalization differences). However, renaming a public method could be\ndisruptive to callers. Therefore renaming the member is the recommended action.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class Car{\n\n  public DriveTrain drive;\n\n  public void tearDown(){...}\n\n  public void drive() {...}  // Noncompliant; duplicates field name\n}\n\npublic class MyCar extends Car{\n  public void teardown(){...}  // Noncompliant; not an override. It it really what's intended?\n\n  public void drivefast(){...}\n\n  public void driveFast(){...} //Huh?\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class Car{\n\n  private DriveTrain drive;\n\n  public void tearDown(){...}\n\n  public void drive() {...}  // field visibility reduced\n}\n\npublic class MyCar extends Car{\n  @Override\n  public void tearDown(){...}\n\n  public void drivefast(){...}\n\n  public void driveReallyFast(){...}\n\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "IDENTIFIABLE",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "BLOCKER"
                }
            ]
        },
        {
            "key": "java:S1849",
            "repo": "java",
            "name": "\"Iterator.hasNext()\" should not call \"Iterator.next()\"",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S1849"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Iterator.html\">Interface Iterator&lt;E&gt; - Java® Platform SE\n  11 API Specification</a> </li>\n</ul>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>How to fix this issue strongly depends on the specific implementation of the iterator. Make sure that the logic of the <code>hasNext()</code>\nimplementation does not change the state of the iterator or any underlying data sources. Instead, it should merely return state information.</p>\n<h2>Code examples</h2>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass MyIterator implements Iterator&lt;Integer&gt; {\n\n  private Queue&lt;Integer&gt; elements;\n\n    ...\n\n  @Override\n  public boolean hasNext() {\n    try {\n      next(); // Noncompliant, next() is called from hasNext()\n      return true;\n    } catch (NoSuchElementException e) {\n      return false;\n    }\n  }\n\n  @Override\n  public Integer next() {\n    return elements.remove();\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass MyIterator implements Iterator&lt;Integer&gt; {\n\n  private Queue&lt;Integer&gt; elements;\n\n    ...\n\n  @Override\n  public boolean hasNext() {\n    return !elements.isEmpty(); // Compliant, no call to next()\n  }\n\n  @Override\n  public Integer next() {\n    return elements.remove();\n  }\n}\n</pre>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Calling <code>Iterator.hasNext()</code> is not supposed to have any side effects and hence should not change the iterator’s state.\n<code>Iterator.next()</code> advances the iterator by one item. So calling it inside <code>Iterator.hasNext()</code> breaks the <code>hasNext()</code>\ncontract and will lead to unexpected behavior in production.</p>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S2924",
            "repo": "java",
            "name": "JUnit rules should be used",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "junit",
                "tests",
                "unused"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "TEST",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2924"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>JUnit rules are predefined classes that extend the behavior of JUnit tests, allowing to add new functionalities, such as managing resources,\nmodifying test behavior, and handling exceptions.</p>\n<p>Unused JUnit rules can lead to confusion when reading the test code, making tests harder to understand and maintain. Having unused rules can also\nslow down the test suite, as JUnit has to process the rules even though they are not being used. Some <code>TestRule</code> classes have the desired\neffect without being directly referenced by a test, while others do not. There’s no reason to leave them cluttering the file if they’re not in\nuse.</p>\n<p>The rule raises an issue when in a <code>Test</code> class, there is no method referencing a declared <code>TestRule</code> of the following\ntypes:</p>\n<ul>\n  <li> <code>TemporaryFolder</code> and <code>TestName</code> in JUnit </li>\n  <li> <code>TempDir</code> and <code>TestInfo</code> in JUnit 5 </li>\n</ul>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://junit.org/junit4/javadoc/4.12/org/junit/Rule.html\">Junit API - Rule</a> </li>\n  <li> <a href=\"https://github.com/junit-team/junit4/wiki/Rules\">Junit - Rules</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://www.baeldung.com/junit-4-rules\">Junit 4 Rules</a> </li>\n</ul>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<p>Remove the unused <code>TestRule</code> field that is expected to be referenced inside a test method.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class ProjectDefinitionTest {\n\n  @Rule\n  public TemporaryFolder temp = new TemporaryFolder();  // Noncompliant\n\n  @Test\n  public void shouldSetKey() {\n    ProjectDefinition def = ProjectDefinition.create();\n    def.setKey(\"mykey\");\n    assertThat(def.getKey(), is(\"mykey\"));\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class ProjectDefinitionTest {\n\n  @Test\n  public void shouldSetKey() {\n    ProjectDefinition def = ProjectDefinition.create();\n    def.setKey(\"mykey\");\n    assertThat(def.getKey(), is(\"mykey\"));\n  }\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S2925",
            "repo": "java",
            "name": "\"Thread.sleep\" should not be used in tests",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "tests",
                "bad-practice"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "TEST",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S2925"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>In asynchronous testing, the test code is written in a way that allows it to wait for the asynchronous operation to complete before continuing with\nthe test.</p>\n<p>Using <code>Thread.sleep</code> in this case can cause flaky tests, slow test execution, and inaccurate test results. It creates brittle tests that\ncan fail unpredictably depending on the environment or load.</p>\n<p>Use mocks or libraries such as <code>Awaitility</code> instead. These tools provide features such as timeouts, assertions, and error handling to\nmake it easier to write and manage asynchronous tests.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@Test\npublic void testDoTheThing(){\n\n  MyClass myClass = new MyClass();\n  myClass.doTheThing();\n\n  Thread.sleep(500);  // Noncompliant\n  // assertions...\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@Test\npublic void testDoTheThing(){\n\n  MyClass myClass = new MyClass();\n  myClass.doTheThing();\n\n  await().atMost(2, Duration.SECONDS).until(didTheThing());  // Compliant\n  // assertions...\n}\n\nprivate Callable&lt;Boolean&gt; didTheThing() {\n  return new Callable&lt;Boolean&gt;() {\n    public Boolean call() throws Exception {\n      // check the condition that must be fulfilled...\n    }\n  };\n}\n</pre>"
                },
                {
                    "key": "resources",
                    "content": "<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/lang/Thread.html\">Oracle SE 20 - Thread</a> </li>\n  <li> <a href=\"http://www.awaitility.org/\">Awaitility</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://www.baeldung.com/java-thread-sleep-vs-awaitility-await\">Baeldung - Thread.sleep() vs Awaitility.await()</a> </li>\n  <li> <a href=\"https://www.baeldung.com/awaitility-testing\">Baeldung - Awaitility testing</a> </li>\n</ul>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "COMPLETE",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S3923",
            "repo": "java",
            "name": "All branches in a conditional structure should not have exactly the same implementation",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S3923"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Having all branches of a <code>switch</code> or <code>if</code> chain with the same implementation indicates a problem.</p>\n<p>In the following code:</p>\n<pre>\nif (b == 0) {  // Noncompliant\n  doOneMoreThing();\n} else {\n  doOneMoreThing();\n}\n\nint b = a &gt; 12 ? 4 : 4;  // Noncompliant\n\nswitch (i) {  // Noncompliant\n  case 1:\n    doSomething();\n    break;\n  case 2:\n    doSomething();\n    break;\n  case 3:\n    doSomething();\n    break;\n  default:\n    doSomething();\n}\n</pre>\n<p>Either there is a copy-paste error that needs fixing or an unnecessary <code>switch</code> or <code>if</code> chain that should be removed.</p>\n<h3>Exceptions</h3>\n<p>This rule does not apply to <code>if</code> chains without <code>else</code>, nor to <code>switch</code> without a <code>default</code> clause.</p>\n<pre>\nif(b == 0) {    //no issue, this could have been done on purpose to make the code more readable\n  doSomething();\n} else if(b == 1) {\n  doSomething();\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S5194",
            "repo": "java",
            "name": "Use Java 14 \"switch\" expression",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "java14"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S5194"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>Many existing switch statements are essentially simulations of switch expressions, where each arm either assigns to a common target variable or\nreturns a value. Expressing this as a statement is roundabout, repetitive, and error-prone.</p>\n<p>Java 14 added support for switch expressions, which provide more succinct and less error-prone version of switch.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nvoid day_of_week(DoW day) {\n    int numLetters;\n    switch (day) {  // Noncompliant\n      case MONDAY:\n      case FRIDAY:\n      case SUNDAY:\n        numLetters = 6;\n        break;\n      case TUESDAY:\n        numLetters = 7;\n        break;\n      case THURSDAY:\n      case SATURDAY:\n        numLetters = 8;\n        break;\n      case WEDNESDAY:\n        numLetters = 9;\n        break;\n      default:\n        throw new IllegalStateException(\"Wat: \" + day);\n    }\n}\n\nint return_switch(int x) {\n    switch (x) { // Noncompliant\n      case 1:\n        return 1;\n      case 2:\n        return 2;\n      default:\n        throw new IllegalStateException();\n    }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nint numLetters = switch (day) {\n    case MONDAY, FRIDAY, SUNDAY -&gt; 6;\n    case TUESDAY                -&gt; 7;\n    case THURSDAY, SATURDAY     -&gt; 8;\n    case WEDNESDAY              -&gt; 9;\n};\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "java:S6070",
            "repo": "java",
            "name": "The regex escape sequence \\cX should only be used with characters in the @-_ range",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "regex"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S6070"
                ]
            },
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "<p>In regular expressions the escape sequence <code>\\cX</code>, where the X stands for any character that’s either <code>@</code>, any capital ASCII\nletter, <code>[</code>, <code>\\</code>, <code>]</code>, <code>^</code> or <code>_</code>, represents the control character that \"corresponds\" to the\ncharacter following <code>\\c</code>, meaning the control character that comes 64 bytes before the given character in the ASCII encoding.</p>\n<p>In some other regex engines (for example in that of Perl) this escape sequence is case insensitive and <code>\\cd</code> produces the same control\ncharacter as <code>\\cD</code>. Further using <code>\\c</code> with a character that’s neither <code>@</code>, any ASCII letter, <code>[</code>,\n<code>\\</code>, <code>]</code>, <code>^</code> nor <code>_</code>, will produce a warning or error in those engines. Neither of these things is true\nin Java, where the value of the character is always XORed with 64 without checking that this operation makes sense. Since this won’t lead to a\nsensible result for characters that are outside of the <code>@</code> to <code>_</code> range, using <code>\\c</code> with such characters is almost\ncertainly a mistake.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nPattern.compile(\"\\\\ca\"); // Noncompliant, 'a' is not an upper case letter\nPattern.compile(\"\\\\c!\"); // Noncompliant, '!' is outside of the '@'-'_' range\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nPattern.compile(\"\\\\cA\"); // Compliant, this will match the \"start of heading\" control character\nPattern.compile(\"\\\\c^\"); // Compliant, this will match the \"record separator\" control character\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "COMPLETE",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "java:S6073",
            "repo": "java",
            "name": "Mockito argument matchers should be used on all parameters",
            "createdAt": "2025-03-13T03:35:47+0000",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "tests",
                "mockito"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnType": "CONSTANT_ISSUE",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "TEST",
            "isExternal": false,
            "deprecatedKeys": {
                "deprecatedKey": [
                    "squid:S6073"
                ]
            },
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "<ul>\n  <li> <a href=\"https://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html#argument_matchers\">Mockito documentation</a> -\n  argument matchers </li>\n  <li> <a href=\"https://sonarsource.github.io/rspec/#/rspec/<a href='/coding_rules#rule_key=java%3AS6068'>S6068</a>/java\"><a href='/coding_rules#rule_key=java%3AS6068'>S6068</a> - Call to Mockito method \"verify\", \"when\" or\n  \"given\" should be simplified</a> </li>\n</ul>"
                },
                {
                    "key": "root_cause",
                    "content": "<p>Mockito provides <em>argument matchers</em> and <em>argument captors</em> for flexibly stubbing or verifying method calls.</p>\n<p><code>Mockito.verify()</code>, <code>Mockito.when()</code>, <code>Stubber.when()</code> and <code>BDDMockito.given()</code> each have overloads\nwith and without argument matchers.</p>\n<p>However, if argument matchers or captors are used only on some of the parameters, all the parameters need to have matchers as well, otherwise an\n<code>InvalidUseOfMatchersException</code> will be thrown.</p>\n<p>This rule consequently raises an issue every time matchers are not used on all the parameters of a stubbed/verified method.</p>"
                },
                {
                    "key": "how_to_fix",
                    "content": "<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@Test\npublic void myTest() {\n    // Setting up mock responses\n    given(foo.bar(anyInt(), i1, i2)).willReturn(null); // Noncompliant, no matchers for \"i1\" and \"i2\"\n    when(foo.baz(eq(val1), val2)).thenReturn(\"hi\"); // Noncompliant, no matcher for \"val2\"\n\n    // Simulating exceptions\n    doThrow(new RuntimeException()).when(foo).quux(intThat(x -&gt; x &gt;= 42), -1); // Noncompliant, no matcher for \"-1\"\n\n    // Verifying method invocations\n    verify(foo).bar(i1, anyInt(), i2); // Noncompliant, no matchers for \"i1\" and \"i2\"\n\n    // Capturing arguments for verification\n    ArgumentCaptor&lt;Integer&gt; captor = ArgumentCaptor.forClass(Integer.class);\n    verify(foo).bar(captor.capture(), i1, any()); // Noncompliant, no matchers for \"i1\"\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@Test\npublic void myTest() {\n    // Setting up mock responses\n    given(foo.bar(anyInt(), eq(i1), eq(i2))).willReturn(null); // Compliant, all arguments have matchers\n    when(foo.baz(val1, val2)).thenReturn(\"hi\"); // Compliant, no argument has matchers\n\n    // Simulating exceptions\n    doThrow(new RuntimeException()).when(foo).quux(intThat(x -&gt; x &gt;= 42), eq(-1)); // Compliant, all arguments have matchers\n\n    // Verifying method invocations\n    verify(foo).bar(eq(i1), anyInt(), eq(i2)); // Compliant, all arguments have matchers\n\n    // Capturing arguments for verification\n    ArgumentCaptor&lt;Integer&gt; captor = ArgumentCaptor.forClass(Integer.class);\n    verify(foo).bar(captor.capture(), any(), any()); // Compliant, all arguments have matchers\n}\n</pre>"
                }
            ],
            "educationPrinciples": [],
            "updatedAt": "2025-03-13T03:35:47+0000",
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        }
    ],
    "paging": {
        "pageIndex": 1,
        "pageSize": 500,
        "total": 678
    }
}